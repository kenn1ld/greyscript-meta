{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.insert."},{"role":"assistant","content":"Signature: any.insert(index: number, value: any) -> list | string\nInserts a value into either a `list` or a `string`. If the passed index is not a `number`, this method throws an error, preventing further script execution.\nExample:\nlist = [2, 3, 4]\nlist.insert(2, 42)\nprint(\"List with inserted item: \" + list.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.indexOf."},{"role":"assistant","content":"Signature: any.indexOf(value: any, value: any, after: any?) -> any\nLookups index of value within `map`s, `list`s, or `string`s. For `list`s and `string`s, the behavior is very similar. On success, you'll receive a `number` representing the found index. On failure, it will return `null`. For `map`s, it's a bit different since the returned value could be of any type. On failure, it will return `null` as well.\nExample:\nindex = \"test\".indexOf(\"e\")\nprint(\"e is at: \" + index)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.hasIndex."},{"role":"assistant","content":"Signature: any.hasIndex(value: any) -> number\nVerifies if an index is available within an object. In case of success this method will return a `number` with the value one. In case of failure the value will be a zero. This method supports `map`s, `list`s and `string`s. Each passed type may result in different behavior therefore it is advisable to take a look at each of their specific signatures.\nExample:\nprint(\"List has index: \" + [1, 2, 3].hasIndex(2)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.remove."},{"role":"assistant","content":"Signature: any.remove(value: any) -> number | null | string\nDepending on the data type, this function will remove a value in the provided object, potentially mutating the object. This method works with `map`s, `list`s, and `string`s. Each passed type may support different types for the `key` argument. For example, using this method on a string would treat the key as a character index. Therefore, it is advised to review the signatures of each type. Passing a key with the type `null` may cause an error to be thrown, preventing further script execution.\nExample:\nlist = [9, 3, 5, 7]\nlist.remove(5)\nprint(\"List after removal: \" + list.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.push."},{"role":"assistant","content":"Signature: any.push(value: any) -> list | map\nAllows pushing a value into an object, supporting `map`s and `list`s. However, it throws an error if you attempt to push a value into itself or into a map-like object such as a `file`, halting further script execution.\nExample:\nlist = [0, 1, 2, 3, 4, 5]\nlist.push(42)\nprint(\"The answer to everything is: \" + list.pop)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.pull."},{"role":"assistant","content":"Signature: any.pull() -> any\nWhen passing a `list` to this method, it will return the value at the first index and remove it from the `list`. Additionally, if a `map` is passed, it will always return the value corresponding to the first matching key and mutate the `map` object accordingly. However, passing a map-like object such as `file` or `computer` will result in an error, interrupting further script execution.\nExample:\nmyList = [42, 1, 3]\nanswer = myList.pull\nprint(\"Answer to everything: \" + answer)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.pop."},{"role":"assistant","content":"Signature: any.pop() -> any\nWhen passing a `list` to this method, it will return the value at the last index and remove it from the `list`. Additionally, if a `map` is passed, it will always return the value corresponding to the first matching key and mutate the `map` object accordingly. However, passing a map-like object such as `file` or `computer` will result in an error, interrupting further script execution.\nExample:\nlist = [0, 1, 2, 3, 4, 5]\nprint(\"The last item is: \" + list.pop)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.shuffle."},{"role":"assistant","content":"Signature: any.shuffle() -> null\nRandomizes content of an object. Valid data types for this method are `list` and `map`. In case a map-like object such as a `file` or `computer` a runtime exception will be thrown.\nExample:\nlist = [0, 1, 2, 3, 4, 5]\nlist.shuffle\nprint(\"And the winner is: \" + list[0])"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.sum."},{"role":"assistant","content":"Signature: any.sum() -> number\nReturns a `number` representing the sum of all items within a `map` or a `list`.\nExample:\nlist = [0, 1, 2, 3, 4, 5]\nprint(\"Sum of all items is: \" + list.sum)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.indexes."},{"role":"assistant","content":"Signature: any.indexes() -> list\nReturns a `list` containing all indexes or keys of the passed object. This method supports `map`s, `list`s, and `string`s. The type of each item may vary when using this method on a `map` since keys could be any type. The other types will return a `list` where each item is a `number`.\nExample:\nindexesOfStr = \"test\".indexes\nprint(\"Following indexes are available: \" + indexesOfStr.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.len."},{"role":"assistant","content":"Signature: any.len() -> number\nReturns `number` indicating what size the object is.\nExample:\nlength = \"test\".len\nprint(\"Length of string is: \" + length)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain any.values."},{"role":"assistant","content":"Signature: any.values() -> list\nReturns a `list` containing all values of an object.\nExample:\nindexesOfStr = \"test\".values\nprint(\"Following values are available: \" + indexesOfStr.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the apt-client object."},{"role":"assistant","content":"A `aptClient` object can be obtained by using [include_lib](#GENERAL_INCLUDE_LIB). The `classID` used for this object is `\"aptclientLib\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain apt-client.show."},{"role":"assistant","content":"Signature: apt-client.show(repository: string) -> string | null\nShow displays all the packages available in a repository. The repository must be listed in the `\"/etc/apt/sources.txt\"` file. If the provided repository value is anything other than a `string`, this method will return `null`. If it cannot find a repository, it will return various error messages. On success, it will return a `string` containing all packages and their descriptions, with each entry separated by a newline.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\npackages = aptClient.show(\"177.202.15.132\")\npackageList = packages.split(char(10) + char(10))\npackageList.pop // remove last empty item\nfor packageItem in packageList\n    entry = packageItem.split(char(10))\n    packageName = entry[0]\n    packageDescription = entry[1]\n    print \"Title: <b>\" + packageName + \"</b>\"\n    print \"Description: <i>\" + packageDescription + \"</i>\"\n    print \"----------------------------\"\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain apt-client.search."},{"role":"assistant","content":"Signature: apt-client.search(search: string) -> string | null\nSearch specifically looks for a package in any of the repositories listed in `\"/etc/apt/sources.txt\"`. If the provided search value is anything other than a `string`, this method will return `null`. On success, it will return a `string` containing all packages that partially match the provided search value. On failure, it will return a `string` with various error messages.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\npackages = aptClient.search(\".so\")\npackageList = packages.split(char(10) + char(10))\nfor packageItem in packageList\n    entry = packageItem.split(char(10))\n    if entry.len != 2 then\n        print \"something wrong in: \" + entry\n        continue\n    end if\n    packageName = entry[0]\n    packageDescription = entry[1]\n    print \"Title: <b>\" + packageName + \"</b>\"\n    print \"Description: <i>\" + packageDescription + \"</i>\"\n    print \"----------------------------\"\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain apt-client.update."},{"role":"assistant","content":"Signature: apt-client.update() -> string | number\nUpdate refreshes the list of available packages after adding a new repository in `\"/etc/apt/sources.txt\"`, or if the remote repository has updated its information in `\"/server/conf/repod.conf\"`. If the update is successful, an empty `string` will be returned. In case of failure, a `string` with an error message will be returned. If for some reason the `\"/etc/apt/sources.txt\"` is malformed this method will return a number with the value zero.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\nresult = aptClient.update\nif result == \"\" then\n    print \"Update successful!\"\nelse\n    print \"Error while updating: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain apt-client.add_repo."},{"role":"assistant","content":"Signature: apt-client.add_repo(repository: string, port: number) -> string | null\nInserts a repository address into the `\"/etc/apt/sources.txt\"` file. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. On success, it will return an empty `string`. In case of failure, it will return a `string` with an error message.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\nresult = aptClient.add_repo(\"177.202.15.132\")\nif result == \"\" then\n    print \"Addition successful!\"\nelse\n    print \"Error while adding: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain apt-client.del_repo."},{"role":"assistant","content":"Signature: apt-client.del_repo(repository: string) -> string | null\nDeletes a repository address from the `\"/etc/apt/sources.txt\"` file. If the provided repository value is anything other than a `string`, this method will return `null`. On success, it will return an empty `string`. In case of failure, it will return a `string` with an error message.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\nresult = aptClient.del_repo(\"177.202.15.132\")\nif result == \"\" then\n    print \"Deletion successful!\"\nelse\n    print \"Error while deleting: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain apt-client.install."},{"role":"assistant","content":"Signature: apt-client.install(package: string, customPath: string) -> string | number | null\nInstalls a program or library from a remote repository listed in `\"/etc/apt/sources.txt\"`. If no path is specified, the program installs in `\"/lib\"` if it is a library or in `\"/bin\"` otherwise. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. On success, this method will return a `number` with the value one. In case of failure, it will return a `string` containing an error message.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\nresult = aptClient.install(\"rshell_interface\")\nif result == 1 then\n    print \"Installed program successful!\"\nelse\n    print \"Error while installing: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain apt-client.check_upgrade."},{"role":"assistant","content":"Signature: apt-client.check_upgrade(filepath: string) -> string | number | null\nChecks if there is a newer version of the program or library in the repository. If the provided filepath value is anything other than a `string`, this method will return `null`. On success, it will return a `number`, which can be either zero or one. Zero indicates that there is no new version, while one indicates that there is a new version available. In case of failure, it will return a string containing an error message.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\nresult = aptClient.check_upgrade(\"/bin/rshell_interface\")\nif result == 0 then\n    print \"Program doesnt need an update!\"\nelse if result == 1 then\n    print \"Program does need an update!\"\nelse\n    print \"Error while checking version: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the blockchain object."},{"role":"assistant","content":"A `blockchain` object can be obtained by using [include_lib](#GENERAL_INCLUDE_LIB). The `classID` used for this object is `\"blockchainLib\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain blockchain.coin_price."},{"role":"assistant","content":"Signature: blockchain.coin_price(coinName: string) -> null | string | number\nReturns a `number` representing the current unit value of the cryptocurrency. In case of an error, a `string` with the error details will be returned. If the provided `coinName` is anything other than a `string`, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nprice = blockchain.coin_price(\"test\")\nif typeof(price) == \"string\" then\n    exit \"Couldnt get coin price due to: \" + price\nend if\nprint \"Your coin price is \" + price"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain blockchain.show_history."},{"role":"assistant","content":"Signature: blockchain.show_history(coinName: string) -> {\"type\":\"map\",\"keyType\":\"number\",\"valueType\":\"list\"} | string | null\nReturns a `map` with the latest changes in the value of a specific cryptocurrency. The key of the `map` is an index represented by a `number`. The value is a `list`, where index 0 is the historical price of the coin and index 1 is the date when the price change occurred. If the provided `coinName` is anything other than a `string` or if no coin exists with this name, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nhistory = blockchain.show_history(\"test\")\nif typeof(history) == \"string\" then\n    exit \"Couldnt fetch history due to: \" + history\nelse if history == null then\n    exit \"There doesnt seem to be a coin\"\nend if\nfor entry in history.values\n    price = entry[0]\n    date = entry[1]\n    print \"The price on \" + date + \" was \" + price\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain blockchain.amount_mined."},{"role":"assistant","content":"Signature: blockchain.amount_mined(coinName: string) -> string | number | null\nReturns a `number` representing the total amount of mined coins. In case of an error, it will return a `string` with the details. If the provided coinName is anything other than a `string`, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nmined = blockchain.amount_mined(\"test\")\nif typeof(mined) == \"string\" then\n    exit \"Couldnt get amount mined due to: \" + mined\nend if\nprint \"Your mined amount is \" + mined"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain blockchain.get_coin."},{"role":"assistant","content":"Signature: blockchain.get_coin(coinName: string, user: string, password: string) -> string | coin | null\nReturns a `coin` object used to manage the currency. In case of an error, it will return a `string` with the details. If any of the provided parameters deviate from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nif typeof(coin) != \"coin\" then\n    exit \"Couldnt get coin object due to: \" + coin\nend if\nprint \"Your coin address is \" + coin.get_address"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain blockchain.get_coin_name."},{"role":"assistant","content":"Signature: blockchain.get_coin_name(user: string, password: string) -> string | null\nReturns a `string` with the name of the coin owned by the player. In case of an error, it returns a `string` with details. If any provided parameters deviate from the defined signature, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoinName = blockchain.get_coin_name(\"test\", \"test\")\nif not coinName.matches(\"^[A-Z]+$\") then\n    exit \"Couldnt get coin name due to: \" + coinName\nend if\nprint \"The name of the coin you're owning is \" + coinName"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain blockchain.login_wallet."},{"role":"assistant","content":"Signature: blockchain.login_wallet(user: string, password: string) -> string | wallet | null\nReturns a `wallet` object on success. In case of an error, it will return a `string` indicating the reason. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = blockchain.login_wallet(\"test\", \"test\")\nif typeof(wallet) == \"string\" then\n  print \"Login failed due to: \" + wallet\nelse\n  print \"Login was successful!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain blockchain.create_wallet."},{"role":"assistant","content":"Signature: blockchain.create_wallet(user: string, password: string) -> string | wallet | null\nCreates a `wallet` and returns a `wallet` object on success, which can be used to manage cryptocurrencies. In case of an error, it will return a `string` with the details. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = blockchain.create_wallet(\"test\", \"test\")\nif typeof(wallet) == \"string\" then\n  print \"Wallet creation failed due to: \" + wallet\nelse\n  print \"Wallet creation was successful!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain blockchain.delete_coin."},{"role":"assistant","content":"Signature: blockchain.delete_coin(coinName: string, user: string, password: string) -> number | string | null\nRemoves a cryptocurrency from the world. The credentials used in the creation of the cryptocurrency are required. On success, it will return a `number` with the value one. On failure, it will return a `string` containing details. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nresult = blockchain.delete_coin(\"test\", \"test\", \"test\")\nif typeof(result) == \"string\" then\n    exit \"Couldnt delete coin due to: \" + result\nend if\nprint \"Coin got deleted\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the class object."},{"role":"assistant","content":"A class or object is a `map` with a special `__isa` entry that points to the parent. This is set automatically when you use the `new` operator."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the coin object."},{"role":"assistant","content":"A `coin` object can be obtained by using [get_coin](#BLOCKCHAIN_GET_COIN). The `classID` used for this object is `\"coin\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.set_cycle_mining."},{"role":"assistant","content":"Signature: coin.set_cycle_mining(rateHours: number) -> string | number | null\nDefines the interval (in-game hours) in which each user receives a coin reward when mining. The interval cannot be lower than 1 and not higher than 2160. If the provided `rateHours` is not a `number`, this method will return `null`. On success, it will return a `number` with the value one. In case of failure, the method will return a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.set_cycle_mining(20)\nif result == 1 then\n    print \"Successful updated mining interval\"\nelse\n    print \"Failed updating mining interval\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.get_cycle_mining."},{"role":"assistant","content":"Signature: coin.get_cycle_mining() -> string | number\nReturns a `number` representing the defined interval in which each user receives a coin reward when mining. In case of failure, the method will return a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.get_cycle_mining\nif typeof(result) == \"string\" then\n    exit \"Failed getting cyclic mining value due to: \" + result\nend if\nprint \"cyclic mining value: \" + result"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.get_reward."},{"role":"assistant","content":"Signature: coin.get_reward() -> string | number\nReturns a `number` representing the amount of coins that will be received as a reward after each mining cycle. In case of failure, the method will return a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.get_reward\nif typeof(result) == \"string\" then\n    exit \"Failed getting reward value due to: \" + result\nend if\nprint \"reward value: \" + result"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.set_reward."},{"role":"assistant","content":"Signature: coin.set_reward(coinAmount: number) -> number | string | null\nAssigns the reward that miners will receive after each mining cycle. The reward value has to be above one. If the provided `coinAmount` is not a `number`, this method will return `null`. On success, it will return a `number` with the value one. In case of failure, the method will return a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.set_reward(-1)\nif typeof(result) == \"string\" then\n    exit \"Failed setting reward due to: \" + result\nend if\nprint \"Successfully set reward!\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.transaction."},{"role":"assistant","content":"Signature: coin.transaction(subWalletOrig: string, subWalletDest: string, valAmount: number) -> string | number | null\nFacilitates a transaction of the currency between the indicated subwallets. In case of an error, a `string` with the details is returned. In case of success, a `number` with a value of one will be returned. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.transaction(\"test\", \"test2\", 20)\nif typeof(result) == \"string\" then\n    exit \"Failed transaction due to: \" + result\nend if\nprint \"Successfully transfered!\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.create_subwallet."},{"role":"assistant","content":"Signature: coin.create_subwallet(walletID: string, pin: string, subWalletUser: string, subWalletPass: string) -> string | number | null\nRegisters a new account in the `coin` that can be used to manage services such as stores. It is necessary to provide the PIN of the owner's `wallet` that wants to register. In case of success, the method will return a `number` with the value one. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. In case of an error, a `string` with the details is returned.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nwallet = blockchain.login_wallet(\"test\", \"test\")\nresult = coin.create_subwallet(\"test\", wallet.get_pin, \"test\", \"test\")\nif typeof(result) == \"string\" then\n    exit \"Failed to create subwallet due to: \" + result\nend if\nprint \"Successfully created subwallet!\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.get_subwallet."},{"role":"assistant","content":"Signature: coin.get_subwallet(subWalletUser: string) -> string | subWallet | null\nReturns a `subWallet` object on success. In case of error, it returns a `string` with the details. If the provided `subWalletUser` is not a `string`, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.get_subwallet(\"test\")\nif typeof(result) == \"string\" then\n    exit \"Failed to get subwallet due to: \" + result\nend if\nprint \"Successfully received subwallet!\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.get_subwallets."},{"role":"assistant","content":"Signature: coin.get_subwallets() -> string | {\"type\":\"list\",\"valueType\":\"subWallet\"}\nReturns a `list` where each item is a `subWallet` object, including all the accounts registered in the cryptocurrency. In case of error, it returns a `string` with the details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.get_subwallets\nif typeof(result) == \"string\" then\n    exit \"Failed to get subwallets due to: \" + result\nend if\nfor subwallet in result\n    print subwallet.get_user + \" has \" + subwallet.get_balance + \" coins\"\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.set_address."},{"role":"assistant","content":"Signature: coin.set_address(address: string) -> number | string | null\nConfigures a valid address that will be shown to users who do not have the currency, indicating where to register. In case of an error, it returns a `string` with the details. In case of success, a `number` with a value of one will be returned. If the provided address is not a `string`, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.set_address(\"12.12.12.12\")\nif typeof(result) == \"string\" then\n    exit \"Failed to set address due to: \" + result\nend if\nprint \"Successfully set address!\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.get_address."},{"role":"assistant","content":"Signature: coin.get_address() -> string\nReturns the configured address that will be shown to users who do not have the currency, indicating where they have to register. In case of an error, it returns a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.get_address\nif not is_valid_ip(result) then\n    exit \"Failed to get address due to: \" + result\nend if\nprint \"address: \" + result"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.get_mined_coins."},{"role":"assistant","content":"Signature: coin.get_mined_coins() -> string | number\nReturns a `number` representing the amount of coins that have been mined so far. In case of an error, it returns a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.get_mined_coins\nif typeof(result) == \"string\" then\n    exit \"Failed to get mined coins due to: \" + result\nend if\nprint \"mined coins: \" + result"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain coin.reset_password."},{"role":"assistant","content":"Signature: coin.reset_password(newPassword: string) -> number | string\nResets the password of the coin. It returns a `number` with the value one if resetting was successful; otherwise, it will return a `string`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nresult = coin.reset_password(\"test\")\nif typeof(result) == \"string\" then\n    exit \"Failed to reset password due to: \" + result\nend if\nprint \"Successfully reset password\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the computer object."},{"role":"assistant","content":"A `computer` object can be obtained by either using [host_computer](#SHELL_HOST_COMPUTER) or [overflow](#METALIB_OVERFLOW). The `classID` used for this object is `\"computer\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.get_ports."},{"role":"assistant","content":"Signature: computer.get_ports() -> {\"type\":\"list\",\"valueType\":\"port\"}\nReturns a `list` of `port`s on the `computer` that are active.\nExample:\nrouter = get_router\nports = get_shell.host_computer.get_ports\nfor port in ports\n    print(\"Info: \" + router.port_info(port))\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.get_name."},{"role":"assistant","content":"Signature: computer.get_name() -> string\nReturns the hostname of the machine.\nExample:\ncomputerName = get_shell.host_computer.get_name\nprint(\"The name of your machine is \" + computerName)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.local_ip."},{"role":"assistant","content":"Signature: computer.local_ip() -> string\nReturns a `string` with the local IP address of the `computer`.\nExample:\nlocalIp = get_shell.host_computer.local_ip\nprint(\"Local ip:\" + localIp)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.public_ip."},{"role":"assistant","content":"Signature: computer.public_ip() -> string\nReturns a `string` with the public IP address of the `computer`.\nExample:\npublicIp = get_shell.host_computer.public_ip\nprint(\"Public ip:\" + publicIp)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.File."},{"role":"assistant","content":"Signature: computer.File(path: string) -> file | null\nReturns a `file` located at the path provided in the arguments. The path can be either relative or absolute. It's important to note that any `file` object can represent a folder as well. If the provided path cannot be resolved, meaning that no file or folder exists, this method will return `null`. Providing any other type than `string` or an empty value for the path will result in an error, interrupting the script execution.\nExample:\nfilePath = \"/etc/passwd\"\nfile = get_shell.host_computer.File(filePath)\nif file != null then\n   print(file.get_content)\nelse\n   print(\"File at given path \" + filePath + \" does not exist.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.create_folder."},{"role":"assistant","content":"Signature: computer.create_folder(path: string, folder: string) -> string | number\nCreates a folder at the path provided in the arguments. There are certain limitations to creating a folder: the folder name has to be alphanumeric and below 128 characters. Creation will fail if there is already a folder in place or if there are lacking permissions. Additionally, there is a folder limit of about 250 in each folder and 3125 folders in the computer overall. In case the folder creation fails, the method will return a `string` with details. In case of success, it will return a `number` with the value one. Providing any type that deviates from the signature or using this method in an SSH encryption process will cause an error to be thrown, aborting further script execution.\nExample:\npath = \"/home/\" + active_user + \"/Desktop\"\nhostComputer = get_shell.host_computer\ncreateResult = hostComputer.create_folder(path, \"myfolder\")\nif typeof(createResult) == \"string\" then\n   print(\"There was an error when creating the folder: \" + createResult)\nelse\n   print(\"Folder got created at given path \" + path)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.is_network_active."},{"role":"assistant","content":"Signature: computer.is_network_active() -> number\nReturns a `number` with either the value one or zero. If the `computer` has internet access, the value will be one. If there is no internet access, it will return zero instead.\nExample:\nhostComputer = get_shell.host_computer\nif hostComputer.is_network_active then\n   print(\"You're connected.\")\nelse\n   print(\"You're not connected.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.touch."},{"role":"assistant","content":"Signature: computer.touch(path: string, fileName: string) -> number | string\nCreates an empty text `file` at the provided path. Certain limitations apply to file creation: the `file` name must be alphanumeric and below 128 characters. Creation will fail if there is already a `file` in place or if permissions are lacking. Additionally, there is a file limit of about 250 in each folder and 3125 files in the computer overall. In case of success, it returns a `number` with the value one. In case of failure, it returns a `string` with details. Using this method in an SSH encryption process will cause an error to be thrown, preventing any further script execution.\nExample:\npath = \"/home/\" + active_user + \"/Desktop\"\nhostComputer = get_shell.host_computer\ncreateResult = hostComputer.touch(path, \"myFile.txt\")\nif typeof(createResult) == \"string\" then\n   print(\"There was an error when creating the file: \" + createResult)\nelse\n   print(\"File got created at given path \" + path)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.show_procs."},{"role":"assistant","content":"Signature: computer.show_procs() -> string\nReturns a `string` with an overview of all active processes on the `computer`, including information about the user, PID, CPU, memory, and command. Using this method in an SSH encryption process will cause an error to be thrown, preventing any further script execution.\nExample:\nhostComputer = get_shell.host_computer\nprocs = hostComputer.show_procs\nlist = procs.split(char(10))[1:]\nprocesses = []\nfor item in list\n   parsedItem = item.split(\" \")\n   process = {}\n   process.user = parsedItem[0]\n   process.pid = parsedItem[1]\n   process.cpu = parsedItem[2]\n   process.mem = parsedItem[3]\n   process.command = parsedItem[4]\n   processes.push(process)\nend for\nprint(processes)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.network_devices."},{"role":"assistant","content":"Signature: computer.network_devices() -> string\nReturns a `string` containing information about all network devices available on the `computer`. Each item includes details about the interface name, chipset, and whether monitoring support is enabled.\nExample:\nhostComputer = get_shell.host_computer\ndevices = hostComputer.network_devices\ndeviceList = devices.split(char(10))\nfor item in deviceList\n   print(item)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.change_password."},{"role":"assistant","content":"Signature: computer.change_password(username: string, password: string) -> number | string | null\nChanges the password of an existing user on the `computer`. Root access is necessary to successfully change the password. Passwords can only include alphanumeric characters and cannot exceed 15 characters. If the password change fails, this method will return a `string` containing information on why it failed. If the change succeeds, it will return a `number` with the value one. If the provided username is empty, an error will be thrown, preventing any further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\nchangeResult = hostComputer.change_password(\"test\", \"newPassword\")\nif typeof(changeResult) == \"string\" then\n   print(\"There was an error when changing the password: \" + changeResult)\nelse\n   print(\"Password got successfully changed.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.create_user."},{"role":"assistant","content":"Signature: computer.create_user(usename: string, password: string) -> number | string | null\nCreates a user on the `computer` with the specified name and password. Root access is necessary to successfully create a user. Both the username and password cannot exceed more than 15 characters and must be alphanumeric. There cannot be more than 15 users created on the same `computer`. If the creation fails, this method will return a `string` containing the reason for the failure. On success, it will return a `number` with the value one. If the provided username is empty or either of the values exceeds 15 characters, an error will be thrown, interrupting further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\ncreationResult = hostComputer.create_user(\"newUser\", \"123\")\nif typeof(creationResult) == \"string\" then\n   print(\"There was an error when creating an user: \" + creationResult)\nelse\n   print(\"User got successfully created.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.delete_user."},{"role":"assistant","content":"Signature: computer.delete_user(username: string, removeHome: number) -> number | string | null\nDeletes the indicated user from the `computer`. It can optionally delete the user's home folder as well, although by default the home folder will not be deleted. Root access is necessary to successfully delete a user. Keep in mind that you cannot delete the root user. If the deletion fails, this method will return a `string` containing the cause of failure. On success, it will return a `number` with the value one. If the provided username is empty, an error will be thrown, interrupting further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\ndeletionResult = hostComputer.delete_user(\"test\", true)\nif typeof(deletionResult) == \"string\" then\n   print(\"There was an error when deleting an user: \" + deletionResult)\nelse\n   print(\"User got successfully deleted.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.create_group."},{"role":"assistant","content":"Signature: computer.create_group(username: string, group: string) -> number | string | null\nCreates a new group associated with an existing user on the `computer`. Root access is necessary to successfully create a group. There are limitations when creating a group, such as a character limit of 15 and that the group name may only contain alphanumeric characters. If the group creation fails, this method will return a `string` containing the cause of failure. On success, it will return a `number` with the value one. If the provided arguments are empty or the username exceeds 15 characters, an error will be thrown, interrupting further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\ncreationResult = hostComputer.create_group(\"test\", \"staff\")\nif typeof(creationResult) == \"string\" then\n   print(\"There was an error when creating a group: \" + creationResult)\nelse\n   print(\"Group got successfully created.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.delete_group."},{"role":"assistant","content":"Signature: computer.delete_group(username: string, group: string) -> number | string | null\nDeletes an existing group associated with an existing user on the `computer`. Root access is necessary to successfully delete a group. If the group deletion fails, this method will return a `string` containing the cause of failure. On success, it will return a `number` with the value one. If either of the provided values is empty, an error will be thrown, preventing further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\ndeletionResult = hostComputer.delete_group(\"test\", \"staff\")\nif typeof(deletionResult) == \"string\" then\n   print(\"There was an error when deleting a group: \" + deletionResult)\nelse\n   print(\"Group got successfully deleted.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.groups."},{"role":"assistant","content":"Signature: computer.groups(username: string) -> string | null\nReturns a `string` containing groups associated with an existing user on the `computer`. If the user does not exist, a `string` with an error message will be returned. If the provided username is empty, an error will be thrown, preventing further script execution. If the provided username is anything other than a `string`, this method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\nhostComputer.create_group(\"root\", \"staff\")\ngroups = hostComputer.groups(\"root\")\nlistOfGroups = groups.split(char(10))\nprint(listOfGroups)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.close_program."},{"role":"assistant","content":"Signature: computer.close_program(pid: number) -> number | string | null\nCloses a program associated with the provided PID. You can see the `list` of active programs by either using `show_procs` or typing ps into your terminal. To close a program, you need to either be the owner of the running process or root. If closing the program fails, this method will return a `string` containing details. On success, it will return a `number` with the value one. If there is no process with the provided PID, this method will return a `number` with the value zero. If the provided PID is anything other than a `number`, this method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\nprocesses = hostComputer.show_procs.split(char(10))[1:]\npid = processes[1].split(\" \")[1]\ncloseResult = hostComputer.close_program(pid.to_int)\nif typeof(closeResult) == \"string\" then\n   print(\"There was an error when closing a program: \" + closeResult)\nelse\n   print(\"Program with pid \" + pid + \" got successfully closed.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.wifi_networks."},{"role":"assistant","content":"Signature: computer.wifi_networks(netDevice: string) -> {\"type\":\"list\",\"valueType\":\"string\"} | null\nReturns a `list` of the Wi-Fi networks that are available for the provided interface. Each item in the `list` is a `string` containing information on the BSSID, PWR, and ESSID. If no matching netDevice can be found, this method will return `null`. If the active network card is not a Wi-Fi card, an error will be thrown, preventing any further script execution.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\nnetworks = hostComputer.wifi_networks(\"wlan0\")\nresult = []\nfor network in networks\n   parsedItem = network.split(\" \")\n   item = {}\n   item.BSSID = parsedItem[0]\n   item.PWR = parsedItem[1]\n   item.ESSID = parsedItem[2]\n   result.push(item)\nend for\nprint(result)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.connect_wifi."},{"role":"assistant","content":"Signature: computer.connect_wifi(netDevice: string, bssid: string, essid: string, password: string) -> number | string | null\nConnects to the indicated Wi-Fi network. It's not possible to connect to a new Wi-Fi while being logged in as a guest. If connecting to a new Wi-Fi fails, this method will return a `string` containing details. On success, it will return a `number` with the value one. Wi-Fi networks can be found via `wifi_networks` or by typing iwlist as a command in the terminal. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nhostComputer = get_shell.host_computer\nnetworks = hostComputer.wifi_networks\nfirstNetwork = networks[0].split(\" \")\nBSSID = firstNetwork[0]\nESSID = firstNetwork[2]\nconnectionResult = hostComputer.connect_wifi(\"wlan0\", BSSID, ESSID, \"wifi-password\")\nif typeof(connectionResult) == \"string\" then\n   print(\"There was an error while connecting to new Wifi: \" + connectionResult)\nelse\n   print(\"Connected to new Wifi successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.connect_ethernet."},{"role":"assistant","content":"Signature: computer.connect_ethernet(netDevice: string, address: string, gateway: string) -> string | null\nSets up a new IP address on the computer through the Ethernet connection. It's not possible to set up a new IP address while being logged in as a guest. On failure, this method will either return a `string` with details or `null`. On success, it will return an empty `string`. If any of the provided parameters have a type that deviates from the defined signature or the computer is not connected to the internet, an error will be thrown, preventing any further script execution.\nExample:\nhostComputer = get_shell.host_computer\nconnectionResult = hostComputer.connect_ethernet(\"eth0\", \"192.168.0.4\", get_router.local_ip)\nif typeof(connectionResult) == \"string\" then\n   print(\"There was an error while connecting: \" + connectionResult)\nelse\n   print(\"Connected successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.network_gateway."},{"role":"assistant","content":"Signature: computer.network_gateway() -> string\nReturns a `string` with the gateway IP address configured on the computer.\nExample:\nhostComputer = get_shell.host_computer\ngatewayIp = hostComputer.network_gateway\nprint(\"Gateway IP: \" + gatewayIp)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain computer.active_net_card."},{"role":"assistant","content":"Signature: computer.active_net_card() -> string\nReturns a `string` which contains either the keyword `\"WIFI\"` or `\"ETHERNET\"` depending on the connection type your computer is currently using.\nExample:\nhostComputer = get_shell.host_computer\nnetCard = hostComputer.active_net_card\nprint(\"Connected by: \" + netCard)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the crypto object."},{"role":"assistant","content":"A `crypto` object can be obtained by using [include_lib](#GENERAL_INCLUDE_LIB). The `classID` used for this object is `\"cryptoLib\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain crypto.aircrack."},{"role":"assistant","content":"Signature: crypto.aircrack(path: string) -> string | null\nReturns a `string` containing the password based on the file which was generated via aireplay. In case of failure, it will return `null` instead. If the provided path is empty, an error will be thrown, interrupting the script execution.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\nnetworks = get_shell.host_computer.wifi_networks(\"wlan0\")\nfirstNetwork = networks[1].split(\" \")\nbssid = firstNetwork[0]\npwr = firstNetwork[1][:-1].to_int\nessid = firstNetwork[2]\naireplayResult = crypto.aireplay(bssid, essid, 300000 / pwr)\nif (aireplayResult == null) then\n   result = crypto.aircrack(home_dir + \"/file.cap\")\n   print(result)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain crypto.airmon."},{"role":"assistant","content":"Signature: crypto.airmon(option: string, device: string) -> number | string\nEnables or disables the monitor mode of a network device. The `options` parameter can only be `\"start\"` or `\"stop\"`. Monitor mode can only be enabled on Wifi cards. If it wasn't possible to enable or disable the monitor mode, this method will return either a `number` with the value zero or a `string` with details. In case of success, it will return a `number` with the value one.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\nairmonResult = crypto.airmon(\"start\", \"wlan0\")\nif typeof(airmonResult) == \"string\" then\n   print(\"There was an error while switching monitoring mode: \" + airmonResult)\nelse\n   print(\"Monitoring mode switched successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain crypto.aireplay."},{"role":"assistant","content":"Signature: crypto.aireplay(bssid: string, essid: string, maxAcks: number) -> string | null\nUsed to inject frames on wireless interfaces. Once the command with `\"Control+C\"` is stopped, it will save the captured information in a text file called `\"file.cap\"` in the path where the terminal is currently located. Alternatively, a maximum of captured `acks` can be specified for the command to stop automatically, saving the `\"file.cap\"` file as described above. To figure out how many ACKs are required, you can use the following formula: `\"300000 / (Power + 15)\"`. If there is an error, a `string` will be returned with the message indicating the problem. On success, it will return `null`, it is advised though to verify that the capture file actually exists. In case any of the provided values deviate from the signature types or bssid/essid is empty, an error will be thrown preventing any further script execution.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\nnetworks = get_shell.host_computer.wifi_networks(\"wlan0\")\nfor index in range(0, networks.len - 1)\n   print(index + \".) \" + networks[index])\nend for\nselectedIndex = user_input(\"Select Wifi: \").to_int\nif (typeof(selectedIndex) == \"string\" or selectedIndex < 0 or selectedIndex > networks.len - 1) then\n   exit(\"Wrong index!\")\nend if\nparsed = networks[selectedIndex].split(\" \")\nbssid = parsed[0]\npwr = parsed[1][:-1].to_int\nessid = parsed[2]\npotentialAcks = 300000 / (pwr + 15)\ncrypto.aireplay(bssid, essid, potentialAcks)\nwifiPassword = crypto.aircrack(\"/home/\" + active_user + \"/file.cap\")\nprint(\"Wifi password for \" + essid + \" is \" + wifiPassword)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain crypto.decipher."},{"role":"assistant","content":"Signature: crypto.decipher(encPass: string) -> string | null\nReturns a decrypted password via the provided password MD5 hash. Keep in mind that this method is not decrypting a password but rather checking for existing passwords within the game world with a matching MD5 hash. So in case a password does not exist in the game world, the decryption will fail. On failure, this method will return `null`. Using this method in an SSH encryption process will cause an error to be thrown, aborting further script execution.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\nhostComputer = get_shell(\"root\", \"test\").host_computer\npasswdContent = hostComputer.File(\"/etc/passwd\").get_content\nfirstAccount = passwdContent.split(char(10))[0]\nparsed = firstAccount.split(\":\")\nusername = parsed[0]\npasswordHash = parsed[1]\npassword = crypto.decipher(passwordHash)\nprint(\"User: \" + username)\nprint(\"Password: \" + password)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain crypto.smtp_user_list."},{"role":"assistant","content":"Signature: crypto.smtp_user_list(ip: string, port: number) -> {\"type\":\"list\",\"valueType\":\"string\"} | string | null\nReturns a `list` of the existing users on the `computer` where the SMTP service is running. If these users also have an email account registered on the SMTP server, it will be indicated in the `list`. SMTP services are usually running on port `25`. In case of failure, this method will return a `string` containing the cause. If any of the provided values deviate from the signature types, this method will return `null`.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\nprint(crypto.smtp_user_list(\"192.168.0.4\", 25))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the ctf-event object."},{"role":"assistant","content":"A `ctfEvent` object can be obtained by using [get_ctf](#GENERAL_GET_CTF). The `classID` used for this object is `\"ctfEvent\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain ctf-event.get_description."},{"role":"assistant","content":"Signature: ctf-event.get_description() -> string\nReturns `string` with the CTF event description."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain ctf-event.get_template."},{"role":"assistant","content":"Signature: ctf-event.get_template() -> string\nReturns `string` with the CTF event template."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain ctf-event.player_success."},{"role":"assistant","content":"Signature: ctf-event.player_success() -> number\nReturns `number` with the value one if the CTF event got completed successfully. Otherwise this method will return a `number` with the value zero."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain ctf-event.get_creator_name."},{"role":"assistant","content":"Signature: ctf-event.get_creator_name() -> string\nReturns `string` with the name of the CTF event creator."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain ctf-event.get_mail_content."},{"role":"assistant","content":"Signature: ctf-event.get_mail_content() -> string\nReturns `string` with the mail content of the CTF event."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the debug-library object."},{"role":"assistant","content":"A `debugLibrary` object can be acquired by using [debug_tools](#METALIB_DEBUG_TOOLS). The `classID` used for this object is `\"debugLibrary\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain debug-library.scan."},{"role":"assistant","content":"Signature: debug-library.scan() -> string\nScans the library in debug mode to identify potential code errors that may lead to vulnerabilities. If issues are detected, the relevant code snippets are printed. In case of an error, a `string` containing the error message is returned.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\ndebugLib = metaLib.debug_tools(\"test\", \"test\")\nprint(\"Debug Library result: \" + debugLib.scan)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain debug-library.apply_patch."},{"role":"assistant","content":"Signature: debug-library.apply_patch(path: string) -> string | null\nApplies a patch containing corrected code to the specified text file at the provided path. Returns a `string` with the result of the operation. If the path argument is not a `string` this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\ndebugLib = metaLib.debug_tools(\"test\", \"test\")\nprint(\"Path result: \" + debugLib.apply_patch(\"/etc/passwd\"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain debug-library.unit_testing."},{"role":"assistant","content":"Signature: debug-library.unit_testing(errorLines: [object Object]) -> string | null\nConducts automated tests on the specified lines of code. If potential vulnerabilities are detected due to errors in these lines, this method will print partial objects that could be obtained by exploiting the vulnerability, along with the affected memory zone and detailed vulnerability information. In case of failure, this function returns a `string` with an error message. If the `error lines` argument is not a `list`, the method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\ndebugLib = metaLib.debug_tools(\"test\", \"test\")\nprint(\"Unit test results: \" + debugLib.unit_testing([1, 2, 3]))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain debug-library.payload."},{"role":"assistant","content":"Signature: debug-library.payload(memZone: string, pathFile: string) -> string | {\"type\":\"list\",\"valueType\":\"map\"} | null\nReturns a `list` containing a single partial `computer` object if zero-day vulnerabilities are detected within the specified memory zone. If a file path is provided, a partial `file` object associated with this path will also be included in the `list`. Additionally, if this file is a library, its corresponding `metaLib` object is added to the returned `list`. In case of an error, a `string` with details is returned. Providing arguments that deviate from the defined signature will result in `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\ndebugLib = metaLib.debug_tools(\"test\", \"test\")\nresult = debugLib.payload(\"0x7A69F4C3\")\nif typeof(result) == \"list\" and result.len > 0 then\n   print(\"Successfully executed payload!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the file object."},{"role":"assistant","content":"A `file` object can be acquired by either using [File](#COMPUTER_FILE) or [overflow](#METALIB_OVERFLOW). The `classID` used for this object is `\"file\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.chmod."},{"role":"assistant","content":"Signature: file.chmod(perms: string, isRecursive: number) -> string\nModifies the `file` permissions. Optionally, these permissions can also be applied recursively. The format for applying permissions is as follows: `\"[references][operator][modes]\"`. The references type is defined through three possible types: user `\"u\"`, group `\"g\"`, and other `\"o\"`. The operator is used to define if permissions get added `\"+\"` or removed `\"-\"`. There are three different modes that can be modified: read `\"r\"`, write `\"w\"`, and execute `\"x\"`. So, for example, `\"o-wrx\"` would remove all possible permissions for others. To add all permissions for others again, `\"o+wrx\"` would be used. In case the modification fails, this method will return a `string` containing information about the reason. Otherwise, an empty `string` is returned. In case any type other than `number` is used for the `isRecursive` parameter, an error will be thrown preventing further script execution.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\nrootFolder = hostComputer.File(\"/bin\")\noldPermissions = rootFolder.permissions\nrootFolder.chmod(\"o-wrx\", true)\nnewPermissions = rootFolder.permissions\nprint(\"Old permissions: \" + oldPermissions)\nprint(\"New permissions: \" + newPermissions)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.copy."},{"role":"assistant","content":"Signature: file.copy(path: string, name: string) -> string | number | null\nCopies the `file` to the provided path. Files can only be copied if the user has read and write permissions or is root. The new filename has to be below 128 characters and alphanumeric. After success, this method will return a `number` with the value one. Otherwise, it will return a `string` containing information about the reason for failure. If any of the parameter types deviate from the method signature, this method is used within an SSH encryption process, the new name exceeds 128 characters, or the path is too long, an error will be thrown, causing an interruption of script execution. In case the current file gets deleted, this method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\npasswdFile = hostComputer.File(\"/etc/passwd\")\ncopyResult = passwdFile.copy(\"/etc/\", \"duplicate\")\nif typeof(copyResult) == \"string\" then\n   print(\"There was an error while copying file: \" + copyResult)\nelse\n   print(\"File got copied successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.move."},{"role":"assistant","content":"Signature: file.move(path: string, fileName: string) -> string | number | null\nMoves the `file` to the provided path. Files can only be moved if the user has read and write permissions or is root. The new filename has to be below 128 characters and alphanumeric. After success, this method will return a `number` with the value one. Otherwise, this method will return a `string` with details. If any of the parameter types deviate from the method signature, this method is used within an SSH encryption process, the new name exceeds 128 characters, or the path is too long, an error will be thrown, causing an interruption of script execution. In case the current file gets deleted, this method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\npasswdFile = hostComputer.File(\"/etc/passwd\")\nmoveResult = passwdFile.move(\"/root/\", \"newFileName\")\nif typeof(moveResult) == \"string\" then\n   print(\"There was an error while moving file: \" + moveResult)\nelse\n   print(\"File got moved successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.symlink."},{"role":"assistant","content":"Signature: file.symlink(path: string, newName: string) -> string | number | null\nCreates a symlink to the specified path. Symlinks can only be created if the user has write permissions or is root. The new filename must be alphanumeric and under 128 characters. Upon success, this method returns a `number` with the value one. On failure, it returns a `string` with details. If any parameters deviate from the method signature, if used within an SSH encryption process, if the new name exceeds 128 characters, or if the path is too long, an error will be thrown, interrupting script execution. If the current file is deleted, this method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\nlsFile = hostComputer.File(\"/bin/ls\")\nsymResult = lsFile.symlink(\"/bin\", \"alternativeLS\")\nif typeof(symResult) == \"string\" then\n   print(\"There was an error while creating symlink: \" + symResult)\nelse\n   print(\"Symlink got created successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.rename."},{"role":"assistant","content":"Signature: file.rename(name: string) -> string | number\nRename the file with the name provided. Files can only be renamed if the user has write permissions or is root. The new filename has to be below 128 characters and alphanumeric. On failure, this method will return a `string` with details. Otherwise, this method will return an empty string. If this method is used within an SSH encryption process, an error will be thrown, causing the script execution to be interrupted. In case the provided name is `null`, this method will return a `number` with the value zero.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\npasswdFile = hostComputer.File(\"/etc/passwd\")\nrenameResult = passwdFile.rename(\"renamed\")\nif typeof(renameResult) == \"string\" then\n   print(\"There was an error while renaming file: \" + renameResult)\nelse\n   print(\"File got renamed successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.path."},{"role":"assistant","content":"Signature: file.path(symlinkOrigPath: number) -> string\nReturns a `string` containing the file path. If the file is a symlink, the optional `symlinkOrigPath` argument can be set to return the original path of the linked file instead. If the file has been deleted, this method will still return the path it had prior to deletion.\nExample:\nhostComputer = get_shell.host_computer\npasswdFile = hostComputer.File(\"/etc/passwd\")\nprint(\"File location: \" + passwdFile.path)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.is_folder."},{"role":"assistant","content":"Signature: file.is_folder() -> number | null\nReturns a `number`. The value is one if the file is a folder, zero otherwise. In case the file gets deleted this method will return `null` instead.\nExample:\nhostComputer = get_shell.host_computer\netcFolder = hostComputer.File(\"/etc\")\nprint(\"Is a folder: \" + etcFolder.is_folder)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.parent."},{"role":"assistant","content":"Signature: file.parent() -> file | null\nReturns the parent folder of the current file or folder. In case there is no parent folder `null` will be returned instead. In case the file gets deleted this method will return `null` as well.\nExample:\nhostComputer = get_shell.host_computer\netcFolder = hostComputer.File(\"/etc\")\nprint(\"Parent path: \" + etcFolder.parent.path)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.name."},{"role":"assistant","content":"Signature: file.name() -> string | null\nReturns a `string` with the name of the file. In case the file gets deleted this method will return `null` instead.\nExample:\nhostComputer = get_shell.host_computer\npasswdFile = hostComputer.File(\"/etc/passwd\")\nprint(\"Filename: \" + passwdFile.name)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.allow_import."},{"role":"assistant","content":"Signature: file.allow_import() -> number\nReturns a `number`. If the file is binary and can be imported by other scripts, the value will be one; otherwise, the value will be zero. In case the file gets deleted, this method will cause a crash.\nExample:\nhostComputer = get_shell.host_computer\nlsBinary = hostComputer.File(\"/bin/ls\")\nprint(\"File can be imported: \" + lsBinary.allow_import)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.get_content."},{"role":"assistant","content":"Signature: file.get_content() -> string | null\nReturns a `string` representing the content of the file. To read a file, the user requires read access or being root. Note that you cannot read a binary file. In case of failure, `null` will be returned. If this method is used within an SSH encryption process, an error will be thrown, preventing any further script execution.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\npasswdFile = hostComputer.File(\"/etc/passwd\")\nprint(\"File content: \" + passwdFile.get_content)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.set_content."},{"role":"assistant","content":"Signature: file.set_content(content: string) -> string | number | null\nSaves text into a `file`. The content will not get appended to the `file`; therefore, existing content will be overridden. To set new content, the user requires write permissions or being root. Keep in mind that text files cannot exceed the character limit of 160,000. In case setting the content was successful, a `number` with the value one will be returned. Otherwise, a `string` with details will be returned. If this method is used within an SSH encryption process, an error will be thrown, preventing any further script execution. If the provided content is `null` or permissions are lacking, this method will return a `number` with the value zero. In case the file gets deleted this method will return `null`.\nExample:\nhostComputer = get_shell(\"root\", \"test\").host_computer\npasswdFile = hostComputer.File(\"/etc/passwd\")\nsetResult = passwdFile.set_content(\"moo\")\nif typeof(setResult) == \"string\" then\n   print(\"There was an error while setting file content: \" + setResult)\nelse if setResult == 0 then\n   print(\"Unable to set content of file!\")\nelse\n   print(\"File content got changed successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.is_binary."},{"role":"assistant","content":"Signature: file.is_binary() -> number | null\nReturns a `number`. If the file is a binary, the value will be one; otherwise, it will be zero. In case the file gets deleted, this method will return `null` instead.\nExample:\nhostComputer = get_shell.host_computer\nlsBinary = hostComputer.File(\"/bin/ls\")\nprint(\"File is a binary: \" + lsBinary.is_binary)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.is_symlink."},{"role":"assistant","content":"Signature: file.is_symlink() -> number | null\nReturns a `number`. If the file is a symlink, the value will be one; otherwise, it will be zero. In case the file gets deleted, this method will return `null` instead.\nExample:\nhostComputer = get_shell.host_computer\nlsBinary = hostComputer.File(\"/bin/ls\")\nprint(\"File is a symlink: \" + lsBinary.is_symlink)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.has_permission."},{"role":"assistant","content":"Signature: file.has_permission(perms: string) -> number | null\nReturns a `number` indicating if the user who launched the script has the requested permissions. One will indicate that the user has the correct permissions. In case permissions are lacking, the value will be zero. There are three different permission types: read `\"r\"`, write `\"w\"`, and execute `\"x\"`. In case the file gets deleted, this method will return `null` instead.\nExample:\nhostComputer = get_shell.host_computer\nlsBinary = hostComputer.File(\"/bin/ls\")\nprint(\"Is able to execute ls: \" + lsBinary.has_permission(\"x\"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.delete."},{"role":"assistant","content":"Signature: file.delete() -> string\nDelete the current file. To delete files, write permissions are required or being root. In case of failure, a `string` with details will be returned. Otherwise, an empty `string` gets returned. Please note that deleting a file will leave a log entry.\nExample:\nhostComputer = get_shell.host_computer\nlsBinary = hostComputer.File(\"/bin/ls\")\ndeletionResult = lsBinary.delete\nif typeof(deletionResult) == \"string\" and deletionResult.len > 0 then\n   print(\"There was an error while deleting a file: \" + deletionResult)\nelse\n   print(\"File got deleted successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.get_folders."},{"role":"assistant","content":"Signature: file.get_folders() -> {\"type\":\"list\",\"valueType\":\"file\"} | null\nReturns a `list` of folders. In case the current entity is a file instead of a folder this method will return `null`, so it is advisable to first use the `is_folder` function before calling this method. In case the current folder gets deleted this method will return `null` as well.\nExample:\nhostComputer = get_shell.host_computer\nbinFolder = hostComputer.File(\"/home\")\nfolders = binFolder.get_folders\nfor folder in folders\n   print(folder.path)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.get_files."},{"role":"assistant","content":"Signature: file.get_files() -> {\"type\":\"list\",\"valueType\":\"file\"} | null\nReturns a `list` of files. In case the current entity is a file instead of a folder this method will return `null`, so it is advisable to first use the `is_folder` function before calling this method. In case the current folder gets deleted this method will return `null` as well.\nExample:\nhostComputer = get_shell.host_computer\nbinFolder = hostComputer.File(\"/bin\")\nfiles = binFolder.get_files\nfor file in files\n   print(file.path)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.permissions."},{"role":"assistant","content":"Signature: file.permissions() -> string | null\nReturns a `string` with the current file permissions. In case the current file gets deleted, this method will return `null`. The format for this permissions `string` is as follows: `\"[fileType][wrx](u)[wrx](g)[wrx](o)\"`. The file type is either `\"d\"` in case it's a directory or `\"-\"`. The user type gets defined through three possible types: user `\"u\"`, group `\"g\"`, and other `\"o\"`. There are three different permission types: read `\"r\"`, write `\"w\"`, and execute `\"x\"`. An example of a `string` returned by this method would be `\"-rwxr-xr-x\"`. Taking the latter as an example, the following things become clear:\n* The provided file is not a directory.\n* The user has full access.\n* The group and others have almost all permissions besides writing.\n\nExample:\nhostComputer = get_shell.host_computer\nbinFolder = hostComputer.File(\"/bin\")\npermissions = binFolder.permissions\nfileType = permissions[0]\npermissionsForUser = permissions[1:4]\npermissionsForGroup = permissions[4:7]\npermissionsForOther = permissions[7:10]\nprint(\"File type: \" + fileType)\nprint(\"User permissions: \" + permissionsForUser)\nprint(\"Group permissions: \" + permissionsForGroup)\nprint(\"Other permissions: \" + permissionsForOther)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.owner."},{"role":"assistant","content":"Signature: file.owner() -> string | null\nReturns a `string` with the name of the file owner. User permissions get applied to whoever is the owner of a file. In case the current file gets deleted, this method will return `null`.\nExample:\nhostComputer = get_shell.host_computer\nlsBinary = hostComputer.File(\"/bin/ls\")\nprint(\"Owner of ls is: \" + lsBinary.owner)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.set_owner."},{"role":"assistant","content":"Signature: file.set_owner(owner: string, recursive: number) -> string | null\nChange the owner of this file. Optionally the owner can get applied recursively. The owner's name cannot exceed 15 characters. Additionally either write permissions or being root is required. In case of failure a `string` gets returned containing the cause. Otherwise an empty `string` gets returned. In case the current file gets deleted or the passed owner value is not a `string`, this method will return `null`. If the passed owner value is empty, the owner value is longer than 15 characters, or the passed recursive value deviates from its original type, an error will be thrown, interrupting further script execution.\nExample:\nhostComputer = get_shell.host_computer\nlsBinary = hostComputer.File(\"/bin/ls\")\nownerResult = lsBinary.set_owner(\"root\")\nif typeof(ownerResult) == \"string\" then\n   print(\"There was an error while changing owner: \" + ownerResult)\nelse\n   print(\"File owner changed successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.group."},{"role":"assistant","content":"Signature: file.group() -> string | null\nReturns a `string` with the name of the group to which this file belongs. Group permissions get applied to whoever is the owner of a file. In case the current file gets deleted, this method will return `null`.\nExample:\nhostComputer = get_shell.host_computer\nlsBinary = hostComputer.File(\"/bin/ls\")\nprint(\"File is related to following group: \" + lsBinary.group)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.set_group."},{"role":"assistant","content":"Signature: file.set_group(group: string, recursive: number) -> string | null\nChange the group related to this file. Optionally the group can get applied recursively. The group name cannot exceed 15 characters. Additionally either write permissions or being root is required. In case of failure, a `string` with details. On success, an empty `string` gets returned. In case the current file gets deleted or the passed group is not a `string`, this method will return `null`. If the passed group value is empty, the group value is longer than 15 characters, or the passed recursive value deviates from its original type, an error will be thrown, preventing further script execution.\nExample:\nhostComputer = get_shell.host_computer\nlsBinary = hostComputer.File(\"/bin/ls\")\nownerResult = lsBinary.set_group(\"root\")\nif typeof(ownerResult) == \"string\" then\n   print(\"There was an error while changing group: \" + ownerResult)\nelse\n   print(\"File group changed successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain file.size."},{"role":"assistant","content":"Signature: file.size() -> string | null\nReturns a `string` with the size of the file in bytes. There is no correlation between file size and actual file content. Instead, the file size is depending on the name of the file. In case the current file gets deleted, this method will return `null`.\nExample:\nhostComputer = get_shell.host_computer\nlsBinary = hostComputer.File(\"/bin/ls\")\nsize = lsBinary.size\nif size.to_int > 1000 then\n   print(\"File size is bigger than 1000 bytes.\")\nelse\n   print(\"File size is below 1000 bytes.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the ftp-shell object."},{"role":"assistant","content":"The FTP `shell` behaves just like the ssh `shell` and can be acquired by using [connect_service](#SHELL_CONNECT_SERVICE) and using the service type `\"ftp\"`. The `classID` used for this object is `\"ftpshell\"`. The port used for FTP is usually `21`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain ftp-shell.host_computer."},{"role":"assistant","content":"Signature: ftp-shell.host_computer() -> computer\nReturns a `computer` related to the `shell`.\nExample:\nshell = get_shell\nftpShell = shell.connect_service(\"172.8.0.5\", 21, \"test\", \"test\", \"ftp\")\nftpComputer = ftpShell.host_computer\nprint(\"FTP public ip: \" + ftpComputer.public_ip)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain ftp-shell.start_terminal."},{"role":"assistant","content":"Signature: ftp-shell.start_terminal() -> null\nLaunches an active terminal. The terminal's color will change, displaying the IP of the connected shell. Script execution will be stopped upon starting a new terminal, unless this is called from another script that was executed via `shell.launch`. In that case, you will enter the shell after closing your root-level script within that terminal window. Using this method within an SSH encryption process will cause an error to be thrown, preventing further script execution.\nExample:\nshell = get_shell\nftpShell = shell.connect_service(\"172.8.0.5\", 21, \"test\", \"test\", \"ftp\")\nftpShell.start_terminal"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain ftp-shell.put."},{"role":"assistant","content":"Signature: ftp-shell.put(sourceFile: string, destinationFolder: string, remoteShell: shell) -> number | string | null\nSend a `file` to the `computer` related to the provided `shell`. You require permission to read the `file` on the `computer` from which you are uploading and write permissions in the folder of the `computer` you are trying to upload to. In case of failure, this method will return a `string` with the cause. Otherwise, a `number` with the value one gets returned. If any of the passed arguments deviates from the types of the method signature, `null` will be returned. In case the `string` for sourceFile or destinationFolder is empty, an error will be thrown, preventing further script execution.\nExample:\nshell = get_shell\nftpShell = shell.connect_service(\"172.8.0.5\", 21, \"test\", \"test\", \"ftp\")\nputResult = ftpShell.put(\"/bin/ls\", \"/etc/\", shell)\nif typeof(putResult) == \"string\" then\n   print(\"There was an error while sending file: \" + putResult)\nelse\n   print(\"File got sent successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the function object."},{"role":"assistant","content":"Create a `function` with `\"function()\"`, including parameters with optional default values. Assign the result to a variable. Invoke by using that variable. Use `@` to reference a function without invoking."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the general object."},{"role":"assistant","content":"Use `if` blocks to do different things depending on some condition. Include zero or more `else if` blocks and one optional `else` block. Use a `while` block to loop as long as a condition is true. A `for` loop can loop over any `list`, including ones easily created with the `range` function. The `break` statement jumps out of a `while` or `for` loop. The `continue` statement jumps to the top of the loop, skipping the rest of the current iteration."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.mail_login."},{"role":"assistant","content":"Signature: general.mail_login(user: string, pass: string) -> metaMail | string | null\nReturns a `MetaMail` entity if the login was successful. On failure a `string` with details gets returned. In case any of the provided values deviate from the types defined in the signature this method will return `null`.\nExample:\nmetaMail = mail_login(\"test@test.com\", \"test\")\nif metaMail == null then\n   print(\"Loggin failed.\")\nelse\n   print(\"You've got mail.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.parent_path."},{"role":"assistant","content":"Signature: general.parent_path(directory: string) -> string\nReturns a `string` which is the parent path of the provided path. The path provided needs to be properly formatted. If the path is any other type than a `string` or is empty, this method will throw an error interrupting further script execution.\nExample:\nprint(\"Is proper parent path: \" + (parent_path(\"/my/test/path\") == \"/my/test\"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.trim."},{"role":"assistant","content":"Signature: general.trim(self: string) -> string | null\nReturns a new `string` stripped of any spacing at the beginning and ending. If any value gets passed that is not a `string` this method will return `null`.\nExample:\nmyString = \"    42   \"\nprint(trim(myString))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.hasIndex."},{"role":"assistant","content":"Signature: general.hasIndex(value: undefined, index: any) -> number | null\nVerifies if an index is available within an object. In case of success this method will return a `number` with the value one. In case of failure the value will be a zero. This method supports `map`s, `list`s and `string`s. Each passed type may result in different behavior therefore it is advisable to take a look at each of their specific signatures. In case an unsupported value gets passed this method will return `null`.\nExample:\nprint(\"List has index: \" + hasIndex([1, 2, 3], 2)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.typeof."},{"role":"assistant","content":"Signature: general.typeof(value: any) -> string\nReturns a `string` containing the type of the entity provided. There are following types by default: `\"aptclientLib\"`, `\"blockchainLib\"`, `\"ctfEvent\"`, `\"coin\"`, `\"computer\"`, `\"cryptoLib\"`, `\"debugLibrary\"`, `\"file\"`, `\"function\"`, `\"list\"`, `\"map\"`, `\"MetaLib\"`, `\"MetaMail\"`, `\"MetaxploitLib\"`, `\"NetSession\"`, `\"null\"`, `\"number\"`, `\"port\"`, `\"router\"`, `\"service\"`, `\"shell\"`, `\"ftpshell\"`, `\"SmartAppliance\"`, `\"string\"`, `\"subwallet\"`, `\"TrafficNet\"`, `\"wallet\"`. Custom types can be added as well by using the `classID` property in a `map`.\nExample:\nmyObj = { \"classID\": \"myType\" }\nif typeof(myObj) == \"myType\" then\n   print(\"Object is myType.\")\nelse\n   print(\"Object is not myType.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_router."},{"role":"assistant","content":"Signature: general.get_router(ipAddress: string) -> router | null\nReturns by default the `router` to which the executing computer is connected to. Optionally an IP address can be provided. In case of failure `null` is returned. If there is no active internet connection, this method will throw an error, interrupting further script execution.\nExample:\nrouter = get_router\nif router.local_ip == get_shell.host_computer.network_gateway then\n   print(\"Router is equal to network gateway.\")\nelse\n   print(\"Router is not equal to network gateway.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_switch."},{"role":"assistant","content":"Signature: general.get_switch(ipAddress: string) -> router | null\nReturns the switch on the local network whose IP address matches, otherwise it returns `null`.\nExample:\nrouter = get_switch(\"192.168.0.2)\nprint(\"IP address of switch: \" + router.local_ip)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.nslookup."},{"role":"assistant","content":"Signature: general.nslookup(webAddress: string) -> string\nReturns the IP address for the provided web address. In case the web address cannot be found a `string` gets returned containing the following message: `\"Not found\"`. If the provided web address is not a `string` or empty this method will throw an error preventing further script execution.\nExample:\nurl = params[0]\nprint(\"IP for website is: \" + nslookup(url))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.print."},{"role":"assistant","content":"Signature: general.print(value: any, replaceText: number) -> null\nPrint a message on the Terminal. Optionally replacing can be enabled which will replace all previous prints. This can be useful for creating a loading bar for example. There is also the possibility of styling output by using TextMeshPro rich-text tags.\nExample:\nfor i in range(9)\n   print((\"#\" * (9 - i)) + (\"-\" * i) , true)\n   wait(0.2)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.clear_screen."},{"role":"assistant","content":"Signature: general.clear_screen() -> null\nRemoves any text existing in a Terminal prior to this point. Utilizing this method in an SSH encryption process will trigger an error, halting further script execution.\nExample:\nfor i in range(9)\n   clear_screen\n   print((\"#\" * (9 - i)) + (\"-\" * i))\n   wait(0.2)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.active_user."},{"role":"assistant","content":"Signature: general.active_user() -> string\nReturns a `string` with the name of the user who is executing the current script.\nExample:\nprint(\"Current active user: \" + active_user)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.home_dir."},{"role":"assistant","content":"Signature: general.home_dir() -> string\nReturns a `string` with the home folder path of the user who is executing the current script.\nExample:\nprint(\"Home dir of current user: \" + home_dir)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_shell."},{"role":"assistant","content":"Signature: general.get_shell(user: string, pass: string) -> shell | null\nReturns the `shell` that is executing the current script. Optionally, a username and password can be provided, allowing the use of a shell with other user privileges. If the username or password does not match an existing user or if the provided values deviate from the defined signature, this method will return `null`.\nExample:\nshell = get_shell(\"root\", \"test\")\nif shell == null then\n   print(\"Couldn't obtain root shell.\")\nelse\n   print(\"Obtained root shell.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.indexes."},{"role":"assistant","content":"Signature: general.indexes(self: undefined) -> list | null\nReturns a `list` containing all indexes or keys of the passed object. This method supports `map`s, `list`s, and `string`s. The type of each item may vary when using this method on a `map` since keys could be any type. The other types will return a `list` where each item is a `number`. In case a type is passed that is not supported, this method will return `null`.\nExample:\nindexesOfStr = indexes(\"test\")\nprint(\"Following indexes are available: \" + indexesOfStr.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.values."},{"role":"assistant","content":"Signature: general.values(self: undefined) -> list\nReturns a `list` containing all values of an object. Supported types are `map`s and `string`s. In case the passed type deviates from these two, it will return the passed value itself.\nExample:\nindexesOfStr = values(\"test\")\nprint(\"Following values are available: \" + indexesOfStr.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.indexOf."},{"role":"assistant","content":"Signature: general.indexOf(self: undefined, value: any, after: any?) -> any\nLookups index of value within `map`s, `list`s, or `string`s. For `list`s and `string`s, the behavior is very similar. On success, you'll receive a `number` representing the found index. On failure, it will return `null`. For `map`s, it's a bit different since the returned value could be of any type. On failure, it will return `null` as well. If a value gets passed that is not supported, this method returns `null`.\nExample:\nindex = indexOf(\"test\", \"e\")\nprint(\"e is at: \" + index)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.len."},{"role":"assistant","content":"Signature: general.len(self: undefined) -> number | null\nReturns `number` indicating what size the passed object is. In case anything other than a `map`, `list` or `string` gets passed this method will return `null`.\nExample:\nlength = len(\"test\")\nprint(\"Length of string is: \" + length)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.shuffle."},{"role":"assistant","content":"Signature: general.shuffle(self: undefined) -> null\nRandomizes content of an object. Valid data types for this method are `list` and `map`. In case a map-like object such as a `file` or `computer` a runtime exception will be thrown.\nExample:\nlist = [0, 1, 2, 3, 4, 5]\nshuffle(list)\nprint(\"And the winner is: \" + list[0])"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.val."},{"role":"assistant","content":"Signature: general.val(self: undefined) -> number | null\nCasts a `string` to a `number`. If the provided `string` does not represent a valid `number`, the `number` zero will be returned. If any type other than `string` or `number` is passed, this method will return `null`.\nExample:\nnum = val(\"1.25\")\nprint(\"Number in string is: \" + num)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.lower."},{"role":"assistant","content":"Signature: general.lower(self: string) -> string\nReturns a `string` which is the lowercase transformed version of the provided `string`. In case anything other than a `string` gets passed this method will return the passed value again.\nExample:\nmyString = lower(\"HELLO WORLD\")\nprint(myString)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.upper."},{"role":"assistant","content":"Signature: general.upper(self: string) -> string\nReturns a `string` which is the uppercase transformed version of the provided `string`. In case anything other than a `string` gets passed this method will return the passed value again.\nExample:\nmyString = upper(\"hello world\")\nprint(myString)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.sum."},{"role":"assistant","content":"Signature: general.sum(self: undefined) -> number\nReturns a `number` representing the sum of all items within a `map` or a `list`. If any non-supported type is passed, this method will return a `number` with the value zero.\nExample:\nlist = [0, 1, 2, 3, 4, 5]\nprint(\"Sum of all items is: \" + sum(list))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.pop."},{"role":"assistant","content":"Signature: general.pop(self: undefined) -> any\nWhen passing a `list` to this method, it will return the value at the last index and remove it from the `list`. Additionally, if a `map` is passed, it will always return the value corresponding to the first matching key and mutate the `map` object accordingly. However, passing a map-like object such as `file` or `computer` will result in an error, interrupting further script execution. If the passed object is empty or is anything other than a `map` or `list`, the method will return `null`.\nExample:\nlist = [0, 1, 2, 3, 4, 5]\nprint(\"The last item is: \" + pop(list))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.pull."},{"role":"assistant","content":"Signature: general.pull(self: undefined) -> any\nWhen passing a `list` to this method, it will return the value at the first index and remove it from the `list`. Additionally, if a `map` is passed, it will always return the value corresponding to the first matching key and mutate the `map` object accordingly. However, passing a map-like object such as `file` or `computer` will result in an error, interrupting further script execution. If the passed object is empty or is anything other than a `map` or `list`, the method will return `null`.\nExample:\nlist = [0, 1, 2, 3, 4, 5]\nprint(\"The first item is: \" + pull(list))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.push."},{"role":"assistant","content":"Signature: general.push(self: undefined, value: any) -> list | map | null\nAllows pushing a value into an object, supporting `map`s and `list`s. However, it throws an error if you attempt to push a value into itself or into a map-like object such as a `file`, halting further script execution. If you try to push a value into an object that isn't a `map` or `list`, it returns `null`.\nExample:\nlist = [0, 1, 2, 3, 4, 5]\npush(list, 42)\nprint(\"The answer to everything is: \" + pop(list))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.sort."},{"role":"assistant","content":"Signature: general.sort(self: list, byKey: any, ascending: number) -> list\nSorts the values of a `list` alphanumerically. This operation mutates the original `list`. Optionally, a key can be provided, which is used if the items are `map`s or `list`s. Finally, this method returns the updated `list`. If a type other than `list` is passed, the method returns the passed value without any changes.\nExample:\nlist = [9, 3, 5, 7]\nsort(list)\nprint(\"Sorted list: \" + list.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.remove."},{"role":"assistant","content":"Signature: general.remove(self: undefined, key: any) -> number | null | string\nDepending on the data type, this function will remove a value in the provided object, potentially mutating the object. This method works with `map`s, `list`s, and `string`s. Each passed type may support different types for the `key` argument. For example, using this method on a string would treat the key as a character index. Therefore, it is advised to review the signatures of each type. Passing a key with the type `null` may cause an error to be thrown, preventing further script execution. The same will happen if the passed self value deviates from being a `map`, `list`, or `string`.\nExample:\nlist = [9, 3, 5, 7]\nremove(list, 5)\nprint(\"List after removal: \" + list.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.user_input."},{"role":"assistant","content":"Signature: general.user_input(message: string, isPassword: number, anyKey: number) -> string\nPuts script execution on hold to receive input from the user. Input can be submitted by pressing Enter. You can style the output message using TextMeshPro rich-text tags. Two optional arguments are available: `isPassword`, which defines whether input should be masked by asterisk signs, and `anyKey`, which enables capturing of keys individually. Using this method within an SSH encryption process or passing values deviating from the defined method signature will cause an error to be thrown, interrupting further script execution.\nExample:\nnum = 0\naboveIncludingZeroTag = \"<color=yellow>\"\nbelowZeroTag = \"<color=red>\"\nwhile (true)\n   clear_screen\n   output = aboveIncludingZeroTag + num\n   if (num < 0) then\n      output = belowZeroTag + num\n   end if\n   print(output)\n   key = user_input(\"Press arrow up/down to change value.\", false, true)\n   if (key == \"UpArrow\") then\n      num = num + 1\n   else if (key == \"DownArrow\") then\n       num = num - 1\n   else\n       exit(\"Bye!\")\n   end if\nend while"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.include_lib."},{"role":"assistant","content":"Signature: general.include_lib(path: string) -> crypto | metaxploit | service | blockchain | aptClient | smartAppliance | trafficNet | null\nEnables the inclusion of library binaries, which can be used inside your script. If successful, an object related to the provided library will be returned; otherwise, `null` is returned. This function is exclusively for importing library binaries. If you want to import custom scripts or binaries into your project, use `import_code` instead. Passing anything other than a `string` for the path, or leaving the path empty, will cause an error to be thrown, interrupting further script execution.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\nif crypto == null then\n   print(\"Crypto library couldn't get imported.\")\nelse\n   print(\"Crypto library got imported.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.import_code."},{"role":"assistant","content":"Signature: general.import_code(path: string) -> null\nEnables to import code from different sources into one file. This is useful in case you want to split code into different files and also to avoid any limitation in regards to text file character limits. Note that `import_code` requires an absolute path and is called while compiling the file into a binary instead of during runtime. Additionally `import_code` cannot be nested. Code can be either imported from plain text files or binaries that have `\"allow import\"` enabled. `import_code` is also parsed wherever it is found, not even a `//` comment will prevent it being evaluated.\nExample:\n//Content of main.src\nimport_code(\"/home/user/my_module.src\")\nprint(\"bye\")\n//Content of my_module.src\nprint(\"hello!\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.exit."},{"role":"assistant","content":"Signature: general.exit(message: string) -> null\nStops execution of the currently running script. Optionally a message can be provided which will be shown in the Terminal. There is also the possibility of styling output by using TextMeshPro rich-text tags.\nExample:\nwhile (true)\n   shouldExit = lower(user_input(\"Want to exit? (Y/N)\"))\n   if (shouldExit == \"y\") then\n      exit(\"See you!\")\n   end if\nend while"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.user_mail_address."},{"role":"assistant","content":"Signature: general.user_mail_address() -> string | null\nReturns a `string` containing the email address of the player who is executing the script. If the user does not have an email address this method will return `null`.\nExample:\nprint(\"My EMail address is: \" + user_mail_address)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.user_bank_number."},{"role":"assistant","content":"Signature: general.user_bank_number() -> string | null\nReturns a `string` containing the bank account number of the player who is executing the script. If the user does not have a bank this method will return `null`.\nExample:\nprint(\"My Bank number is: \" + user_bank_number)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.whois."},{"role":"assistant","content":"Signature: general.whois(ip: string) -> string\nReturns a `string` containing the administrator information behind an IP address provided. In case of failure the returned `string` will contain an error message instead. If the provided ip is not a `string` or is empty this method will throw an error causing the script to stop.\nExample:\nadminInfo = whos(\"1.1.1.1\")\ninfoLines = adminInfo.split(char(10))\ninfoObject = {}\ninfoObject.domainName = infoLines[0].split(\":\")[1].trim\ninfoObject.administrativeContact = infoLines[1].split(\":\")[1].trim\ninfoObject.emailAddress = infoLines[2].split(\":\")[1].trim\ninfoObject.phone = infoLines[3].split(\":\")[1].trim\nprint(\"Phone number: \" + infoObject.phone)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.wait."},{"role":"assistant","content":"Signature: general.wait(delay: number) -> null\nPauses the script execution. Optionally, the duration can be provided via the `time` argument. By default, the duration will be 1 second. The duration cannot be below 0.01 or above 300; otherwise, this method will throw a runtime exception.\nExample:\nstart = time\nwait(5)\nelapsed = time - start\nprint(\"Waited: \" + elapsed)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.command_info."},{"role":"assistant","content":"Signature: general.command_info(commandName: string) -> string\nReturns a `string` value of a translation. Translations include commands, documentation and other game-related things. Checkout [Grey-Texts](https://github.com/LoadingHome/Grey-Texts/blob/main/EnglishLang.json) for an overview of all available keys. If the provided command name is not a `string` or is empty this method will throw an error causing the script to stop.\nExample:\nprint(command_info(\"LS_USAGE\"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.program_path."},{"role":"assistant","content":"Signature: general.program_path() -> string\nReturns a `string` containing the path of the script that is currently executing. It will update when using `launch`, which makes it different from `launch_path`.\nExample:\npath = program_path\nprint(\"Script gets executed within: \" + parent_path(path))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.current_path."},{"role":"assistant","content":"Signature: general.current_path() -> string\nReturns a `string` containing the path in which script that is currently executed from.\nExample:\npath = current_path\nprint(\"PWD: \" + path)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.format_columns."},{"role":"assistant","content":"Signature: general.format_columns(columns: string) -> string\nReturns a `string` which is the formatted version of the provided text. Keep in mind that TextMeshPro rich-text tags might screw up the output. When using tags consider applying these after formatting. Passing anything other than a `string` will result in an empty `string`.\nExample:\ntext = \"FIRST SECOND THIRD\n1 2 3\"\nprint(format_columns(text))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.current_date."},{"role":"assistant","content":"Signature: general.current_date() -> string\nReturns a `string` containing the current date and time. Ingame time passes 15 times as fast as real-time - 4 seconds per in-game minute. The initial time after every wipe will be the 1st of January 2000 at 6:00 AM. Additionally, the game time will not proceed while the server is offline.\n* Output schema: `\"[day]/[month]/[year] - [hours]:[minutes]\"`\n* Example output: `\"27/Jan/2000 - 08:19\"`\n\nExample:\ndateStr = current_date\ndateSegments = dateStr.split(\" - \")\ndate = dateSegments[0].split(\"/\")\nday = date[0]\nmonth = date[1]\nyear = date[2]\ndateTime = dateSegments[1].split(\":\")\nhours = dateTime[0]\nminutes = dateTime[1]\nprint(\"Current day: \" + day)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_lan_ip."},{"role":"assistant","content":"Signature: general.is_lan_ip(ip: string) -> number\nReturns a `number`. One indicates that the provided IP address is a valid LAN IP address. Otherwise, zero will be returned.\nExample:\nprint(\"Is Lan IP: \" + is_lan_ip(\"192.168.0.1\"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_valid_ip."},{"role":"assistant","content":"Signature: general.is_valid_ip(ip: string) -> number\nReturns a `number`. If the provided IP address is valid, its value will be one. Otherwise, its value is zero.\nExample:\nprint(\"Is valid IP: \" + is_valid_ip(\"1.1.1.1\"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.bitwise."},{"role":"assistant","content":"Signature: general.bitwise(operator: string, left: number, right: number) -> number | null\nReturns a `number` by performing bitwise operations. Supported operators are: `\"~\"`, `\"&\"`, `\"|\"`, `\"^\"`, `\"<<\"`, `\">>\"`, `\">>>\"`. In case you want to use the tilde operator you only need to provide the operator and the left argument. If any of the required arguments is `null` this method will return `null`. Warning: If either operand is >= `0x80000000`, it'll always returns 0.\nExample:\nnum = params[0].to_int\nisOdd = bitwise(\"&\", num, 1) == 1\nif isOdd then\n   print(\"Number is odd.\")\nelse\n   print(\"Number is even.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.abs."},{"role":"assistant","content":"Signature: general.abs(value: number) -> number\nReturns the absolute value of `number`.\nExample:\na = 1\nb = 5\ndifference = abs(a - b)\nprint(\"Difference between a and b is: \" + difference)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.acos."},{"role":"assistant","content":"Signature: general.acos(value: number) -> number\nReturns the inverse cosine (in radians) of a `number`.\nExample:\nadjacent = 8\nhypotenuse = 10\ncalcAngle = acos(adjacent / hypotenuse)\nprint(\"Angle: \" + calcAngle)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.asin."},{"role":"assistant","content":"Signature: general.asin(value: number) -> number\nReturns the inverse sine (in radians) of a `number`.\nExample:\nopposite = 6\nhypotenuse = 10\ncalcAngle = acos(opposite / hypotenuse)\nprint(\"Angle: \" + calcAngle)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.atan."},{"role":"assistant","content":"Signature: general.atan(y: number, x: number) -> number\nReturns the inverse tangent (in radians) of a `number`.\nExample:\nopposite = 8\nhypotenuse = 10\ncalcAngle = atan(opposite / hypotenuse)\nprint(\"Angle: \" + calcAngle)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.tan."},{"role":"assistant","content":"Signature: general.tan(value: number) -> number\nReturns the tangent of a `number` in radians.\nExample:\ndegrees = 90\ntanFromDegrees = tan(degress * pi / 180)\nprint(\"Tan from degrees: \" + tanFromDegrees)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.cos."},{"role":"assistant","content":"Signature: general.cos(value: number) -> number\nReturns the cosine of a `number` in radians.\nExample:\nradians = 1\nradius = 10\ncircleX = cos(radians) * radius\nprint(circleX)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.code."},{"role":"assistant","content":"Signature: general.code(value: string) -> number\nReturns the Unicode `number` of the first character of the string. In case an empty `string` is provided the script execution will crash.\nExample:\nkey = user_input(\"Press a key!\", false, true)\nisA = key.code == 97\nif isA then\n   print(\"You pressed A.\")\nelse\n   print(\"You did not press A.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.char."},{"role":"assistant","content":"Signature: general.char(value: number) -> string\nReturns the UTF-16 character `string` related to the provided unicode `number`. The provided `number` needs to be between 0 and 65535. Any `number` which is outside this range will cause the script to throw a runtime error. Beware when passing non-ASCII values to intrinsics as they will likely get re-encoded as UTF-8. For example, `md5(char(255))` will actually return the hash of the two-byte sequence `0xC3` `0xBF`.\nExample:\nkey = user_input(\"Press a key!\", false, true)\nisA = key == char(97)\nif isA then\n   print(\"You pressed A.\")\nelse\n   print(\"You did not press A.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.sin."},{"role":"assistant","content":"Signature: general.sin(value: number) -> number\nReturns the sine of a `number` in radians.\nExample:\nradians = 1\nradius = 10\ncircleY = sin(radians) * radius\nprint(circleY)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.floor."},{"role":"assistant","content":"Signature: general.floor(value: number) -> number\nReturns `number` rounded down to the integer value of the provided `number`.\nExample:\nprice = 25.43467\nfloored = floor(price * 100) / 100\nprint(\"Floored price: \" + floored)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.range."},{"role":"assistant","content":"Signature: general.range(start: number, end: number, inc: number?) -> {\"type\":\"list\",\"valueType\":\"number\"}\nGenerates a `list` where each item is a `number`. By default, if only one argument is provided, the list starts at the given value and decrements by one for each item. You can optionally define a start and end value, as well as customize the incremental value. However, if the incremental value is zero, or if the list exceeds `16777215L` items, or if start/end is `null`, the function will throw a runtime error.\nExample:\nprint(\"Countdown:\")\nfor num in range(10)\n   print(num)\nend for\nprint(\"Done!\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.round."},{"role":"assistant","content":"Signature: general.round(value: number, fixed: number) -> number\nReturns `number` rounded to the integer value of the provided `number`.\nExample:\nprice = 25.43467\nrounded = round(price * 100) / 100\nprint(\"Price: \" + rounded)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.rnd."},{"role":"assistant","content":"Signature: general.rnd(seed: number?) -> number\nReturns a random `number` between 0 and 1. Optionally a seed `number` can be provided.\nExample:\nmin = 10\nmax = 20\noutput = floor(rnd * (max - min + 1) + min)\ninput = user_input(\"Guess a number between 10 and 20!\").to_int\nif (input == output) then\n   print(\"You guessed right!\")\nelse\n   print(\"You failed! The number was \" + output)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.sign."},{"role":"assistant","content":"Signature: general.sign(value: number) -> number\nReturns a one or minus one, indicating the sign of the number passed as argument. If the input is zero, it will be returned as-is.\nExample:\nprint(sign(40))\nprint(sign(-40))\nprint(sign(0))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.sqrt."},{"role":"assistant","content":"Signature: general.sqrt(value: number) -> number\nReturns the square root of a `number`.\nExample:\na = 3\nb = 4\ncalcHypotenuse = sqrt((a * a) + (b * b))\nprint(\"Hypotenuse: \" + calcHypotenuse)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.str."},{"role":"assistant","content":"Signature: general.str(value: any) -> string\nReturns the `string` value of provided data. Can be used to turn a `number` into a `string` or to get the signature of a `function`.\nExample:\nsignature = str(@user_input)\nargSegment = signature[9:signature.len - 1]\nargs = argSegment.split(\",\")\nprint(\"Function has \" + args.len + \" arguments.\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.ceil."},{"role":"assistant","content":"Signature: general.ceil(value: number) -> number\nReturns `number` rounded up to the integer value of the provided `number`.\nExample:\nprice = 25.43467\nupperPrice = ceil(price * 100) / 100\nprint(\"Upper price: \" + upperPrice)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.pi."},{"role":"assistant","content":"Signature: general.pi() -> number\nReturns the `number` PI to the precision of six.\nExample:\nradius = 10\ncircumference = 2 * pi * radius\nprint(\"Circumference: \" + circumference)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.launch_path."},{"role":"assistant","content":"Signature: general.launch_path() -> string\nReturns a `string` containing the path of the script that was initially executed, meaning that even when using `launch`, it will still return the path of the initially executed script.\nExample:\npath = launch_path\nprint(\"Script gets executed within: \" + parent_path(path))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.slice."},{"role":"assistant","content":"Signature: general.slice(value: undefined, startIndex: number, endIndex: number?) -> list | string | null\nReturns a sliced version of the passed object. Valid data types for slicing are `string` and `list`. The returned object will contain all elements related to the provided start and end index. If no start or end index is provided this method will essentially return a shallow copy of the passed object. If an invalid data type is passed, `null` is returned.\nExample:\nmyString = \"not your text\"\nprint(\"my \" + slice(myString, 9))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.md5."},{"role":"assistant","content":"Signature: general.md5(value: string) -> string\nReturns the MD5 hash `string` of the provided `string`. Using this method within an SSH encryption process or passing anything other than a `string` will cause an error to be thrown, stopping any further script execution.\nExample:\npasswordHash = md5(\"test\")\nprint(\"Hash for the password 'test' is \" + passwordHash)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.hash."},{"role":"assistant","content":"Signature: general.hash(value: any) -> number\nReturns numeric hash for the provided data. Using this method within a SSH encryption process will cause an error to be thrown causing the script execution to stop.\nExample:\nhashA = hash({ \"a\": 2, \"b\": 1 })\nhashB = hash({ \"b\": 1, \"a\": 2 })\nif (hashA == hashB) then\n   print(\"Objects are alike!\")\nelse\n   print(\"Objects are different!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.time."},{"role":"assistant","content":"Signature: general.time() -> number\nReturns a `number` of seconds representing the elapsed time since the script started.\nExample:\nstart = time\nfor i in range(10000)\n   var = i * 100\nend for\nendTime = time - start\nprint(\"Script execution done within: \" + endTime)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.bitAnd."},{"role":"assistant","content":"Signature: general.bitAnd(a: number, b: number) -> number\nPerforms a bitwise AND for the provided values. Returns a `number`. Warning: If either operand is >= `0x80000000`, it'll always return 0.\nExample:\nprint(\"Result of bitwise AND: \" + bitAnd(1, 2))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.bitOr."},{"role":"assistant","content":"Signature: general.bitOr(a: number, b: number) -> number\nPerforms a bitwise OR for the provided values. Returns a `number`. Warning: If either operand is >= `0x80000000`, it'll always return 0.\nExample:\nprint(\"Result of bitwise OR: \" + bitOr(1, 2))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.bitXor."},{"role":"assistant","content":"Signature: general.bitXor(a: number, b: number) -> number\nPerforms a bitwise XOR for the provided values. Returns a `number`. Warning: If either operand is >= `0x80000000`, it'll always return 0.\nExample:\nprint(\"Result of bitwise XOR: \" + bitXor(1, 2))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.log."},{"role":"assistant","content":"Signature: general.log(value: number, base: number) -> number\nReturns the natural logarithm of a `number`. By default, the base is 10. Optionally the base can be changed.\nExample:\na = 2\nb = 8\nbaseLog = log(a) / log(b)\nprint(\"Base log is: \" + baseLog)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.yield."},{"role":"assistant","content":"Signature: general.yield() -> null\nWaits for the next tick.\nExample:\nwhile (true)\n   yield\n   print(\"tick\")\nend while"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_custom_object."},{"role":"assistant","content":"Signature: general.get_custom_object() -> map\nReturns `map` which is shared throughout script execution. Can be helpful if it desired to pass or receive values when using `launch`. Using this method in a SSH encryption process will cause an error to be thrown preventing further script execution.\nExample:\nget_custom_object.shouldEndScript = false\nwhile (get_custom_object.shouldEndScript)\n   print(\"Waiting...\")\n   wait(2)\nend while"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.insert."},{"role":"assistant","content":"Signature: general.insert(object: undefined, index: number, value: any) -> list | string\nInserts a value into either a `list` or a `string`. If the method is used on any other data type or the passed index is not a `number`, this method throws an error, preventing further script execution.\nExample:\nlist = [2, 3, 4]\ninsert(list, 2, 42)\nprint(\"List with inserted item: \" + list.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.to_int."},{"role":"assistant","content":"Signature: general.to_int(self: string) -> string | number | null\nReturns a `number` which is parsed from the `string` as an integer. In case the `string` is not numeric it will return the original `string`. If the passed value is not a `string` this method will return `null`.\nExample:\nmyString = \"1\"\nprint(to_int(myString) + 41)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.join."},{"role":"assistant","content":"Signature: general.join(value: list, delimiter: string) -> string\nReturns a concatenated `string` containing all stringified values inside the `list`. These values will be separated via the provided separator. Passing anything other than a `list` will result in the original value being returned. In case the passed `list` exceeds `16777215L` items or the delimiter exceeds 128 characters, this method will throw an error, interrupting further script execution.\nExample:\nmyList = [42, 1, 3]\nprint(join(myList, \" .-*'*-. \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.split."},{"role":"assistant","content":"Signature: general.split(self: string, pattern: string, regexOptions: string) -> {\"type\":\"list\",\"valueType\":\"string\"} | null\nReturns a `list` where each item is a segment of the `string`, separated by the provided separator `string`. This method uses regular expressions for matching, so remember to escape special characters such as dots. If any of the provided arguments deviate from the method signature types, this method will return `null`. In case the pattern is empty, the provided [regexOptions](https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options) are invalid, or the regular expression times out, an error will be thrown, preventing further script execution.\nExample:\nmyString = \"42 as an answer is wrong\"\nsegments = split(myString, \" \")\nif segments[0] != \"42\" then\n   print(\"Invalid information spotted!\")\nelse\n   print(\"Information seems valid!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.reverse."},{"role":"assistant","content":"Signature: general.reverse(value: list) -> null\nReverses the order of all values in the `list`. This operation will mutate the `list`.\nExample:\nmyList = [42, 1, 3]\nreverse(myList)\nprint(\"Reversed list: \" + myList.split(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.replace."},{"role":"assistant","content":"Signature: general.replace(value: undefined, oldVal: any, newVal: any, maxCount: number?) -> any\nThis function replaces a value within an object and returns the mutated object. Currently, it only supports `map`s and `list`s. Previously, it also supported `string`s, but that functionality has been replaced by `replace_regex`. If you use anything other than the supported types, a runtime error will be thrown.\nExample:\nlist = [1,2,3,42]\nnewList = replace(list, 42, 4)\nprint(newList)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.replace_regex."},{"role":"assistant","content":"Signature: general.replace_regex(self: string, pattern: string, newValue: string, regexOptions: string) -> string\nReturns a `string` with the replaced content by using regular expressions. If any provided arguments deviate from the method signature types, if the pattern is empty, if the provided [regexOptions](https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options) are invalid or if the regular expression times out, an error will be thrown, preventing further script execution.\nExample:\nmyString = \"42 as an answer is wrong\"\nnewString = replace_regex(myString, \"\\w+$\", \"right\")\nprint(newString)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_match."},{"role":"assistant","content":"Signature: general.is_match(value: string, pattern: string, regexOptions: string) -> number\nUses regular expression to check if a string matches a certain pattern. If it matches, it will return a `number` with the value one. If it does not match, the value of the `number` will be zero. If any provided arguments deviate from the method signature types, if the pattern is empty, if the provided [regexOptions](https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options) are invalid, or if the regular expression times out, an error will be thrown, preventing further script execution.\nExample:\nmyString = \"42 as an answer is wrong\"\nhasWordAtTheEnd = is_match(myString, \"\\w+$\")\nprint(hasWordAtTheEnd)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.lastIndexOf."},{"role":"assistant","content":"Signature: general.lastIndexOf(self: string, searchStr: string) -> number | null\nReturns a `number` indicating the last matching index of the provided value inside the `string`. If the value does not exist inside the `string`, `-1` is returned. If any of the provided values deviates from the defined types in the method signature, this method will return `null`.\nExample:\nmyString = \"42 as an answer is wrong\"\nindex = lastIndexOf(myString, \"wrong\")\nif index != -1 then\n   print(\"Invalid information spotted at: \" + index)\nelse\n   print(\"Information seems valid.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.matches."},{"role":"assistant","content":"Signature: general.matches(value: string, pattern: string, regexOptions: string) -> {\"type\":\"map\",\"keyType\":\"number\",\"valueType\":\"string\"}\nReturns a `map` with all search results for the provided regular expression. Each key contains the index and the value contains the matching `string`. If any provided arguments deviate from the method signature types, if the pattern is empty, if the provided [regexOptions](https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options) are invalid, or if the regular expression times out, an error will be thrown, preventing further script execution.\nExample:\nmyString = \"42 as an answer is wrong\"\nresult = matches(myString, \"w\")\nprint(result)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_ctf."},{"role":"assistant","content":"Signature: general.get_ctf(user: string, password: string, eventName: string) -> ctfEvent | string\nReturns `ctfEvent` object if there is one available. In case of failure this method will return a `string` with details."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.show."},{"role":"assistant","content":"Signature: general.show(self: aptClient, repository: string) -> string | null\nDisplays all the packages available in a repository. The repository must be listed in the `\"/etc/apt/sources.txt\"` file. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. If it cannot find a repository, it will return a string with an error message. On success, it will return a `string` containing all packages and their descriptions, with each entry separated by a newline.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\npackages = show(aptClient, \"177.202.15.132\")\npackageList = split(packages, char(10) + char(10))\npop(packageList) // remove last empty item\nfor packageItem in packageList\n    entry = split(packageItem, char(10))\n    packageName = entry[0]\n    packageDescription = entry[1]\n    print \"Title: <b>\" + packageName + \"</b>\"\n    print \"Description: <i>\" + packageDescription + \"</i>\"\n    print \"----------------------------\"\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.search."},{"role":"assistant","content":"Signature: general.search(self: aptClient, search: string) -> string | null\nThe `search` method specifically looks for a package in any of the repositories listed in `\"/etc/apt/sources.txt\"`. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. On success, it will return a `string` containing all packages that partially match the provided search value. On failure, it will return a `string` with various error messages.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\npackages = search(aptClient, \".so\")\npackageList = split(packages, char(10) + char(10))\nfor packageItem in packageList\n    entry = split(packageItem, char(10))\n    if len(entry) != 2 then\n        print \"something wrong in: \" + entry\n        continue\n    end if\n    packageName = entry[0]\n    packageDescription = entry[1]\n    print \"Title: <b>\" + packageName + \"</b>\"\n    print \"Description: <i>\" + packageDescription + \"</i>\"\n    print \"----------------------------\"\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.update."},{"role":"assistant","content":"Signature: general.update(self: aptClient) -> string | number\nRefreshes the list of available packages after adding a new repository in `\"/etc/apt/sources.txt\"`, or if the remote repository has updated its information in `\"/server/conf/repod.conf\"`. If either the `\"/etc/apt/sources.txt\"` file has an invalid format or an invalid `aptClient` object is passed, this method will return a `number` with the value zero. On a successful update, an empty `string` will be returned. In case of failure, a `string` with an error message will be returned.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\nresult = update(aptClient)\nif result == \"\" then\n    print \"Update successful!\"\nelse\n    print \"Error while updating: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.add_repo."},{"role":"assistant","content":"Signature: general.add_repo(self: aptClient, repository: string, port: number) -> string | null\nAdds a repository address to the `\"/etc/apt/sources.txt\"` file. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. On success, it will return an empty `string`. In case of failure, it will return a `string` with an error message.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\nresult = add_repo(aptClient, \"177.202.15.132\")\nif result == \"\" then\n    print \"Addition successful!\"\nelse\n    print \"Error while adding: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.del_repo."},{"role":"assistant","content":"Signature: general.del_repo(self: aptClient, repository: string) -> string | null\nRemoves a repository address from the `\"/etc/apt/sources.txt\"` file. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. On success, it will return an empty `string`. In case of failure, it will return a `string` with an error message.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\nresult = del_repo(aptClient, \"177.202.15.132\")\nif result == \"\" then\n    print \"Deletion successful!\"\nelse\n    print \"Error while deleting: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.install."},{"role":"assistant","content":"Signature: general.install(self: aptClient, package: string, customPath: string) -> string | number | null\nInstalls a program or library from a remote repository listed in `\"/etc/apt/sources.txt\"`. If no path is specified, the program installs in `\"/lib\"` if it is a library or in `\"/bin\"` otherwise. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. On success, it will return a `number` with the value one. In case of failure, it will return a `string` containing an error message.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\nresult = install(aptClient, \"rshell_interface\")\nif result == 1 then\n    print \"Installed program successful!\"\nelse\n    print \"Error while installing: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.check_upgrade."},{"role":"assistant","content":"Signature: general.check_upgrade(self: aptClient, filePath: string) -> string | number | null\nVerifies if there is a newer version of the program or library in the repository. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. On success, it will return a `number`, which can be either zero or one. Zero indicates that there is no new version available, while one indicates that there is a new version. In case of failure, it will return a string containing an error message.\nExample:\naptClient = include_lib(\"/lib/aptclient.so\")\nresult = check_upgrade(aptClient, \"/bin/rshell_interface\")\nif result == 0 then\n    print \"Program doesnt need an update!\"\nelse if result == 1 then\n    print \"Program does need an update!\"\nelse\n    print \"Error while checking version: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.coin_price."},{"role":"assistant","content":"Signature: general.coin_price(self: blockchain) -> null | string | number\nReturns a `number` representing the current unit value of the cryptocurrency. In case of an error, it will return a `string` with the error details. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nprice = coin_price(blockchain, \"test8\")\nif typeof(price) == \"string\" then\n    exit \"Couldnt get coin price due to: \" + price\nend if\nprint \"Your coin price is \" + price"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.show_history."},{"role":"assistant","content":"Signature: general.show_history(self: blockchain, coinName: string) -> {\"type\":\"map\",\"keyType\":\"number\",\"valueType\":\"list\"} | string | null\nReturns a `map` with the latest changes in the value of a specific cryptocurrency. The key of the `map` is an index represented by a `number`. The value is a `list`, where index 0 is the historical price of the coin and index 1 is the date when the price change occurred. If any of the provided parameters have a type that deviates from the defined signature, or if no coin exists with this name, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nhistory = show_history(blockchain, \"test\")\nif typeof(history) == \"string\" then\n    exit \"Couldnt fetch history due to: \" + history\nend if\nfor entry in values(history)\n    price = entry[0]\n    date = entry[1]\n    print \"The price on \" + date + \" was \" + price\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.amount_mined."},{"role":"assistant","content":"Signature: general.amount_mined(self: blockchain, coinName: string) -> string | number | null\nReturns a `number` representing the total amount of mined coins. In case of an error, it will return a string with details. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nmined = amount_mined(blockchain, \"test\")\nif typeof(mined) == \"string\" then\n    exit \"Couldnt get amount mined due to: \" + mined\nend if\nprint \"Your mined amount is \" + mined"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_coin."},{"role":"assistant","content":"Signature: general.get_coin(self: blockchain, coinName: string, user: string, password: string) -> string | coin | null\nReturns a `coin` object used to manage the currency. In case of an error, it will return a `string` with the details. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nif typeof(coin) != \"coin\" then\n    exit \"Couldnt get coin object due to: \" + coin\nend if\nprint \"Your coin address is \" + get_address(coin)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_coin_name."},{"role":"assistant","content":"Signature: general.get_coin_name(self: blockchain, user: string, password: string) -> string | null\nReturns a `string` with the name of the coin owned by the player. In case of an error, it will return a `string` with the details. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoinName = get_coin_name(blockchain, \"test\", \"test\")\nif not matches(coinName, \"^[A-Z]+$\") then\n    exit \"Couldnt get coin name due to: \" + coinName\nend if\nprint \"The name of the coin you're owning is \" + coinName"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.login_wallet."},{"role":"assistant","content":"Signature: general.login_wallet(self: blockchain, user: string, password: string) -> string | wallet | null\nReturns a `wallet` object on success. In case of an error, it will return a `string` indicating the reason. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nif typeof(wallet) == \"string\" then\n  print \"Login failed due to: \" + wallet\nelse\n  print \"Login was successful!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.create_wallet."},{"role":"assistant","content":"Signature: general.create_wallet(self: blockchain, user: string, password: string) -> string | wallet | null\nCreates a `wallet` and returns a `wallet` object on success, which can be used to manage cryptocurrencies. In case of an error, it will return a `string` with the details. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = create_wallet(blockchain, \"test\", \"test\")\nif typeof(wallet) == \"string\" then\n  print \"Wallet creation failed due to: \" + wallet\nelse\n  print \"Wallet creation was successful!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.delete_coin."},{"role":"assistant","content":"Signature: general.delete_coin(self: blockchain, coinName: string, user: string, password: string) -> number | string | null\nRemoves a cryptocurrency from the world. It is required to provide the credentials used in the creation of the cryptocurrency. On success, it will return a `number` with the value one. On failure, it will return a `string` containing details. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nresult = delete_coin(blockchain, \"test\", \"test\", \"test\")\nif typeof(result) == \"string\" then\n    exit \"Couldnt delete coin due to: \" + result\nend if\nprint \"Coin got deleted\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.set_cycle_mining."},{"role":"assistant","content":"Signature: general.set_cycle_mining(self: coin, rateHours: number) -> string | number | null\nDefines the interval (in-game hours) in which each user receives a coin reward when mining. The interval cannot be lower than 1 and not be higher than 2160. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. On success, it will return a `number` with the value one. In case of failure, the method will return a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = set_cycle_mining(coin, 20)\nif result == 1 then\n    print \"Successful updated mining interval\"\nelse\n    print \"Failed updating mining interval\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_cycle_mining."},{"role":"assistant","content":"Signature: general.get_cycle_mining(self: coin) -> string | number | null\nReturns a `number` representing the defined interval in which each user receives a coin reward when mining. In case of failure, the method will return a `string` with details. If an invalid coin object is provided, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = get_cycle_mining(coin)\nif typeof(result) == \"string\" then\n    exit \"Failed getting cyclic mining value due to: \" + result\nend if\nprint \"cyclic mining value: \" + result"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_reward."},{"role":"assistant","content":"Signature: general.get_reward(self: coin) -> string | number | null\nReturns a `number` representing the amount of coins that will be received as a reward after each mining cycle. In case of failure, the method will return a `string` with details. If an invalid coin object is provided, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = get_reward(coin)\nif typeof(result) == \"string\" then\n    exit \"Failed getting reward value due to: \" + result\nend if\nprint \"reward value: \" + result"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.set_reward."},{"role":"assistant","content":"Signature: general.set_reward(self: coin, coinAmount: number) -> number | string | null\nAssigns the reward that miners will receive after each mining cycle. The reward value has to be above one. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. On success, the method will return a `number` with the value one. In case of failure, the method will return a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = set_reward(coin, -1)\nif typeof(result) == \"string\" then\n    exit \"Failed setting reward due to: \" + result\nend if\nprint \"Successfully set reward!\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.transaction."},{"role":"assistant","content":"Signature: general.transaction(self: coin, subWalletOrig: string, subWalletDest: string, valAmount: number) -> string | number | null\nMakes a transaction of the currency between the indicated subwallets. In case of an error, a `string` with the details is returned. In case of success, a `number` with a value of one will be returned. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = transaction(coin, \"test\", \"test2\", 20)\nif typeof(result) == \"string\" then\n    exit \"Failed transaction due to: \" + result\nend if\nprint \"Successfully transfered!\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.create_subwallet."},{"role":"assistant","content":"Signature: general.create_subwallet(self: coin, walletID: string, pin: string, subWalletUser: string, subWalletPass: string) -> string | number | null\nRegisters a new account in the `coin` that can be used to manage services such as stores. It is necessary to provide the PIN of the owner's `wallet` that wants to register. In case of success, the method will return a `number` with the value one. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`. In case of an error, a `string` with the details is returned.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nresult = create_subwallet(coin, \"test\", wallet.get_pin, \"test\", \"test\")\nif typeof(result) == \"string\" then\n    exit \"Failed to create subwallet due to: \" + result\nend if\nprint \"Successfully created subwallet!\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_subwallet."},{"role":"assistant","content":"Signature: general.get_subwallet(self: coin, subWalletUser: string) -> string | subWallet | null\nReturns a `subWallet` object on success. In case of error, it returns a `string` with the details. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = get_subwallet(coin, \"test\")\nif typeof(result) == \"string\" then\n    exit \"Failed to get subwallet due to: \" + result\nend if\nprint \"Successfully received subwallet!\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_subwallets."},{"role":"assistant","content":"Signature: general.get_subwallets(self: coin) -> string | {\"type\":\"list\",\"valueType\":\"subWallet\"} | null\nReturns a `list` where each item is a `subWallet` object, including all the accounts registered in the cryptocurrency. In case of error, it returns a `string` with the details. If an invalid coin object is provided, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = get_subwallets(coin)\nif typeof(result) == \"string\" then\n    exit \"Failed to get subwallets due to: \" + result\nend if\nfor subwallet in result\n    print get_user(subwallet) + \" has \" + get_balance_subwallet(subwallet) + \" coins\"\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.set_address."},{"role":"assistant","content":"Signature: general.set_address(self: coin, address: string) -> number | string | null\nConfigures a valid address that will be shown to users who do not have the currency, indicating where to register. In case of an error, a `string` with the details is returned. In case of success, a `number` with a value of one will be returned. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = set_address(coin, \"12.12.12.12\")\nif typeof(result) == \"string\" then\n    exit \"Failed to set address due to: \" + result\nend if\nprint \"Successfully set address!\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_address."},{"role":"assistant","content":"Signature: general.get_address(self: coin) -> string | null\nReturns the configured address that will be shown to users who do not have the currency, indicating where they have to register. In case of an error, the method will return a `string` with details. If an invalid coin object is provided, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = get_address(coin)\nif not is_valid_ip(result) then\n    exit \"Failed to get address due to: \" + result\nend if\nprint \"address: \" + result"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_mined_coins."},{"role":"assistant","content":"Signature: general.get_mined_coins(self: coin) -> string | number | null\nReturns a `number` representing the amount of coins that have been mined so far. In case of an error, the method will return a `string` with details. If an invalid coin object is provided, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = get_mined_coins(coin)\nif typeof(result) == \"string\" then\n    exit \"Failed to get mined coins due to: \" + result\nend if\nprint \"mined coins: \" + result"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.reset_password_coin."},{"role":"assistant","content":"Signature: general.reset_password_coin(self: coin, newPassword: string) -> number | string | null\nResets the password of the coin. It returns a `number` with the value one if resetting was successful; otherwise, it will return a `string`. If an invalid coin object is provided, the method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nresult = reset_password(coin, \"test\")\nif typeof(result) == \"string\" then\n    exit \"Failed to reset password due to: \" + result\nend if\nprint \"Successfully reset password\""}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_ports."},{"role":"assistant","content":"Signature: general.get_ports(self: computer) -> {\"type\":\"list\",\"valueType\":\"port\"} | null\nReturns a `list` of `port`s on the `computer` which are active. If an invalid `computer` object is passed, this method will return `null`.\nExample:\nrouter = get_router\nports = get_ports(host_computer(get_shell))\nfor port in ports\n    print(\"Info: \" + router.port_info(port))\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_name."},{"role":"assistant","content":"Signature: general.get_name(self: computer) -> string\nReturns the hostname of the machine. If an invalid `computer` object is passed, this method will return a `string` containing `\"Unknown\"`.\nExample:\ncomputerName = get_name(host_computer(get_shell))\nprint(\"The name of your machine is \" + computerName)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.lan_ip."},{"role":"assistant","content":"Signature: general.lan_ip(self: computer) -> string | null\nReturns a `string` with the local IP address of the `computer`. If an invalid `computer` object is passed, this method will return `null`.\nExample:\nlocalIp = lan_ip(host_computer(get_shell))\nprint(\"Public ip:\" + localIp)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.public_ip_pc."},{"role":"assistant","content":"Signature: general.public_ip_pc(self: computer) -> string | null\nReturns a `string` with the public IP address of the `computer`. If an invalid `computer` object is passed, this method will return `null`.\nExample:\npublicIp = public_ip_pc(host_computer(get_shell))\nprint(\"Public ip:\" + publicIp)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.File."},{"role":"assistant","content":"Signature: general.File(self: computer, path: string) -> file | null\nReturns a `file` located at the path provided in the arguments. The path can be either relative or absolute. Keep in mind that any `file` object can be a folder as well. If the provided path cannot be resolved, meaning that no file or folder exists, this method will return `null`. Providing any other type than `string` or the value being empty for the path will result in an error thrown interrupting the script execution. If an invalid `computer` object is passed, this method will return `null`.\nExample:\nfilePath = \"/etc/passwd\"\nfile = File(host_computer(get_shell), filePath)\nif file != null then\n   print(file.get_content)\nelse\n   print(\"File at given path \" + filePath + \" does not exist.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.create_folder."},{"role":"assistant","content":"Signature: general.create_folder(self: computer, path: string, folder: string) -> string | number | null\nCreates a folder at the path provided in the arguments. There are certain limitations when it comes to creating a folder. The folder name has to be alphanumeric and below 128 characters. Creation will fail as well when there is already a folder in place or if there are lacking permissions. Additionally, there is a folder limit of about 250 in each folder and 3125 folders in the computer overall. In case the folder creation fails, the method will return a `string` with details. In case of success, it will return a `number` with the value one. Providing any type that deviates from the signature or using this method in an SSH encryption process will cause an error to be thrown, aborting further script execution. If an invalid `computer` object is passed, this method will return `null`.\nExample:\npath = \"/home/\" + active_user + \"/Desktop\"\ncomputer = host_computer(get_shell)\ncreateResult = create_folder(computer, path, \"myfolder\")\nif typeof(createResult) == \"string\" then\n   print(\"There was an error when creating the folder: \" + createResult)\nelse\n   print(\"Folder got created at given path \" + path)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_network_active."},{"role":"assistant","content":"Signature: general.is_network_active(self: computer) -> number | null\nReturns a `number` with either the value one or zero. The value will be one if the `computer` has internet access. If there is no internet access, it will return zero instead. In case an invalid `computer` object is passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell)\nif is_network_active(computer) then\n   print(\"You're connected.\")\nelse\n   print(\"You're not connected.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.touch."},{"role":"assistant","content":"Signature: general.touch(self: computer, path: string, fileName: string) -> number | string | null\nCreates an empty text `file` at the provided path. Certain limitations apply to file creation: the `file` name must be alphanumeric and below 128 characters. Creation will fail if a `file` already exists at the specified path or if there are insufficient permissions. Additionally, there is a file limit of about 250 per folder and 3125 files overall on the computer. If successful, it returns a `number` with the value one. On failure, it returns a `string` with details. Using this method in an SSH encryption process will cause an error to be thrown, preventing further script execution. If an invalid `computer` object is passed, this method will return `null`.\nExample:\npath = \"/home/\" + active_user + \"/Desktop\"\ncomputer = host_computer(get_shell)\ncreateResult = touch(computer, path, \"myFile.txt\")\nif typeof(createResult) == \"string\" then\n   print(\"There was an error when creating the file: \" + createResult)\nelse\n   print(\"File got created at given path \" + path)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.show_procs."},{"role":"assistant","content":"Signature: general.show_procs(self: computer) -> string | null\nReturns a `string` providing an overview of all active processes on the `computer`. This includes information about the username, PID, CPU usage, memory consumption, and command name. Using this method in an SSH encryption process will throw an error, preventing further script execution. If an invalid `computer` object is passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell)\nprocs = show_procs(computer)\nlist = procs.split(char(10))[1:]\nprocesses = []\nfor item in list\n   parsedItem = item.split(\" \")\n   process = {}\n   process.user = parsedItem[0]\n   process.pid = parsedItem[1]\n   process.cpu = parsedItem[2]\n   process.mem = parsedItem[3]\n   process.command = parsedItem[4]\n   processes.push(process)\nend for\nprint(processes)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.network_devices."},{"role":"assistant","content":"Signature: general.network_devices(self: computer) -> string | null\nReturns a `string` containing all network devices available on the `computer`, with each item providing information about the interface name, chipset, and whether monitoring support is enabled. If an invalid `computer` object is passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell)\ndevices = network_devices(computer)\ndeviceList = devices.split(char(10))\nfor item in deviceList\n   print(item)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.change_password."},{"role":"assistant","content":"Signature: general.change_password(self: computer, user: string, pass: string) -> number | string | null\nChanges the password of an existing user on the `computer`. Root permissions are necessary for successful password changes. Passwords can only include alphanumeric characters and cannot exceed 15 characters. If the password change fails, this method will return a `string` containing information on why it failed. If the change succeeds, it will return a `number` with the value one. If the provided username is empty, an error will be thrown, preventing any further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\nchangeResult = change_password(computer, \"test\", \"newPassword\")\nif typeof(changeResult) == \"string\" then\n   print(\"There was an error when changing the password: \" + changeResult)\nelse\n   print(\"Password got successfully changed.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.create_user."},{"role":"assistant","content":"Signature: general.create_user(self: computer, user: string, pass: string) -> number | string | null\nCreates a user on the `computer`, with the specified name and password. Root permissions are necessary for successful user creation. Neither username nor password can exceed more than 15 characters and both need to be alphanumeric. There cannot be more than 15 users created on the same `computer`. In case the creation fails, this method will return a `string` containing the reason for the failure. On success, it will return a `number` with the value one. If the provided username is empty or either of the values exceeds 15 characters, an error will be thrown, interrupting further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\ncreationResult = create_user(computer, \"newUser\", \"123\")\nif typeof(creationResult) == \"string\" then\n   print(\"There was an error when creating an user: \" + creationResult)\nelse\n   print(\"User got successfully created.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.delete_user."},{"role":"assistant","content":"Signature: general.delete_user(self: computer, user: string, removeHome: number) -> number | string | null\nDeletes the indicated user from the `computer`. It can optionally also delete the home folder related to the user. By default, the home folder will not be deleted. Root permissions are necessary to successfully delete a user. Keep in mind that you cannot delete the root user. In case the deletion fails, this method will return a `string` containing the cause of failure. On success, this method will return a `number` with the value one. If the provided username is empty, an error will be thrown, interrupting further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\ndeletionResult = delete_user(computer, \"test\", true)\nif typeof(deletionResult) == \"string\" then\n   print(\"There was an error when deleting an user: \" + deletionResult)\nelse\n   print(\"User got successfully deleted.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.create_group."},{"role":"assistant","content":"Signature: general.create_group(self: computer, user: string, group: string) -> number | string | null\nCreates a new group associated with an existing user on the `computer`. It is necessary to be root to be able to successfully create a group. There are a few limitations when creating a group such as a character limit of 15 and that the group name may only contain alphanumeric characters. In case the group creation fails, this method will return a `string` containing the cause of failure. On success, it will return a `number` with the value one. In case the provided arguments are empty or the username exceeds 15 characters, an error will be thrown, interrupting further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\ncreationResult = create_group(computer, \"test\", \"staff\")\nif typeof(creationResult) == \"string\" then\n   print(\"There was an error when creating a group: \" + creationResult)\nelse\n   print(\"Group got successfully created.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.delete_group."},{"role":"assistant","content":"Signature: general.delete_group(self: computer, user: string, group: string) -> number | string | null\nDeletes an existing group associated with an existing user on the `computer`. It is necessary to be root to be able to successfully delete a group. In case the group deletion fails, this method will return a `string` containing the cause of failure. On success, it will return `number` with the value one. If either of the provided values is empty, an error will be thrown preventing further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\ndeletionResult = delete_group(computer, \"test\", \"staff\")\nif typeof(deletionResult) == \"string\" then\n   print(\"There was an error when deleting a group: \" + deletionResult)\nelse\n   print(\"Group got successfully deleted.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.groups."},{"role":"assistant","content":"Signature: general.groups(self: computer, user: string) -> string | null\nReturns a `string` containing groups associated with an existing user on the `computer`. In case the user does not exist, a `string` will be returned with an error message. If the provided username is empty, an error will be thrown preventing further script execution. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\ncreate_group(computer, \"root\", \"staff\")\ngroups = groups(computer, \"root\")\nlistOfGroups = groups.split(char(10))\nprint(listOfGroups)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.close_program."},{"role":"assistant","content":"Signature: general.close_program(self: computer, pid: number) -> number | string | null\nCloses a program associated with the provided PID. You can see the list of active programs by either using `show_procs` or typing `ps` into your terminal. To close a program, you need to be either the owner of the running process or root. In case the closing of a program fails, this method will return a `string` containing details. On success, it will return a `number` with the value one. If there is no process with the provided PID, this method will return a `number` with the value zero. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\nprocesses = split(show_procs(computer), char(10))[1:]\npid = split(processes[1], \" \")[1]\ncloseResult = close_program(computer, to_int(pid))\nif typeof(closeResult) == \"string\" then\n   print(\"There was an error when closing a program: \" + closeResult)\nelse\n   print(\"Program with pid \" + pid + \" got successfully closed.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.wifi_networks."},{"role":"assistant","content":"Signature: general.wifi_networks(self: computer, netDevice: string) -> {\"type\":\"list\",\"valueType\":\"string\"} | null\nReturns a list of the Wi-Fi networks that are available for the provided interface. Each item in the `list` is a `string` containing information on the BSSID, PWR, and ESSID. If no matching netDevice can be found or an invalid `computer` object is passed, this method will return `null`. In case the active network card is not a Wi-Fi card, an error will be thrown, preventing any further script execution.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\nnetworks = wifi_networks(computer, \"wlan0\")\nresult = []\nfor network in networks\n   parsedItem = network.split(\" \")\n   item = {}\n   item.BSSID = parsedItem[0]\n   item.PWR = parsedItem[1]\n   item.ESSID = parsedItem[2]\n   result.push(item)\nend for\nprint(result)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.connect_wifi."},{"role":"assistant","content":"Signature: general.connect_wifi(self: computer, netDevice: string, bssid: string, essid: string, pass: string) -> number | string | null\nConnects to the indicated Wi-Fi network. It is not possible to connect to a new Wi-Fi while being logged in as a guest. If connecting to a new Wi-Fi fails, this method will return a `string` containing details. On success, it will return a `number` with the value one. Wi-Fi networks can be found via `wifi_networks` or by typing `iwlist` as a command in the terminal. If any of the provided parameters have a type that deviates from the defined signature, the method will return `null`.\nExample:\ncomputer = host_computer(get_shell)\nnetworks = wifi_networks(computer)\nfirstNetwork = networks[0].split(\" \")\nBSSID = firstNetwork[0]\nESSID = firstNetwork[2]\nconnectionResult = connect_wifi(host_computer, \"wlan0\", BSSID, ESSID, \"wifi-password\")\nif typeof(connectionResult) == \"string\" then\n   print(\"There was an error while connecting to new Wifi: \" + connectionResult)\nelse\n   print(\"Connected to new Wifi successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.connect_ethernet."},{"role":"assistant","content":"Signature: general.connect_ethernet(self: computer, netDevice: string, localIp: string, gateway: string) -> string | null\nSets up a new IP address on the `computer` through the ethernet connection. It is not possible to set up a new IP address while being logged in as a guest. On failure, this method will either return a `string` with details or `null`. On success, it will return an empty `string`. If any of the provided parameters have a type that deviates from the defined signature or the computer is not connected to the internet, an error will be thrown preventing any further script execution.\nExample:\ncomputer = host_computer(get_shell)\nconnectionResult = connect_ethernet(computer, \"eth0\", \"192.168.0.4\", local_ip(get_router))\nif typeof(connectionResult) == \"string\" then\n   print(\"There was an error while connecting: \" + connectionResult)\nelse\n   print(\"Connected successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.network_gateway."},{"role":"assistant","content":"Signature: general.network_gateway(self: computer) -> string\nReturns a `string` with the gateway IP address configured on the `computer`. If an invalid `computer` object gets passed, this method returns a `string` with the value `\"0.0.0.0\"`.\nExample:\ncomputer = host_computer(get_shell)\ngatewayIp = network_gateway(computer)\nprint(\"Gateway IP: \" + gatewayIp)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.active_net_card."},{"role":"assistant","content":"Signature: general.active_net_card(self: computer) -> string | null\nReturns a `string` which contains either the keyword `\"WIFI\"` or `\"ETHERNET\"` depending on which connection type your `computer` is connected by. In case an invalid `computer` object gets passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell)\nnetCard = active_net_card(computer)\nprint(\"Connected by: \" + netCard)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.aircrack."},{"role":"assistant","content":"Signature: general.aircrack(self: crypto, path: string) -> string | null\nReturns a `string` containing the password based on the file which was generated via aireplay. In case of failure, it will return `null` instead. If the provided path is empty, an error will be thrown, interrupting the script execution.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\nnetworks = wifi_networks(host_computer(get_shell), \"wlan0\")\nfirstNetwork = networks[1].split(\" \")\nbssid = firstNetwork[0]\npwr = firstNetwork[1][:-1].to_int\nessid = firstNetwork[2]\naireplayResult = aireplay(crypto, bssid, essid, 300000 / pwr + 15)\nif (aireplayResult == null) then\n   result = aircrack(crypto, home_dir + \"/file.cap\")\n   print(result)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.airmon."},{"role":"assistant","content":"Signature: general.airmon(self: crypto, option: string, device: string) -> number | string\nEnables or disables the monitor mode of a network device. The `options` parameter can only be `\"start\"` or `\"stop\"`. Monitor mode can only be enabled on Wifi cards. If it wasn't possible to enable or disable the monitor mode, this method will return either a `number` with the value zero or a `string` with details. In case of success, it will return a `number` with the value one.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\nairmonResult = airmon(crypto, \"start\", \"wlan0\")\nif typeof(airmonResult) == \"string\" then\n   print(\"There was an error while switching monitoring mode: \" + airmonResult)\nelse\n   print(\"Monitoring mode switched successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.aireplay."},{"role":"assistant","content":"Signature: general.aireplay(self: crypto, bssid: string, essid: string, maxAcks: number) -> string | null\nUsed to inject frames on wireless interfaces. Once the command with `\"Control+C\"` is stopped, it will save the captured information in a text file called `\"file.cap\"` in the path where the terminal is currently located. Alternatively, a maximum of captured `acks` can be specified for the command to stop automatically, saving the `\"file.cap\"` file as described above. To figure out how many ACKs are required, you can use the following formula: `\"300000 / (Power + 15)\"`. If there is an error, a `string` will be returned with the message indicating the problem. On success, it will return `null`. It is advised though to verify that the capture file actually exists. If the passed `crypto` object is invalid, it will return `null` as well. In case any of the provided values deviate from the signature types or bssid/essid is empty, an error will be thrown preventing any further script execution.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\nnetworks = wifi_networks(host_computer(get_shell), \"wlan0\")\nfor index in range(0, networks.len - 1)\n   print(index + \".) \" + networks[index])\nend for\nselectedIndex = user_input(\"Select Wifi: \").to_int\nif (typeof(selectedIndex) == \"string\" or selectedIndex < 0 or selectedIndex > networks.len - 1) then\n   exit(\"Wrong index!\")\nend if\nparsed = networks[selectedIndex].split(\" \")\nbssid = parsed[0]\npwr = parsed[1][:-1].to_int\nessid = parsed[2]\npotentialAcks = 300000 / (pwr + 15)\naireplaycrypto, bssid, essid, potentialAcks)\nwifiPassword = aircrack(crypto, \"/home/\" + active_user + \"/file.cap\")\nprint(\"Wifi password for \" + essid + \" is \" + wifiPassword)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.decipher."},{"role":"assistant","content":"Signature: general.decipher(self: crypto, encPass: string) -> string | null\nReturns a decrypted password via the provided password MD5 hash. Keep in mind that this method is not decrypting a password but rather checking for existing passwords within the game world with a matching MD5 hash. So in case a password does not exist in the game world, the decryption will fail. On failure, this method will return `null`. Using this method in an SSH encryption process will cause an error to be thrown, aborting further script execution.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\ncomputer = host_computer(get_shell(\"root\", \"test\"))\npasswdContent = get_content(File(computer, \"/etc/passwd\"))\nfirstAccount = passwdContent.split(char(10))[0]\nparsed = firstAccount.split(\":\")\nusername = parsed[0]\npasswordHash = parsed[1]\npassword = decipher(crypto, passwordHash)\nprint(\"User: \" + username)\nprint(\"Password: \" + password)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.smtp_user_list."},{"role":"assistant","content":"Signature: general.smtp_user_list(self: crypto, ip: string, port: number) -> {\"type\":\"list\",\"valueType\":\"string\"} | string | null\nReturns a `list` of the existing users on the `computer` where the SMTP service is running. If these users also have an email account registered on the SMTP server, it will be indicated in the `list`. SMTP services are usually running on port `25`. In case of failure, this method will return a `string` containing the cause. If any of the provided values deviate from the signature types, this method will return `null`.\nExample:\ncrypto = include_lib(\"/lib/crypto.so\")\nprint(smtp_user_list(crypto, \"192.168.0.4\", 25))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_description."},{"role":"assistant","content":"Signature: general.get_description(self: ctfEvent) -> string | null\nReturns a `string` with the CTF event description. If the provided `ctfEvent` object is invalid or missing, this method will return `null`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_template."},{"role":"assistant","content":"Signature: general.get_template(self: ctfEvent) -> string | null\nReturns a `string` with the CTF event template. If the provided `ctfEvent` object is invalid or missing, this method will return `null`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.player_success."},{"role":"assistant","content":"Signature: general.player_success(self: ctfEvent) -> number | null\nReturns a `number` with the value one if the CTF event was completed successfully. Otherwise, this method will return a `number` with the value zero. If the provided `ctfEvent` object is invalid or missing, this method will return `null`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_creator_name."},{"role":"assistant","content":"Signature: general.get_creator_name(self: ctfEvent) -> string | null\nReturns a `string` with the name of the CTF event creator. If the provided `ctfEvent` object is invalid or missing, this method will return `null`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_mail_content."},{"role":"assistant","content":"Signature: general.get_mail_content(self: ctfEvent) -> string | null\nReturns a `string` with the mail content of the CTF event. If the provided `ctfEvent` object is invalid or missing, this method will return `null`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.chmod."},{"role":"assistant","content":"Signature: general.chmod(self: file, perms: string, isRecursive: number) -> string | null\nModifies the `file` permissions. Optionally, these permissions can also be applied recursively. The format for applying permissions is as follows: `\"[references][operator][modes]\"`. The references type is defined through three possible types: user `\"u\"`, group `\"g\"`, and other `\"o\"`. The operator is used to define if permissions get added `\"+\"` or removed `\"-\"`. There are three different modes that can be modified: read `\"r\"`, write `\"w\"`, and execute `\"x\"`. So, for example, `\"o-wrx\"` would remove all possible permissions for others. To add all permissions for others again, `\"o+wrx\"` would be used. In case the modification fails, this method will return a `string` containing information about the reason. Otherwise, an empty `string` is returned. In case any type other than `number` is used for the `isRecursive` parameter, an error will be thrown preventing further script execution. If an invalid `file` object is passed, this method will return `null`.\nExample:\nhostComputer = host_computer(get_shell(\"root\", \"test\"))\nrootFolder = File(hostComputer, \"/bin\")\noldPermissions = permissions(rootFolder)\nchmod(rootFolder, \"o-wrx\", true)\nnewPermissions = permissions(rootFolder)\nprint(\"Old permissions: \" + oldPermissions)\nprint(\"New permissions: \" + newPermissions)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.copy."},{"role":"assistant","content":"Signature: general.copy(self: file, path: string, name: string) -> string | number | null\nCopies the `file` to the provided path. Files can only be copied if the user has read and write permissions or is root. The new filename has to be below 128 characters and alphanumeric. After success, this method will return a `number` with the value one. Otherwise, it will return a `string` containing information about the reason for failure. If any of the parameter types deviate from the method signature, this method is used within an SSH encryption process, the new name exceeds 128 characters, or the path is too long, an error will be thrown, causing an interruption of script execution. In case the current file gets deleted or an invalid `file` object is passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\npasswdFile = File(computer, \"/etc/passwd\")\ncopyResult = copy(passwdFile, \"/etc/\", \"duplicate\")\nif typeof(copyResult) == \"string\" then\n   print(\"There was an error while copying file: \" + copyResult)\nelse\n   print(\"File got copied successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.move."},{"role":"assistant","content":"Signature: general.move(self: file, path: string, fileName: string) -> string | number | null\nMoves the `file` to the provided path. Files can only be moved if the user has read and write permissions or is root. The new filename has to be below 128 characters and alphanumeric. After success, this method will return a `number` with the value one. Otherwise, this method will return a `string` with details. If any of the parameter types deviate from the method signature, this method is used within an SSH encryption process, the new name exceeds 128 characters, or the path is too long, an error will be thrown, causing an interruption of script execution. In case the current file gets deleted or an invalid `file` object is passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\npasswdFile = File(computer, \"/etc/passwd\")\nmoveResult = move(passwdFile, \"/root/\", \"newFileName\")\nif typeof(moveResult) == \"string\" then\n   print(\"There was an error while moving file: \" + moveResult)\nelse\n   print(\"File got moved successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.symlink."},{"role":"assistant","content":"Signature: general.symlink(self: file, path: string, newName: string) -> string | number | null\nCreates a symlink to the specified path. Symlinks can only be created if the user has write permissions or is root. The new filename must be alphanumeric and under 128 characters. Upon success, this method returns a `number` with the value one. On failure, it returns a `string` with details. If any parameters deviate from the method signature, if used within an SSH encryption process, if the new name exceeds 128 characters, or if the path is too long, an error will be thrown, interrupting script execution. In case the current file gets deleted or an invalid `file` object is passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\nlsFile = File(computer, \"/bin/ls\")\nsymResult = symlink(lsFile, \"/bin\", \"alternativeLS\")\nif typeof(symResult) == \"string\" then\n   print(\"There was an error while creating symlink: \" + symResult)\nelse\n   print(\"Symlink got created successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.rename."},{"role":"assistant","content":"Signature: general.rename(self: file, name: string) -> string | number\nRename the file with the name provided. Files can only be renamed if the user has write permissions or is root. The new filename has to be below 128 characters and alphanumeric. On failure, this method will return a `string` with details. Otherwise, this method will return an empty string. If this method is used within an SSH encryption process, an error will be thrown, causing the script execution to be interrupted. In case the provided name is `null` or an invalid `file` object is passed, this method will return a `number` with the value zero.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\npasswdFile = File(computer, \"/etc/passwd\")\nrenameResult = rename(passwdFile, \"renamed\")\nif typeof(renameResult) == \"string\" then\n   print(\"There was an error while renaming file: \" + renameResult)\nelse\n   print(\"File got renamed successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.path."},{"role":"assistant","content":"Signature: general.path(self: file, symlinkOrigPath: number) -> string | null\nReturns a `string` containing the file path. If the file is a symlink, the optional `symlinkOrigPath` argument can be set to return the original path of the linked file instead. If the file has been deleted, this method will still return the path it had prior to deletion. If an invalid `file` object is passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell)\npasswdFile = File(computer, \"/etc/passwd\")\nprint(\"File location: \" + path(passwdFile))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_folder."},{"role":"assistant","content":"Signature: general.is_folder(self: file) -> number | null\nReturns a `number`. The value is one if the file is a folder, zero otherwise. In case the file gets deleted or an invalid `file` object is passed, this method will return `null` instead.\nExample:\ncomputer = host_computer(get_shell)\netcFolder = File(computer, \"/etc\")\nprint(\"Is a folder: \" + is_folder(etcFolder))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.parent."},{"role":"assistant","content":"Signature: general.parent(self: file) -> file | null\nReturns the parent folder of the current file or folder. In case there is no parent folder `null` will be returned instead. In case the file gets deleted or an invalid `file` object gets passed, this method will return `null` as well.\nExample:\ncomputer = host_computer(get_shell)\netcFolder = File(computer, \"/etc\")\nprint(\"Parent path: \" + path(parent(etcFolder)))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.name."},{"role":"assistant","content":"Signature: general.name(self: file) -> string | null\nReturns a `string` with the name of the file. In case the file gets deleted or an invalid `file` object gets passed, this method will return `null` instead.\nExample:\ncomputer = host_computer(get_shell)\npasswdFile = File(computer, \"/etc/passwd\")\nprint(\"Filename: \" + name(passwdFile))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.allow_import."},{"role":"assistant","content":"Signature: general.allow_import(self: file) -> number | null\nReturns a `number`. If the file is binary and can be imported by other scripts, the value will be one; otherwise, the value will be zero. In case the file gets deleted, this method will cause a crash. If an invalid `file` object gets passed, this method will return `null` instead.\nExample:\ncomputer = host_computer(get_shell)\nlsBinary = File(computer, \"/bin/ls\")\nprint(\"File can be imported: \" + allow_import(lsBinary))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_content."},{"role":"assistant","content":"Signature: general.get_content(self: file) -> string | null\nReturns a `string` representing the content of the file. To read a file, the user requires read access or being root. Note that you cannot read a binary file. In case of failure, `null` will be returned. If this method is used within an SSH encryption process, an error will be thrown, preventing any further script execution.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\npasswdFile = File(computer, \"/etc/passwd\")\nprint(\"File content: \" + get_content(passwdFile))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.set_content."},{"role":"assistant","content":"Signature: general.set_content(self: file, content: string) -> string | number | null\nSaves text into a `file`. The content will not get appended to the `file`; therefore, existing content will be overridden. To set new content, the user requires write permissions or being root. Keep in mind that text files cannot exceed the character limit of 160,000. In case setting the content was successful, a `number` with the value one will be returned. Otherwise, a `string` with details will be returned. If this method is used within an SSH encryption process, an error will be thrown, preventing any further script execution. If the provided content is `null`, an invalid `file` object gets passed or permissions are lacking, this method will return a `number` with the value zero. In case the file gets deleted this method will return `null`.\nExample:\ncomputer = host_computer(get_shell(\"root\", \"test\"))\npasswdFile = File(computer, \"/etc/passwd\")\nsetResult = set_content(passwdFile, \"moo\")\nif typeof(setResult) == \"string\" then\n   print(\"There was an error while setting file content: \" + setResult)\nelse if setResult == 0 then\n   print(\"Unable to set content of file!\")\nelse\n   print(\"File content got changed successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_binary."},{"role":"assistant","content":"Signature: general.is_binary(self: file) -> number | null\nReturns a `number`. If the file is a binary, the value will be one; otherwise, it will be zero. In case the file gets deleted or an invalid `file` object gets passed, this method will return `null` instead.\nExample:\ncomputer = host_computer(get_shell)\nlsBinary = File(computer, \"/bin/ls\")\nprint(\"File is a binary: \" + is_binary(lsBinary))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_symlink."},{"role":"assistant","content":"Signature: general.is_symlink(self: file) -> number | null\nReturns a `number`. If the file is a symlink, the value will be one; otherwise, it will be zero. In case the file gets deleted or an invalid `file` object gets passed, this method will return `null` instead.\nExample:\ncomputer = host_computer(get_shell)\nlsBinary = File(computer, \"/bin/ls\")\nprint(\"File is a symlink: \" + is_symlink(lsBinary))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.has_permission."},{"role":"assistant","content":"Signature: general.has_permission(self: file, perms: string) -> number | null\nReturns a `number` indicating if the user who launched the script has the requested permissions. One will indicate that the user has the correct permissions. In case permissions are lacking, the value will be zero. There are three different permission types: read `\"r\"`, write `\"w\"`, and execute `\"x\"`. In case the file gets deleted or an invalid `file` object gets passed, this method will return `null` instead.\nExample:\ncomputer = host_computer(get_shell)\nlsBinary = File(computer, \"/bin/ls\")\nprint(\"Is able to execute ls: \" + has_permission(lsBinary, \"x\"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.delete."},{"role":"assistant","content":"Signature: general.delete(self: file) -> string | null\nDelete the current file. To delete files, write permissions are required or being root. In case of failure, a `string` with details will be returned. Otherwise, an empty `string` gets returned. Please note that deleting a file will leave a log entry. In case an invalid `file` object gets passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell)\nlsBinary = File(computer, \"/bin/ls\")\ndeletionResult = delete(lsBinary)\nif typeof(deletionResult) == \"string\" and len(deletionResult) > 0 then\n   print(\"There was an error while deleting a file: \" + deletionResult)\nelse\n   print(\"File got deleted successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_folders."},{"role":"assistant","content":"Signature: general.get_folders(self: file) -> {\"type\":\"list\",\"valueType\":\"file\"} | null\nReturns a `list` of folders. In case the current entity is a file instead of a folder this method will return `null`, so it is advisable to first use the `is_folder` function before calling this method. In case the current folder gets deleted or an invalid `file` object gets passed, this method will return `null` as well.\nExample:\ncomputer = host_computer(get_shell)\nbinFolder = File(computer, \"/home\")\nfolders = get_folders(binFolder)\nfor folder in folders\n   print(folder.path)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_files."},{"role":"assistant","content":"Signature: general.get_files(self: file) -> {\"type\":\"list\",\"valueType\":\"file\"} | null\nReturns a `list` of files. In case the current entity is a file instead of a folder this method will return `null`, so it is advisable to first use the `is_folder` function before calling this method. In case the current folder gets deleted or an invalid `file` object gets passed, this method will return `null` as well.\nExample:\ncomputer = host_computer(get_shell)\nbinFolder = File(computer, \"/bin\")\nfiles = get_files(binFolder)\nfor file in files\n   print(file.path)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.permissions."},{"role":"assistant","content":"Signature: general.permissions(self: file) -> string | null\nReturns a `string` with the current file permissions. In case the current file gets deleted or an invalid `file` object gets passed, this method will return `null`. The format for this permissions `string` is as follows: `\"[fileType][wrx](u)[wrx](g)[wrx](o)\"`. The file type is either `\"d\"` in case it's a directory or `\"-\"`. The user type gets defined through three possible types: user `\"u\"`, group `\"g\"`, and other `\"o\"`. There are three different permission types: read `\"r\"`, write `\"w\"`, and execute `\"x\"`. An example of a `string` returned by this method would be `\"-rwxr-xr-x\"`. Taking the latter as an example, the following things become clear:\n* The provided file is not a directory.\n* The user has full access.\n* The group and others have almost all permissions besides writing.\n\nExample:\ncomputer = host_computer(get_shell)\nbinFolder = File(computer, \"/bin\")\nperms = permissions(binFolder)\nfileType = perms[0]\npermissionsForUser = perms[1:4]\npermissionsForGroup = perms[4:7]\npermissionsForOther = perms[7:10]\nprint(\"File type: \" + fileType)\nprint(\"User permissions: \" + permissionsForUser)\nprint(\"Group permissions: \" + permissionsForGroup)\nprint(\"Other permissions: \" + permissionsForOther)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.owner."},{"role":"assistant","content":"Signature: general.owner(self: file) -> string | null\nReturns a `string` with the name of the file owner. User permissions get applied to whoever is the owner of a file. In case the current file gets deleted or an invalid `file` object gets passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell)\nlsBinary = File(computer, \"/bin/ls\")\nprint(\"Owner of ls is: \" + owner(lsBinary))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.set_owner."},{"role":"assistant","content":"Signature: general.set_owner(self: file, owner: string, recursive: number) -> string | null\nChange the owner of this file. Optionally the owner can get applied recursively. The owner's name cannot exceed 15 characters. Additionally either write permissions or being root is required. In case of failure a `string` gets returned containing the cause. Otherwise an empty `string` gets returned. In case the current file gets deleted, an invalid `file` object gets passed or the passed owner value is not a `string`, this method will return `null`. If the passed owner value is empty, the owner value is longer than 15 characters, or the passed recursive value deviates from its original type, an error will be thrown, interrupting further script execution.\nExample:\ncomputer = host_computer(get_shell)\nlsBinary = File(computer, \"/bin/ls\")\nownerResult = set_owner(lsBinary, \"root\")\nif typeof(ownerResult) == \"string\" then\n   print(\"There was an error while changing owner: \" + ownerResult)\nelse\n   print(\"File owner changed successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.group."},{"role":"assistant","content":"Signature: general.group(self: file) -> string | null\nReturns a `string` with the name of the group to which this file belongs. Group permissions get applied to whoever is the owner of a file. In case the current file gets deleted or an invalid `file` object gets passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell)\nlsBinary = File(computer, \"/bin/ls\")\nprint(\"File is related to following group: \" + group(lsBinary))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.set_group."},{"role":"assistant","content":"Signature: general.set_group(self: file, group: string, recursive: number) -> string | null\nChange the group related to this file. Optionally the group can get applied recursively. The group name cannot exceed 15 characters. Additionally either write permissions or being root is required. In case of failure, a `string` with details. On success, an empty `string` gets returned. In case the current file gets deleted, an invalid `file` object gets passed or the passed group is not a `string`, this method will return `null`. If the passed group value is empty, the group value is longer than 15 characters, or the passed recursive value deviates from its original type, an error will be thrown, preventing further script execution.\nExample:\ncomputer = host_computer(get_shell)\nlsBinary = File(computer, \"/bin/ls\")\nownerResult = set_group(lsBinary, \"root\")\nif typeof(ownerResult) == \"string\" then\n   print(\"There was an error while changing group: \" + ownerResult)\nelse\n   print(\"File group changed successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.size."},{"role":"assistant","content":"Signature: general.size(self: file) -> string | null\nReturns a `string` with the size of the file in bytes. There is no correlation between file size and actual file content. Instead, the file size is depending on the name of the file. In case the current file gets deleted or an invalid `file` object gets passed, this method will return `null`.\nExample:\ncomputer = host_computer(get_shell)\nlsBinary = File(computer, \"/bin/ls\")\nsize = size(lsBinary)\nif size.to_int > 1000 then\n   print(\"File size is bigger than 1000 bytes.\")\nelse\n   print(\"File size is below 1000 bytes.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.load."},{"role":"assistant","content":"Signature: general.load(self: metaxploit, path: string) -> metaLib | null\nReturns a `metaLib` object for the provided path to the library binary. Keep in mind that this can only be used on library files. On failure, this method will return `null`. If the provided path is empty, this method will throw a runtime exception, preventing further script execution.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nlibFolder = File(host_computer(get_shell), \"/lib\")\nfor file in get_files(libFolder)\n   metaLib = load(metax, file.path)\n   print(\"Library: \" + lib_name(metaLib) + \" - \" + version(metaLib))\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.net_use."},{"role":"assistant","content":"Signature: general.net_use(self: metaxploit, ip: string, port: number) -> netSession | null\nReturns a `netSession` object for the provided IP address and port. Note that if the port is set to zero, it will return a `netSession` related to the kernel router. The main purpose of this method is to gain a `netSession` and then use `dump_lib` to receive a `metaLib` object to exploit vulnerabilities. In case of failure, this method will return `null`. If this method is used within an SSH encryption process or with disabled internet, or if an invalid target IP is provided, this method will throw a runtime exception.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = used_ports(get_router(\"1.1.1.1\"))\nfor port in ports\n   netSession = net_use(metax, \"1.1.1.1\", port_number(port))\n   metaLib = dump_lib(netSession)\n   print(\"Library: \" + lib_name(metaLib) + \" - \" + version(metaLib) + \" on port \" + port_number(port))\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.rshell_client."},{"role":"assistant","content":"Signature: general.rshell_client(self: metaxploit, ip: string, port: number, processName: string) -> string | number | null\nLaunches a process on the victim's `computer`, silently attempting to continuously connect in the background to the specified address and port. For the reverse shell to run successfully, the `rshell` service must be installed, and the port forward must be configured correctly on the machine where the server is waiting for the victim's connection. If the launch was successful, a `number` with the value one will be returned. In case of failure, a `string` with details will be returned.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nrshell_client(metax, \"1.1.1.1\", 1222, \"bgprocess\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.rshell_server."},{"role":"assistant","content":"Signature: general.rshell_server(self: metaxploit) -> string | {\"type\":\"list\",\"valueType\":\"shell\"} | null\nThis method returns a `list` of `shell` objects that have been reverse shell connected to this computer. To manage the connections received, the `rshell` service must be installed on the machine that receives the victims' connections. In case of failure a `string` will be returned with details. If the provided object is anything other than `metaxploit` this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nshells = rshell_server(metax)\nfirstShell = shells[0]\nchmod(File(host_computer(firstShell), \"/\"), \"o-wrx\", true)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.scan."},{"role":"assistant","content":"Signature: general.scan(self: metaxploit, metaLib: metaLib) -> {\"type\":\"list\",\"valueType\":\"string\"} | null\nReturns a `list` where each item is a `string` representing a memory area which has vulnerabilities related to the provided library. These memory areas can be used to make further scans via `scan_address`. In case of failure, this method returns `null` instead. An example of a memory area would be \"0x7BFC1EAA\". Using this method within a SSH encryption process will throw a runtime exception.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\nscanResult = scan(metax, metaLib)\nfor area in scanResult\n   print(\"Memory area containg vulnerability: \" + area)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.scan_address."},{"role":"assistant","content":"Signature: general.scan_address(self: metaxploit, metaLib: metaLib, memoryAddress: string) -> string | null\nReturns a `string` containing information about each vulnerability in the provided library and memory area. In case the scanning fails this method will return `null`. Using this method within a SSH encryption process will throw a runtime exception.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\nscanResult = scan(metax, metaLib)\nscanAddress = scan_address(metax, metaLib, scanResult[0])\nsegments = split(scanAddress, \"Unsafe check: \")[1:]\nexploits = []\nfor segment in segments\n   labelStart = indexOf(segment, \"<b>\")\n   labelEnd = indexOf(segment, \"</b>\")\n   push(exploits, segment[labelStart + 3: labelEnd])\nend for\nprint(\"Available vulnerabilities: \" + join(exploits, \", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.sniffer."},{"role":"assistant","content":"Signature: general.sniffer(self: metaxploit, saveEncSource: number) -> string | null\nThe terminal listens to the network packets of any connection that passes through the computer. When any connection information gets captured, it will print a `string` with the obtained data. In case saving of encryption source is enabled it will download the source code of the script responsible for encryption. In case the operation fails this method will return `null`. Using this method within a SSH encryption process will throw a runtime exception.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nresult = sniffer(metax)\nprint(result)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.overflow."},{"role":"assistant","content":"Signature: general.overflow(self: metaLib, memoryAddress: string, unsecZone: string, optArgs: string) -> string | number | shell | computer | file | null\nExploits vulnerabilities. The returned value can be of various data types. Therefore, using `typeof` is advisable. `optArgs` are required when changing a password or obtaining a `computer` via a router. It should be the desired password or LAN IP, respectively. Change password, traffic light and firewall disable exploits will return a `number`, where the value is either one or zero. One indicates success while zero indicates failure. Shell, computer, and file exploits either return an instance of their type or `null`. Providing values that deviate from the defined signature will cause a runtime exception to be thrown.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\nscanResult = scan(metax, metaLib)\ntarget = scanResult[0]\nscanAddress = scan_address(metax, metaLib, target)\nsegments = split(scanAddress, \"Unsafe check: \")\nexploit = null\n for segment in segments\n   hasRequirement = indexOf(segment, \"*\") != null\n   if (not hasRequirement) then\n      labelStart = indexOf(segment, \"<b>\")\n      labelEnd = indexOf(segment, \"</b>\")\n      exploit = segment[labelStart + 3: labelEnd]\n   end if\nend for\nif (exploit) then\n   print(\"Exploiting... \" + target + \":\" + exploit)\n   print(overflow(metaLib, target, exploit))\nelse\n   print(\"No exploit found with zero requirements\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.version."},{"role":"assistant","content":"Signature: general.version(self: metaLib) -> string | null\nReturns a `string` containing the version number of the library. An example of a version number would be `\"1.0.0\"`. In case an invalid `metaLib` object gets passed this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\nprint(\"Init.so version: \" + version(metaLib))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.lib_name."},{"role":"assistant","content":"Signature: general.lib_name(self: metaLib) -> string | null\nReturns a `string` containing the name of the library. An example of a name would be `\"init.so\"`. In case an invalid `metaLib` object gets passed this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\nprint(\"Name for library is: \" + lib_name(metaLib))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.debug_tools."},{"role":"assistant","content":"Signature: general.debug_tools(self: metaLib, user: string, password: string) -> string | debugLibrary | null\nReturns a library in debug mode as a `debugLibrary` object. A valid Neurobox engineer's username and password are required to access this mode. If successful, the `debugLibrary` object is returned; in case of an error, a `string` with details is provided. Passing values that deviate from the defined signature will result in `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\ndebugLib = debug_tools(metaLib, \"test\", \"test\")\nif typeof(debugLib) == \"debugLibrary\" then\n   print(\"Received debug libary object!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_patched."},{"role":"assistant","content":"Signature: general.is_patched(self: metaLib, getdate: number) -> number | string | null\nReturns by default a number indicating whether the library has been patched. A value of one indicates that the library has been patched, while zero indicates that it has not. If the getdate parameter is set to `true`, the function will return a `string` containing the date of the last patch. The data format is as follows: `\"dd/MM/yyyy\"`. Additionally if there is any error the return value will be a `string`. Providing values that deviate from the defined signature will cause `null` to be returned.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\nisPatchedResult = is_patched(metaLib)\nif isPatchedResult == 1 then\n   print(\"init.so has been patched!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.payload."},{"role":"assistant","content":"Signature: general.payload(self: debugLibrary, memZone: string, pathFile: string) -> string | {\"type\":\"list\",\"valueType\":\"map\"} | null\nReturns a `list` containing a single partial `computer` object if zero-day vulnerabilities are detected within the specified memory zone. If a file path is provided, a partial `file` object associated with this path will also be included in the `list`. Additionally, if this file is a library, its corresponding `metaLib` object is added to the returned `list`. In case of an error, a `string` with details is returned. Providing arguments that deviate from the defined signature will result in `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\ndebugLib = debug_tools(metaLib, \"test\", \"test\")\nresult = payload(debugLib, \"0x7A69F4C3\")\nif typeof(result) == \"list\" and len(result) > 0 then\n   print(\"Successfully executed payload!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.dump_lib."},{"role":"assistant","content":"Signature: general.dump_lib(self: netSession) -> metaLib | null\nReturns the `metaLib` associated with the remote service. For example if the `metaxpoit` method `net_use` was used on a ssh port it will return the `metaLib` related to the ssh service. In case the port was zero is will return a `metaLib` related to the kernel router. If an invalid `netSession` gets passed this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = used_ports(get_router(\"1.1.1.1\"))\nnetSession = net_use(metax, \"1.1.1.1\", port_number(ports[0]))\nmetaLib = dump_lib(netSession)\nprint(\"Library: \" + lib_name(metaLib) + \" - \" + version(metaLib) + \" on port \" + port_number(ports[0]))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_num_conn_gateway."},{"role":"assistant","content":"Signature: general.get_num_conn_gateway(self: netSession) -> number | null\nReturns the number of devices using this router as a gateway. If you obtained your `netSession` from a computer, it will fetch and return the value from its gateway router. If an invalid `netSession` gets passed this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = used_ports(get_router(\"1.1.1.1\"))\nnetSession = net_use(metax, \"1.1.1.1\", port_number(ports[0]))\nprint(\"Gateway clients: \" + get_num_conn_gateway(netSession))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_num_portforward."},{"role":"assistant","content":"Signature: general.get_num_portforward(self: netSession) -> number | null\nReturns the number of ports forwarded by this router. If you obtained your `netSession` from a computer, it will fetch and return the value from its gateway router. If an invalid `netSession` gets passed this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = used_ports(get_router(\"1.1.1.1\"))\nnetSession = net_use(metax, \"1.1.1.1\", port_number(ports[0]))\nprint(\"Port forwards: \" + get_num_portforward(netSession))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_num_users."},{"role":"assistant","content":"Signature: general.get_num_users(self: netSession) -> number | null\nReturns the number of user accounts on the system. If an invalid `netSession` gets passed this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = used_ports(get_router(\"1.1.1.1\"))\nnetSession = net_use(metax, \"1.1.1.1\", port_number(ports[0]))\nprint(\"User accounts: \" + get_num_users(netSession))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_any_active_user."},{"role":"assistant","content":"Signature: general.is_any_active_user(self: netSession) -> number | null\nReturns a `number`. If there is an active user on the system it will be one. Otherwise, it will be zero. If an invalid `netSession` gets passed this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = used_ports(get_router(\"1.1.1.1\"))\nnetSession = net_use(metax, \"1.1.1.1\", port_number(ports[0]))\nprint(\"User Active?: \" + is_any_active_user(netSession))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_root_active_user."},{"role":"assistant","content":"Signature: general.is_root_active_user(self: netSession) -> number | null\nReturns a `number`. If there is an active root on the system it will be one. Otherwise, it will be zero. If an invalid `netSession` gets passed this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = used_ports(get_router(\"1.1.1.1\"))\nnetSession = net_use(metax, \"1.1.1.1\", port_number(ports[0]))\nprint(\"Root Active?: \" + is_root_active_user(netSession))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.device_ports."},{"role":"assistant","content":"Signature: general.device_ports(self: router, ip: string) -> string | {\"type\":\"list\",\"valueType\":\"port\"} | null\nReturns a `list` where each item is an open `port` related to the device of the provided LAN IP address. The device needs to be within the network of the `router`. In case of failure, this method will return `null` or a `string` with details. In case an empty ip is provided this method will throw a runtime exception.\nExample:\nrouter = get_router\ndevices = devices_lan_ip(router)\nfor ip in devices\n   ports = device_ports(router, ip)\n   openPorts = []\n   for port in ports\n      if is_closed(port) then continue\n      push(openPorts, port)\n   end for\n\n   if (len(openPorts) == 0) then\n      print(ip + \" has no open ports\")\n   else\n      print(ip + \" contains following open ports:\")\n      for port in openPorts\n         print(\"|-\" +  port.port_number)\n      end for\n   end if\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.devices_lan_ip."},{"role":"assistant","content":"Signature: general.devices_lan_ip(self: router) -> {\"type\":\"list\",\"valueType\":\"string\"} | null\nReturns a `list` where each item is a `string` representing a LAN IP address. All devices are within the network of the router and can be reached by using the `ping` method. Some of the devices might be behind a firewall. In case the passed object is not a `router` this method will return `null`.\nExample:\nrouter = get_router\ndevices = devices_lan_ip(router)\nfor ip in devices\n   print(ip + \" found!\")\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.bssid_name."},{"role":"assistant","content":"Signature: general.bssid_name(self: router) -> string | null\nReturns a `string` with the BSSID value of the router. In case the passed object is not a `router` this method will return `null`.\nExample:\nrouter = get_router\nbssid = bssid_name(router)\nprint(\"BSSID: \" + bssid)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.essid_name."},{"role":"assistant","content":"Signature: general.essid_name(self: router) -> string | null\nReturns a `string` with the ESSID value of the router. In case the passed object is not a `router` this method will return `null`.\nExample:\nrouter = get_router\nessid = essid_name(router)\nprint(\"ESSID: \" + essid)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.firewall_rules."},{"role":"assistant","content":"Signature: general.firewall_rules(self: router) -> {\"type\":\"list\",\"valueType\":\"string\"} | null\nReturns a `list` where each item is a `string` containing a firewall rule. In case the passed object is not a `router` this method will return `null`.\nExample:\nrouter = get_router\nrules = firewall_rules(router)\nprint(\"Firewall rules: \" + join(rules, \", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.kernel_version."},{"role":"assistant","content":"Signature: general.kernel_version(self: router) -> string | null\nReturns a `string` with the version of the `kernel_router.so` library. In case the passed object is not a `router` this method will return `null`.\nExample:\nrouter = get_router\nversion = kernel_version(router)\nprint(\"Kernel router version: \" + version)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.local_ip."},{"role":"assistant","content":"Signature: general.local_ip(self: router) -> string | null\nReturns a `string` with the local IP address of the router. In case the passed object is not a `router` this method will return `null`.\nExample:\nrouter = get_router\nlocalIp = local_ip(router)\nprint(\"Local IP: \" + localIp)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.public_ip."},{"role":"assistant","content":"Signature: general.public_ip(self: router) -> string | null\nReturns a `string` with the public IP address of the router. In case the passed object is not a `router` this method will return `null`.\nExample:\nrouter = get_router\npublicIp = public_ip(router)\nprint(\"Public IP: \" + publicIp)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.used_ports."},{"role":"assistant","content":"Signature: general.used_ports(self: router) -> {\"type\":\"list\",\"valueType\":\"port\"} | null\nReturns a `list` where each item is a `port` used inside the router. In case the passed object is not a `router` this method will return `null`.\nExample:\nrouter = get_router\nports = used_ports(router)\nfor port in ports\n   print(\"Port \" + port_number(port) + \" is available!\")\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.ping_port."},{"role":"assistant","content":"Signature: general.ping_port(self: router, port: number) -> port | null\nReturns a `port` that is behind the port `number` provided. In case the `port` does not exist `null` gets returned.\nExample:\nrouter = get_router\nports = used_ports(router)\nfor port in ports\n   pingedPort = ping_port(router, port.port_number)\n   if (pingedPort == null) then continue\n   print(\"Pinged \" + port_number(pingedPort))\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.port_info."},{"role":"assistant","content":"Signature: general.port_info(self: router, port: port) -> string | null\nReturns a `string` with information about the provided port, including details about the running service and its version. For example, the output could be `\"http 1.0.0\"`. If the operation fails, `null` will be returned.\nExample:\nrouter = get_router\nports = used_ports(router)\nfor port in ports\n   info = port_info(router, port)\n   print(info)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.install_service."},{"role":"assistant","content":"Signature: general.install_service(self: service) -> number | string | null\nInstalls the necessary files for the correct functioning of the service and starts it. If the installation is completed successfully, it returns a `number` with the value one. In case of an error, it returns a `string` with details. If the passed object is not a `service` this method will cause a crash.\nExample:\nservice = include_lib(\"/lib/libhttp.so\")\nresult = install_service(service)\nif result == 1 then\n    print \"Successfully installed service\"\nelse\n    print \"Service installation failed: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.start_service."},{"role":"assistant","content":"Signature: general.start_service(self: service) -> number | string | null\nStarts the service and opens its associated `port` on the local machine. The service requires a port forwarded to the router to be accessible from the outside. If the service starts correctly, it returns a `number` with the value one. In case of an error, it returns a `string` with details. If the passed object is not a `service` this method will cause a crash.\nExample:\nservice = include_lib(\"/lib/libhttp.so\")\nresult = start_service(service)\nif result == 1 then\n    print \"Successfully started service\"\nelse\n    print \"Starting service failed: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.stop_service."},{"role":"assistant","content":"Signature: general.stop_service(self: service) -> number | string | null\nStops the service and closes its associated `port` on the local machine. If the service is stopped successfully, it returns a `number` with the value one. If an error occurs during the process, it returns a `string` with details. In some cases, the returned `number` might be zero, indicating that the service removal failed. If the passed object is not a `service` this method will cause a crash.\nExample:\nservice = include_lib(\"/lib/libhttp.so\")\nresult = stop_service(service)\nif result == 1 then\n    print \"Successfully stopped service\"\nelse\n    print \"Stopping service failed: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.host_computer."},{"role":"assistant","content":"Signature: general.host_computer(self: shell) -> computer | null\nReturns a `computer` related to the `shell`. If an invalid `shell` object gets passed this method will return `null`.\nExample:\nshell = get_shell\ncomputer = host_computer(shell)\nprint(\"Computer public IP is: \" + public_ip(computer))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.start_terminal."},{"role":"assistant","content":"Signature: general.start_terminal(self: shell) -> null\nLaunches an active terminal. The terminal's color will change, displaying the IP of the connected shell. Script execution will be stopped upon starting a new terminal, unless this is called from another script that was executed via `shell.launch`. In that case, you will enter the shell after closing your root-level script within that terminal window. Using this method within an SSH encryption process will cause an error to be thrown, preventing further script execution.\nExample:\nstart_terminal(get_shell)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.build."},{"role":"assistant","content":"Signature: general.build(self: shell, pathSource: string, pathBinary: string, allowImport: number) -> string\nCompiles a plain code file provided in the arguments to a binary. On success, the new binary will be available under the provided build folder. The binary name will be the same as the source file just without the file extension. Optionally, an allowImport flag can be set which enables the use of `import_code` on the binary. All provided paths must be absolute. Returns an empty string on success. On failure, it will return a string containing details about the reason for failure. In case any provided values deviate from the defined signature a runtime exception will be thrown.\nExample:\nshell = get_shell\ncomputer = host_computer(shell)\ntouch(computer, home_dir, \"test.src\")\nset_content(File(computer, home_dir + \"/test.src\"), \"print(\"\"hello world\"\")\")\nbuildResult = build(shell, home_dir + \"/test.src\", home_dir + \"/Desktop\")\nif buildResult != \"\" then\n   print(\"There was an error while compiling: \" + buildResult)\nelse\n   print(\"File has been compiled.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.connect_service."},{"role":"assistant","content":"Signature: general.connect_service(self: shell, ip: string, port: number, user: string, password: string, service: string) -> shell | ftpShell | string | null\nReturns a `shell` if the connection attempt to the provided IP was successful. This method can only connect to ports running an SSH or FTP service. SSH services usually run on port 22 and FTP services usually on port 21. Keep in mind to pass the right service value depending on which service is going to be used. By default, it will use SSH as the service. Please note that connecting will leave a log entry. In case of failure, a string is returned containing details. If any provided arguments deviate from the method signature, if this method is run in an SSH encryption process, or if the computer is not connected to the internet, a runtime exception will be thrown.\nExample:\nshell = get_shell\nconnectionResult = connect_service(shell, \"1.1.1.1\", 22, \"test\", \"test\")\nif typeof(connectionResult) != \"shell\" then\n   print(\"There was an error while connecting: \" + connectionResult)\nelse\n   print(\"Connected!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.launch."},{"role":"assistant","content":"Signature: general.launch(self: shell, program: string, params: string) -> string | number\nLaunches the binary located at the provided path. Optionally, parameters can be passed. Returns a `number`. If the launch was successful, the value will be one; otherwise, it will be zero. In some cases, a `string` will be returned containing an error message. If you need to share variables between a launched script and the current process, consider using `get_custom_object`. Note that launching a script is not asynchronous, meaning that the current script will pause its execution until the launched script finishes. This method cannot be used to execute binaries with an EXE extension (GUI interface). If any provided values deviate from the method signature, a runtime exception will be thrown.\nExample:\nshell = get_shell(\"root\", \"test\")\nlaunch(shell, \"/bin/cat\", \"/etc/passwd\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.ping."},{"role":"assistant","content":"Signature: general.ping(self: shell, ip: string) -> string | number | null\nReturns a `number`. If the remote address could be reached the value will be one, zero otherwise. Firewalls do not block ping requests. Passing an invalid ip will cause the method to return a `string` with an error message. If any provided arguments deviate from the method signature a runtime exception will be thrown. If the passed object is a map-like object such as `computer` or `file` but not `shell` this method will return `null`.\nExample:\nshell = get_shell\nisPingable = ping(shell, \"1.1.1.1\")\nif isPingable then\n   print(\"Ping was successful!\")\nelse\n   print(\"Ping failed!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.scp."},{"role":"assistant","content":"Signature: general.scp(self: shell, sourceFile: string, destinationFolder: string, remoteShell: shell) -> number | string | null\nSend a `file` to the `computer` related to the provided `shell`. You require permission to read the `file` on the `computer` from which you are uploading and write permissions in the folder of the `computer` you are trying to upload to. In case of failure, this method will return a `string` with the cause. Otherwise, a `number` with the value one gets returned. If any of the passed arguments deviates from the types of the method signature, `null` will be returned. In case the `string` for sourceFile or destinationFolder is empty, an error will be thrown, preventing further script execution.\nExample:\nshell = get_shell\nremoteShell = connect_service(shell, \"1.1.1.1\", 22, \"test\", \"test\")\nresult = scp(remoteShell, \"/bin/ls\", \"/etc/\", shell)\nif typeof(result) == \"string\" then\n   print(\"There was an error while sending file: \" + result)\nelse\n   print(\"File got sent successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_balance_subwallet."},{"role":"assistant","content":"Signature: general.get_balance_subwallet(self: subWallet) -> number | string | null\nReturns a `number` of coins of a given currency. In case of error, a `string` with the details is returned. In case an object gets passed which is not a `subWallet` this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nprint \"Balance: \" + get_balance_subwallet(subWallet)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.set_info."},{"role":"assistant","content":"Signature: general.set_info(self: subWallet, info: string) -> number | string | null\nStores optional information in the Subwallet for any use. Upon success, a `number` with the value one will be returned. In case of failure, a `string` with details will be returned. If an object is passed that is not a `subWallet`, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nsubWallet = coin.get_subwallet(\"test\")\nresult = subWallet.set_info(\"test\")\nif result == 1 then\n    print \"Subwallet info got set!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_info."},{"role":"assistant","content":"Signature: general.get_info(self: subWallet) -> string | null\nReturns a `string` with the information stored by the coin creator. If an object is passed that is not a `subWallet`, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nprint \"Subwallet info: \" + subWallet.get_info"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.delete_subwallet."},{"role":"assistant","content":"Signature: general.delete_subwallet(self: subWallet) -> string | number | null\nDeletes the account registered in the cryptocurrency. Returns a `number` where one indicates successful deletion and zero indicates failure. In case of certain failures, this method may return a `string` with details. If an object is passed that is not a `subWallet`, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nresult = subWallet.delete\nif result == 1 then\n    print \"Subwallet got deleted!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_user."},{"role":"assistant","content":"Signature: general.get_user(self: subWallet) -> string | null\nReturns a `string` with the username associated with this subwallet. On failure, this method returns a `string` with an error message. If an object is passed that is not a `subWallet`, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nprint \"Subwallet user: \" + subWallet.get_user"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.last_transaction."},{"role":"assistant","content":"Signature: general.last_transaction(self: subWallet) -> {\"type\":\"list\",\"valueType\":\"list\"} | number | string | null\nReturns a `list` with the information of the last transaction. Index 0 is a `string` with the other subWallet. Index 1 is an integer with the amount. Index 2 is a `number` indicating the direction of the transaction (0 for Deposit, 1 for Withdrawal). Index 3 is a `string` indicating the date of the transaction. On failure, this method will either return a `number` with the value zero or a `string` with an error message. If an object is passed that is not a `subWallet`, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\ntransactionItem = subWallet.last_transaction\ndestinationAccount = transactionItem[0]\namount = transactionItem[1]\ndirection = transactionItem[2]\ncompleteDate = transactionItem[3]\nif direction == 0 then\n    print \"Received \" + amount + \" from \" + destinationAccount + \" got completed at the \" + completeDate\nelse\n    print \"Send \" + amount + \" to \" + destinationAccount + \" got completed at the \" + completeDate\nend if "}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.mining."},{"role":"assistant","content":"Signature: general.mining(self: subWallet) -> number | string | null\nStarts the process of mining the cryptocurrency. The process leaves the terminal busy until a coin is mined. On success, this method will return a `number` with the value one. On failure, this method will return a `string` with details. If an object is passed that is not a `subWallet`, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nwhile subWallet.mining == 1\n    print \"Mining...\", true\n    print \"Balance \" + subWallet.get_balance\nend while"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.check_password."},{"role":"assistant","content":"Signature: general.check_password(self: subWallet, password: string) -> number | string | null\nReturns a `number` with the value one if the credentials are correct, otherwise, the value is zero. For some cases, this method will return a `string` with an error message. If an object is passed that is not a `subWallet`, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\npassword = user_input(\"SubWallet password:\", true)\nif subWallet.check_password(password) == 1 then\n    print \"Password is correct!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.wallet_username."},{"role":"assistant","content":"Signature: general.wallet_username(self: subWallet) -> string | null\nReturns a `string` with the name of the `wallet` to which this subwallet belongs. If an object is passed that is not a `subWallet`, this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nprint \"SubWallet username: \" + subWallet.wallet_username"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.list_coins."},{"role":"assistant","content":"Signature: general.list_coins(self: wallet) -> {\"type\":\"list\",\"valueType\":\"string\"} | string | null\nReturns a `list` where each item is a `string` with the names of the coins available in the `wallet`. On failure this method returns a `string` with an error message. If the passed value is not a `wallet` this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nprint \"My wallet is connected to: \" + join(list_coins(wallet), \", \")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_balance."},{"role":"assistant","content":"Signature: general.get_balance(self: wallet, coinName: string) -> number | string | null\nReturns a `number` of coins of a given currency. In case of error, a `string` with the details is returned. Returns a `number` of coins of a given currency. In case of error, a `string` with the details is returned. Any deviation from the method signature will result in a `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nfor coinName in list_coins(wallet)\n    print \"You have \" + get_balance(wallet, coinName) + \" coins of the currency \"\"\" + coinName + \"\"\"\"\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.buy_coin."},{"role":"assistant","content":"Signature: general.buy_coin(self: wallet, coinName: string, coinAmount: number, unitPrice: number, subwalletUser: string) -> number | string\nPublishes a purchase offer indicating the number of coins you wish to buy and the price ($) per unit you are willing to pay. The purchase will be finalized if there is any sale offer with a price less than or equal to the one proposed in the purchase. If there is no eligible offer to sell at that time, the offer to buy will remain publicly visible until a new offer to sell satisfies the requirements. If the publication has been successful, a `number` with the value one is returned. In case of error, a `string` with the details is returned. Any deviation from the method signature will result in a runtime exception preventing further script execution.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nresult = buy_coin(wallet, \"test\", 100, 20, \"test\")\nif result == 1 then\n    print \"Sucessfully created purchase offer!\"\nelse\n    print \"Failed: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.sell_coin."},{"role":"assistant","content":"Signature: general.sell_coin(self: wallet, coinName: string, coinAmount: number, unitPrice: number, subwalletUser: string) -> number | string\nPublishes a sale offer indicating the amount of coins you want to sell and the price ($) per unit you want to assign. The sale will be finalized if there is any purchase offer with a price greater than or equal to that proposed in the sale. If there is no existing offer to buy that matches the requirements at that time, the offer to sell will remain publicly visible until a new offer to buy satisfies the requirements. If the publication has been successful, a `number` with the value one is returned. In case of error, a `string` with the details is returned. Any deviation from the method signature will result in a runtime exception preventing further script execution.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nresult = sell_coin(wallet, \"test\", 100, 20, \"test\")\nif result == 1 then\n    print \"Sucessfully created sell offer!\"\nelse\n    print \"Failed: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_pending_trade."},{"role":"assistant","content":"Signature: general.get_pending_trade(self: wallet, coinName: string) -> string | list | null\nReturns a `list` with the pending sale or purchase offer of this wallet for a certain currency. Index 0 of the `list` represents the type of offer with a `string` (Buy/Sell), index 1 represents the quantity to be sold or bought, and index 2 represents the price per unit. On failure, this method will return a `string` with details. Any deviation from the method signature will result in a `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nresult = get_pending_trade(wallet, \"test\")\nisBuying = result[0] == \"Buy\"\nquantity = result[1]\nunitPrice = result[2]\ncurrentBalance = get_balance(wallet, \"test\")\nif isBuying then\n    print \"After buying was successful your balance will be \" + (quantity * unitPrice + currentBalance)\nelse\n    print \"After selling was successful your balance will be \" + (currentBalance - quantity * unitPrice)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.cancel_pending_trade."},{"role":"assistant","content":"Signature: general.cancel_pending_trade(self: wallet, coinName: string) -> string | null\nCancel any pending offer of a certain coin. On success, an empty `string` will be returned. On failure, a `string` with an error message will be returned. Any deviation from the method signature will result in `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nif cancel_pending_trade(wallet, \"test\") == \"\" then\n    print \"Trade got canceled!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_global_offers."},{"role":"assistant","content":"Signature: general.get_global_offers(self: wallet, coinName: string) -> string | {\"type\":\"map\",\"keyType\":\"string\",\"valueType\":\"list\"} | null\nReturns a `map` with all the offers made by any player of a given currency. The key of the `map` represents the WalletID of the player who has made the offer, and the value of the `map` is a `list` where index 0 represents the type of offer with a `string` (Buy/Sell), index 1 represents the amount to sell or buy, and index 2 represents the price per unit. In case of failure, this method returns a `string` with details. Any deviation from the method signature will result in `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nfor item in get_global_offers(wallet, \"test\")\n    walletId = item.key\n    trade = item.value\n    isBuying = trade[0] == \"Buy\"\n    quantity = trade[1]\n    unitPrice = trade[2]\n    print \"-\" * 10\n    print \"<b>\" + walletId + \"</b>\"\n    if isBuying then\n        print \"<color=green>Is buying</color>\"\n    else\n        print \"<color=yellow>Is selling</color>\"\n    end if\n    print quantity + \" coins with a unit price of \" + unitPrice\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.list_global_coins."},{"role":"assistant","content":"Signature: general.list_global_coins(self: wallet) -> string | {\"type\":\"list\",\"valueType\":\"string\"} | null\nReturns a `list` where each item is a `string` containing the names of all the currencies that exist. In case of failure, this method returns a `string` with details. If the passed value is not a `wallet` this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nprint \"All existing coins: \" join(list_global_coins(wallet), \", \")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.show_nodes."},{"role":"assistant","content":"Signature: general.show_nodes(self: wallet, coinName: string) -> string | number | null\nReturns a `number` representing the count of devices mining a specific coin for the same `wallet`. In case of an error, a `string` with details is returned. Any deviation from the method signature will result in `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nprint \"Active miners: \" show_nodes(wallet, \"test\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.reset_password."},{"role":"assistant","content":"Signature: general.reset_password(self: wallet, newPassword: string) -> number | string | null\nChange the password of the wallet. Only the account owner can perform this action. If the process is completed successfully, a `number` with the value one will be returned. In case of an error, a `string` with details will be returned. Any deviation from the method signature will result in `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nif reset_password(wallet, \"test\") == 1 then\n    print \"You got a new password!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_pin."},{"role":"assistant","content":"Signature: general.get_pin(self: wallet) -> string | null\nReturns a `string` with a PIN that refreshes every few minutes. This PIN is used to obtain an account in cryptocurrency services. If the passed value is not a `wallet` this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nmyShell = get_shell\nmyComputer = host_computer(myShell)\nwallet = login_wallet(blockchain, \"test\", \"test\")\ntouch(myComputer, \"/root\", \"pin_launch.src\")\nmyFile = File(myComputer, \"/root/pin_launch.src\")\nset_content(myFile, \"\n    blockchain = include_lib(\"\"/lib/blockchain.so\"\")\n    myShell = get_shell\n    myComputer = host_computer(myShell)\n    wallet = login_wallet(blockchain, \"\"test\"\", \"\"test\"\")\n    if params[0] == get_pin(wallet) then\n        get_custom_object.secret = \"\"The answer is 42\"\"\n    else\n        get_custom_object.secret = \"\"The answer is 10053\"\"\n    end if\n\")\nbuild(myShell, \"/root/pin_launch.src\", \"/root\")\ndelete(myFile)\nlaunch(myShell, \"/root/pin_launch\", get_pin(wallet))\nprint \"The secret: \" + get_custom_object.secret"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.delete_mail."},{"role":"assistant","content":"Signature: general.delete_mail(self: metaMail, mailId: string) -> number | string | null\nDelete the email corresponding to the provided email ID. Returns a `number` with the value one if the email removal was successful. Otherwise, a `string` with an error message will be returned. If any of the provided values deviate from the method signature, it will return `null`.\nExample:\nmetaMail = mail_login(user_mail_address, \"test\")\nmails = fetch(metaMail)\nresults = []\nfor mail in mails\n   segments = split(mail, char(10))\n   mailId = segments[2][8:]\n   print(delete_mail(metaMail, mailId))\nend for\nprint(\"Deleted every mail!\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.fetch."},{"role":"assistant","content":"Signature: general.fetch(self: metaMail) -> {\"type\":\"list\",\"valueType\":\"string\"} | string | null\nReturns a `list` where each item is a `string` containing mail id, from, subject and a small preview of the content consisting of the first 125 characters. In case of failure a `string` with details will be returned. If an invalid `metaMail` object gets passed this method will return `null`.\nExample:\nmetaMail = mail_login(user_mail_address, \"test\")\nmails = fetch(metaMail)\nresults = []\nfor mail in mails\n   segments = split(mail, char(10))\n   item = {}\n   item.mailId = segments[2][8:]\n   item.from = segments[3][6:]\n   item.subject = segments[4][9:]\n   item.preview = segments[5:]\n   push(results, item)\nend for\nprint(results)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.read."},{"role":"assistant","content":"Signature: general.read(self: metaMail, mailId: string) -> string | null\nReturns a `string` containing the content of a mail related to the provided mail id. The mail id argument can be obtained with `fetch`. In case the mail cannot be found this method will return \"Mail not found\". If any of the provided values deviate from the method signature, it will return `null`.\nExample:\nmetaMail = mail_login(user_mail_address, \"test\")\nmails = fetch(metaMail)\nresults = []\nfor mail in mails\n   segments = split(mail, char(10))\n   mailId = segments[2][8:]\n   print(read(metaMail, mailId))\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.send."},{"role":"assistant","content":"Signature: general.send(self: metaMail, emailAddress: string, subject: string, message: string) -> string | number | null\nSend a new mail to the provided email address. Keep in mind that the subject can not exceed 128 characters and the message size should not exceed 2500 characters. Returns a `number` with the value one if the mail has been sent correctly, otherwise returns a `string` with an error. If any of the provided values deviate from the method signature, it will return `null`.\nExample:\nmetaMail = mail_login(user_mail_address, \"test\")\nresult = send(metaMail, user_mail_address, \"test subject\", \"test message\")\nif typeof(result) == \"string\" then\n   print(\"There was an error while sending mail: \" + result)\nelse\n   print(\"Mail got send successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.port_number."},{"role":"assistant","content":"Signature: general.port_number(self: port) -> number | null\nReturns the `number` which is used for the port. In case the passed object is not a `port` this method will return `null`.\nExample:\nrouter = get_router\nports = used_ports(router)\nfor port in ports\n   print(\"Port \" + port_number(port) + \" is in use!\")\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.is_closed."},{"role":"assistant","content":"Signature: general.is_closed(self: port) -> number | null\nReturns a `number`, where one indicates that the specified `port` is closed and zero indicates that the port is open. In case the passed object is not a `port` this method will return `null`.\nExample:\nrouter = get_router\nports = used_ports(router)\nfor port in ports\n   state = \"open\"\n   if (is_closed(port)) then state = \"closed\"\n   print(\"Port \" + port_number(port) + \" is \" + state + \"!\")\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_lan_ip."},{"role":"assistant","content":"Signature: general.get_lan_ip(self: port) -> string | null\nReturns a `string` containing the local IP address of the computer to which the port is pointing. In case the passed object is not a `port` this method will return `null`.\nExample:\nrouter = get_router\nports = used_ports(router)\nfor port in ports\n   print(\"Port \" + port_number(port) + \" is pointed to \" + get_lan_ip(port) + \"!\")\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.reset_ctf_password."},{"role":"assistant","content":"Signature: general.reset_ctf_password(newPassword: string) -> number | string\nResets the password of your CTF account. Returns a `number` with the value one if resetting was successful; otherwise, it will return a `string` containing the reason for failure.\nExample:\nreset_ctf_password(\"mysafepassword\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.funcRef."},{"role":"assistant","content":"Signature: general.funcRef() -> {\"type\":\"map\",\"keyType\":\"string\",\"valueType\":\"function\"}\nReturns a `map` which enables to extend function references with custom methods.\nExample:\nfuncRef.signature = function\n   return str(@self)\nend function\nprint (@print).signature"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.list."},{"role":"assistant","content":"Signature: general.list() -> {\"type\":\"map\",\"keyType\":\"string\",\"valueType\":\"function\"}\nReturns a `map` which enables to extend list types with custom methods.\nExample:\nlist.map = function(callback)\n   newList = []\n   for item in self\n      newList.push(callback(item, __item_idx))\n   end for\n   return newList\nend function\nmyMapFunction = function(item, index)\n   print \"Mapping value at index: \" + index\n   return item.myValue\nend function\nprint [{ \"myValue\": 24 }].map(@myMapFunction)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.map."},{"role":"assistant","content":"Signature: general.map() -> {\"type\":\"map\",\"keyType\":\"string\",\"valueType\":\"function\"}\nReturns a `map` which enables to extend map types with custom methods.\nExample:\nmap.extend = function(value)\n  for item in value\n    self[item.key] = item.value\n  end for\n  return self\nend function\ntest = {\"123\":123}\ntest.extend({\"bar\": \"foo\"})\nprint \"My extended value: \" + test.bar"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.number."},{"role":"assistant","content":"Signature: general.number() -> {\"type\":\"map\",\"keyType\":\"string\",\"valueType\":\"function\"}\nReturns a `map` which enables to extend number types with custom methods.\nExample:\nnumber.bitwise = function(operator, right)\n  return bitwise(operator, self, right)\nend function\nprint (1234).bitwise(\">>\", 1)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.string."},{"role":"assistant","content":"Signature: general.string() -> {\"type\":\"map\",\"keyType\":\"string\",\"valueType\":\"function\"}\nReturns a `map` which enables to extend string types with custom methods.\nExample:\nstring.color = function(colorValue = \"red\")\n  return \"<color=\" + colorValue + \">\" + self + \"</color>\"\nend function\nprint \"My text: \".color + \"Hello world\".color(\"yellow\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.scan_debuglib."},{"role":"assistant","content":"Signature: general.scan_debuglib(self: debugLibrary) -> string | null\nScans the library in debug mode to identify potential code errors that may lead to vulnerabilities. If issues are detected, the relevant code snippets are printed. In case of an error, a `string` containing the error message is returned. If an invalid `debugLibrary` object is passed, this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\ndebugLib = debug_tools(metaLib, \"test\", \"test\")\nprint(\"Debug Library result: \" + scan_debuglib(debugLib))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.apply_patch."},{"role":"assistant","content":"Signature: general.apply_patch(self: debugLibrary, path: string) -> string | null\nApplies a patch containing corrected code to the specified text file at the provided path. Returns a `string` with the result of the operation. If any of the provided values deviates from the defined types in the method signature, this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\ndebugLib = debug_tools(metaLib, \"test\", \"test\")\nprint(\"Path result: \" + apply_patch(debugLib, \"/etc/passwd\"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.unit_testing."},{"role":"assistant","content":"Signature: general.unit_testing(self: debugLibrary, errorLines: [object Object]) -> string | null\nConducts automated tests on the specified lines of code. If potential vulnerabilities are detected due to errors in these lines, this method will print partial objects that could be obtained by exploiting the vulnerability, along with the affected memory zone and detailed vulnerability information. In case of failure, this function returns a `string` with an error message. If any of the provided values deviates from the defined types in the method signature, this method will return `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = load(metax, \"/lib/init.so\")\ndebugLib = debug_tools(metaLib, \"test\", \"test\")\nprint(\"Unit test results: \" + unit_testing(debugLib, [1, 2, 3]))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.camera_link_system."},{"role":"assistant","content":"Signature: general.camera_link_system(self: trafficNet) -> number | string | null\nAccesses the traffic camera system, opening a window with controls to switch between different cameras. If the window opens successfully, this method returns a `number` with the value one. In case of an error, it returns a `string` with details. If an invalid traffic net object gets passed this method will return `null`.\nExample:\nlibTraffic = include_lib(\"/lib/libtrafficnet.so\")\nlinkSystemResult = camera_link_system(libTraffic)\nif linkSystemResult == 1 then\n    print(\"Initiated camera broadcast!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.locate_vehicle."},{"role":"assistant","content":"Signature: general.locate_vehicle(self: trafficNet, licensePlate: string, password: string) -> number | string | null\nPerforms a search for the specified license plate to locate the vehicle. If the vehicle is visible on any camera, the viewer will switch to the camera currently displaying it and return a `number` with the value one. If the vehicle cannot be located or the license plate is incorrect, a `string` indicating the error is returned. If any of the provided values deviates from the defined types in the method signature, this method will return `null`.\nExample:\nlibTraffic = include_lib(\"/lib/libtrafficnet.so\")\ncamera_link_system(libTraffic)\nvehicleSearchResult = locate_vehicle(libTraffic, \"1L2M3N\", \"pass\")\nif vehicleSearchResult == 1 then\n    print(\"Found vehicle!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.get_credentials_info."},{"role":"assistant","content":"Signature: general.get_credentials_info(self: trafficNet) -> string | null\nReturns string which contains job and name of a NPC. If an error occurs, a `string` with details is returned. If an invalid `trafficNet` object is passed, this method will return `null`.\nExample:\nlibTraffic = include_lib(\"/lib/libtrafficnet.so\")\nprint(get_credentials_info(libTraffic))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.model."},{"role":"assistant","content":"Signature: general.model(self: smartAppliance) -> string | null\nReturns a `string` with the appliance model ID. If the passed object is not a `smartAppliance` this method will return `null`.\nExample:\nlibSmartapp = include_lib(\"/lib/libsmartappliance.so\")\nmodelResult = model(libSmartapp)\nif modelResult.matches(\"^[A-Z]+$\") then\n    print(\"Model is: \" + modelResult)\nelse\n    print(\"Model couldn't be determined due to: \" + modelResult)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.override_settings."},{"role":"assistant","content":"Signature: general.override_settings(self: smartAppliance, power: number, temperature: number) -> string | number | null\nOverrides the power and temperature settings of the appliance. If successful, it returns a `number` with the value one; otherwise, it returns a `string` detailing the error. If any arguments deviate from the defined signature, this method will return `null`.\nExample:\nlibSmartapp = include_lib(\"/lib/libsmartappliance.so\")\noverrideResult = override_settings(libSmartapp, 1000, 20)\nif overrideResult == 1 then\n    print(\"Override was successful!\")\nelse\n    print(\"Override failed due to: \" + overrideResult)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain general.set_alarm."},{"role":"assistant","content":"Signature: general.set_alarm(self: smartAppliance, enable: number) -> string | number | null\nActivates or deactivates the sound alarm indicating any appliance malfunction. If the operation is successful, a `number` with the value one is returned; otherwise, a `string` containing error details is returned. If any arguments deviate from the defined signature, this method will return `null`.\nExample:\nlibSmartapp = include_lib(\"/lib/libsmartappliance.so\")\nsetAlarmResult = set_alarm(libSmartapp, false)\nif setAlarmResult == 1 then\n    print(\"Alarm was disabled successfully!\")\nelse\n    print(\"Disabling alarm failed due to: \" + setAlarmResult)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the list object."},{"role":"assistant","content":"Create a `list` with square brackets. Then iterate over the `list` with for, or pull out individual items with a 0-based index in square brackets. A negative index counts from the end. Get a slice (subset) of a `list` with two indices, separated by a colon."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.remove."},{"role":"assistant","content":"Signature: list.remove(index: number) -> null\nRemoves an item from the `list` with the provided index. Due to the removal the `list` will get mutated. If the passed index is `null` this method will throw an error preventing further script execution.\nExample:\nmyList = [1, 42, 3]\nmyList.remove(1)\nprint(\"This list does not contain the answer to everything: \" + myList.split(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.insert."},{"role":"assistant","content":"Signature: list.insert(index: number, value: any) -> list\nInserts a value into the `list` at the index provided. Due to the insertion the `list` will get mutated. Returns the mutated `list`. If the passed index is not a `number`, this method throws an error, preventing further script execution.\nExample:\nmyList = [1, 3]\nmyList.insert(1, 42)\nprint(\"This list does contain the answer to everything: \" + myList.split(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.push."},{"role":"assistant","content":"Signature: list.push(value: any) -> list\nAppends a value to the end of the `list`. This operation will mutate the `list`. Additionally, this method will return the updated `list`. However, it throws an error if you attempt to push a value into itself or into a map-like object such as a `file`, halting further script execution.\nExample:\nmyList = [1, 3]\nmyList.push(42)\nprint(\"This list does contain the answer to everything: \" + myList.split(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.pop."},{"role":"assistant","content":"Signature: list.pop() -> any\nReturns and removes the last item in the `list`. This operation will mutate the `list`. If the `map` is empty, this method will return `null`.\nExample:\nmyList = [1, 3, 42]\nanswer = myList.pop\nprint(\"Answer to everything: \" + answer)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.pull."},{"role":"assistant","content":"Signature: list.pull() -> any\nReturns and removes the first item in the `list`.  This operation will mutate the `list`. If the `map` is empty, this method will return `null`.\nExample:\nmyList = [42, 1, 3]\nanswer = myList.pull\nprint(\"Answer to everything: \" + answer)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.shuffle."},{"role":"assistant","content":"Signature: list.shuffle() -> null\nShuffles all values in the `list`. This operation will mutate the `list`.\nExample:\nmyList = [42, 1, 3]\nmyList.shuffle\nprint(\"New list order: \" + myList.split(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.reverse."},{"role":"assistant","content":"Signature: list.reverse() -> null\nReverses the order of all values in the `list`. This operation will mutate the `list`.\nExample:\nmyList = [42, 1, 3]\nmyList.reverse\nprint(\"Reversed list: \" + myList.split(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.sum."},{"role":"assistant","content":"Signature: list.sum() -> number\nReturns sum of all values inside the `list`. Any non-numeric values will be considered a zero.\nExample:\nmyList = [42, 1, 3]\nsum = myList.sum\nprint(\"Sum of all items in list: \" + sum)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.hasIndex."},{"role":"assistant","content":"Signature: list.hasIndex(index: number) -> number\nReturns a `number`. If the provided index is available in the `list`, the value will be one. Otherwise, the value will be zero.\nExample:\nmyList = [42, 1, 3]\ncontainsIndex = myList.hasIndex(1)\nif containsIndex then\n   print(\"List contains index of 1.\")\nelse\n   print(\"List does not contain index of 1.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.indexOf."},{"role":"assistant","content":"Signature: list.indexOf(value: any, offset: number?) -> number | null\nReturns a `number` which indicates the first matching index of the provided value inside the `list`. Optionally a start index can be provided. In case the value does not exist inside the `list` a `null` gets returned.\nExample:\nmyList = [42, 1, 3]\nindex = myList.indexOf(42)\nif index != null then\n   print(\"The answer for everything is at the following index: \" + index)\nelse\n   print(\"No answer for everything found.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.sort."},{"role":"assistant","content":"Signature: list.sort(key: any, ascending: number) -> list\nSorts the values of a `list` alphanumerically. This operation mutates the original `list`. Optionally, a key can be provided, which is used if the items are `map`s or `list`s. Finally, this method returns the updated `list`.\nExample:\nmyList = [{ \"key\": 42 }, { \"key\": 2 }, { \"key\": 1 }]\nmyList.sort(\"key\")\nprint(myList)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.join."},{"role":"assistant","content":"Signature: list.join(delimiter: string) -> string\nReturns a concatenated `string` containing all stringified values inside the `list`. These values will be separated via the provided separator. In case the `list` exceeds `16777215L` items or the delimiter exceeds 128 characters, this method will throw an error, interrupting further script execution.\nExample:\nmyList = [42, 1, 3]\nprint(myList.join(\" .-*'*-. \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.indexes."},{"role":"assistant","content":"Signature: list.indexes() -> {\"type\":\"list\",\"valueType\":\"number\"}\nReturns a `list` containing all available indexes.\nExample:\nmyList = [42, 1, 3]\nfor i in myList.indexes\n   print(myList[i])\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.len."},{"role":"assistant","content":"Signature: list.len() -> number\nReturns a `number` representing the count of values inside the `list`.\nExample:\nmyList = [42, 1, 3]\nprint(\"myList contains \" + myList.len + \" items\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.values."},{"role":"assistant","content":"Signature: list.values() -> list\nReturns a `list` containing all available values. Note that this will not create a copy of the original `list`. The returned instance will the same as original `list`, so any mutations made to the returned `list` will also affect the original one.\nExample:\nmyList = [42, 1, 3]\nfor v in myList.values\n   print(v)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain list.replace."},{"role":"assistant","content":"Signature: list.replace(oldVal: any, newVal: any, maxCount: number?) -> list\nReturns updated `list` where each value matching with the provided replace argument gets replaced. This operation will mutate the `list`.\nExample:\nmyList = [1, 2, 2, 7]\nmyList.replace(2, 3)\nprint(myList.join(\"\"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the map object."},{"role":"assistant","content":"A `map` is a set of values associated with unique keys. Create a `map` with curly braces; get or set a single value with square brackets. Keys and values may be any type."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.remove."},{"role":"assistant","content":"Signature: map.remove(key: string) -> number\nRemoves an item from the `map` with the provided key. Due to the removal, the `map` will get mutated. If the value is removed successfully, this method will return a `number` with the value one. If the removal fails, the value will be zero. Passing any map-like object, such as a file or computer, will cause an error to be thrown, stopping further script execution.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\nmyMap.remove(\"answer\")\nprint(myMap)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.push."},{"role":"assistant","content":"Signature: map.push(key: any) -> map\nAdds the value 1 to the provided key. This operation will mutate the `map`. The updated `map` will be returned. However, it throws an error if you attempt to push a value into itself or into a map-like object such as a `file`, halting further script execution. If the passed key is `null` an error will be thrown as well.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\nmyMap.push(\"answer\")\nprint(myMap.answer)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.pull."},{"role":"assistant","content":"Signature: map.pull() -> any\nReturns and removes the first item in the `map`. This operation will mutate the `map`. Passing a map-like object such as `file` or `computer` will result in an error, interrupting further script execution. If the `map` is empty, this method will return `null`.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\nprint(myMap.pull)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.pop."},{"role":"assistant","content":"Signature: map.pop() -> any\nReturns and removes the first item in the `map`. This operation will mutate the `map`. Passing a map-like object such as `file` or `computer` will result in an error, interrupting further script execution. If the `map` is empty, this method will return `null`.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\nprint(myMap.pop)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.shuffle."},{"role":"assistant","content":"Signature: map.shuffle() -> null\nShuffles all values in the `map`. This operation will mutate the `map`.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\nmyMap.shuffle\nprint(myMap)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.sum."},{"role":"assistant","content":"Signature: map.sum() -> number\nReturns sum of all values inside the `map`. Any non-numeric values will be considered a zero.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\nsum = myMap.sum\nprint(\"Sum of all items in map: \" + sum)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.hasIndex."},{"role":"assistant","content":"Signature: map.hasIndex(key: any) -> number\nReturns a `number`. If the provided key is available in the `map`, the value will be one. Otherwise, the value will be zero.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\ncontainsIndex = myList.hasIndex(\"answer\")\nif containsIndex then\n   print(\"Map contains the answer.\")\nelse\n   print(\"Map does not contain the answer.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.indexOf."},{"role":"assistant","content":"Signature: map.indexOf(value: any) -> any\nReturns a value which can be of any type since `map` keys can be of any type. In case the value does not exist inside the `map`, `null` is returned.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\nkey = myList.indexOf(42)\nif key != null then\n   print(\"Map contains the answer.\")\nelse\n   print(\"Map does not contain the answer.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.indexes."},{"role":"assistant","content":"Signature: map.indexes() -> list\nReturns a `list` containing all available keys. Keys can be of any type.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\nfor key in myMap.indexes\n   print(myMap[key])\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.len."},{"role":"assistant","content":"Signature: map.len() -> number\nReturns a `number` representing the count of items inside the `map`.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\nprint(\"myMap contains \" + myMap.len + \" items\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.values."},{"role":"assistant","content":"Signature: map.values() -> list\nReturns a `list` containing all available values within `map`.\nExample:\nmyMap = { \"answer\": 42, \"bar\": 23, \"foo\": \"moo\" }\nfor value in myMap.values\n   print(value)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain map.replace."},{"role":"assistant","content":"Signature: map.replace(oldVal: any, newVal: any, maxCount: number?) -> map\nReturns updated `map` where each value matching with the provided replace argument gets replaced. This operation will mutate the `map`. In case this method gets used on a map-like object such as `file` this method will throw a runtime error.\nExample:\nmyObject = { \"answer\": 45 }\nmyObject.replace(45, 42)\nprint(myObject.answer)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the meta-lib object."},{"role":"assistant","content":"A `metaLib` object can be obtained by either using [load](#METAXPLOIT_LOAD) or [dump_lib](#NETSESSION_DUMP_LIB). The `classID` used for this object is `\"MetaLib\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain meta-lib.overflow."},{"role":"assistant","content":"Signature: meta-lib.overflow(memoryAddress: string, unsecZone: string, optArgs: string) -> string | number | shell | computer | file | null\nExploits vulnerabilities. The returned value can be of various data types. Therefore, using `typeof` is advisable. `optArgs` are required when changing a password or obtaining a `computer` via a router. It should be the desired password or LAN IP, respectively. Change password, traffic light and firewall disable exploits will return a `number`, where the value is either one or zero. One indicates success while zero indicates failure. Shell, computer, and file exploits either return an instance of their type or `null`. Providing values that deviate from the defined signature will cause a runtime exception to be thrown.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\nscanResult = metax.scan(metaLib)\ntarget = scanResult[0]\nscanAddress = metax.scan_address(metaLib, target)\nsegments = scanAddress.split(\"Unsafe check: \")\nexploit = null\n for segment in segments\n   hasRequirement = segment.indexOf(\"*\") != null\n   if (not hasRequirement) then\n      labelStart = segment.indexOf(\"<b>\")\n      labelEnd = segment.indexOf(\"</b>\")\n      exploit = segment[labelStart + 3: labelEnd]\n   end if\nend for\nif (exploit) then\n   print(\"Exploiting... \" + target + \":\" + exploit)\n   print(metaLib.overflow(target, exploit))\nelse\n   print(\"No exploit found with zero requirements\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain meta-lib.version."},{"role":"assistant","content":"Signature: meta-lib.version() -> string\nReturns a `string` containing the version number of the library. An example of a version number would be `\"1.0.0\"`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\nprint(\"Init.so version: \" + metaLib.version)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain meta-lib.lib_name."},{"role":"assistant","content":"Signature: meta-lib.lib_name() -> string\nReturns a `string` containing the name of the library. An example of a name would be `\"init.so\"`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\nprint(\"Name for library is: \" + metaLib.lib_name)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain meta-lib.debug_tools."},{"role":"assistant","content":"Signature: meta-lib.debug_tools(user: string, password: string) -> string | debugLibrary | null\nReturns a library in debug mode as a `debugLibrary` object. A valid Neurobox engineer's username and password are required to access this mode. If successful, the `debugLibrary` object is returned; in case of an error, a `string` with details is provided. Passing values that deviate from the defined signature will result in `null`.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\ndebugLib = metaLib.debug_tools(\"test\", \"test\")\nif typeof(debugLib) == \"debugLibrary\" then\n   print(\"Received debug libary object!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain meta-lib.is_patched."},{"role":"assistant","content":"Signature: meta-lib.is_patched(getdate: number) -> number | string | null\nReturns by default a number indicating whether the library has been patched. A value of one indicates that the library has been patched, while zero indicates that it has not. If the getdate parameter is set to `true`, the function will return a `string` containing the date of the last patch. The data format is as follows: `\"dd/MM/yyyy\"`. Additionally if there is any error the return value will be a `string`. Providing values that deviate from the defined signature will cause `null` to be returned.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\nisPatchedResult = metaLib.is_patched\nif isPatchedResult == 1 then\n   print(\"init.so has been patched!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the meta-mail object."},{"role":"assistant","content":"A `MetaMail` object can be obtained by using [mail_login](#GENERAL_MAIL_LOGIN). The `classID` used for this object is `\"MetaMail\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain meta-mail.delete."},{"role":"assistant","content":"Signature: meta-mail.delete(mailId: string) -> number | string | null\nDelete the email corresponding to the provided email ID. Returns a `number` with the value one if the email removal was successful. Otherwise, a `string` with an error message will be returned. If the provided mailId is anything other than a `string` this method will return `null`.\nExample:\nmetaMail = mail_login(user_mail_address, \"test\")\nmails = metaMail.fetch\nresults = []\nfor mail in mails\n   segments = mail.split(char(10))\n   mailId = segments[2][8:]\n   print(metaMail.delete(mailId))\nend for\nprint(\"Deleted every mail!\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain meta-mail.fetch."},{"role":"assistant","content":"Signature: meta-mail.fetch() -> {\"type\":\"list\",\"valueType\":\"string\"} | string\nReturns a `list` where each item is a `string` containing mail id, from, subject and a small preview of the content consisting of the first 125 characters. If there is any issue a `string` will be returned with details.\nExample:\nmetaMail = mail_login(user_mail_address, \"test\")\nmails = metaMail.fetch\nresults = []\nfor mail in mails\n   segments = mail.split(char(10))\n   item = {}\n   item.mailId = segments[2][8:]\n   item.from = segments[3][6:]\n   item.subject = segments[4][9:]\n   item.preview = segments[5:]\n   results.push(item)\nend for\nprint(results)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain meta-mail.read."},{"role":"assistant","content":"Signature: meta-mail.read(mailId: string) -> string | null\nReturns a `string` containing the content of a mail related to the provided mail id. The mail id argument can be obtained with `fetch`. In case the mail cannot be found this method will return \"Mail not found\". If the provided mailId is not a `string`, this method will return `null`.\nExample:\nmetaMail = mail_login(user_mail_address, \"test\")\nmails = metaMail.fetch\nresults = []\nfor mail in mails\n   segments = mail.split(char(10))\n   mailId = segments[2][8:]\n   print(metaMail.read(mailId))\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain meta-mail.send."},{"role":"assistant","content":"Signature: meta-mail.send(emailAddress: string, subject: string, message: string) -> string | number | null\nSend a new mail to the provided email address. Keep in mind that the subject can not exceed 128 characters and the message size should not exceed 2500 characters. Returns a `number` with the value one if the mail has been sent correctly, otherwise returns a `string` with an error. If any of the provided values deviate from the method signature, it will return `null`.\nExample:\nmetaMail = mail_login(user_mail_address, \"test\")\nresult = metaMail.send(user_mail_address, \"test subject\", \"test message\")\nif typeof(result) == \"string\" then\n   print(\"There was an error while sending mail: \" + result)\nelse\n   print(\"Mail got send successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the metaxploit object."},{"role":"assistant","content":"A `metaxploit` object can be obtained by using [include_lib](#GENERAL_INCLUDE_LIB). The `classID` used for this object is `\"MetaxploitLib\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain metaxploit.load."},{"role":"assistant","content":"Signature: metaxploit.load(path: string) -> metaLib | null\nReturns a `metaLib` object for the provided path to the library binary. Keep in mind that this can only be used on library files. On failure, this method will return `null`. If the provided path is empty, this method will throw a runtime exception, preventing further script execution.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nlibFolder = get_shell.host_computer.File(\"/lib\")\nfor file in libFolder.get_files\n   metaLib = metax.load(file.path)\n   print(\"Library: \" + metaLib.lib_name + \" - \" + metaLib.version)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain metaxploit.net_use."},{"role":"assistant","content":"Signature: metaxploit.net_use(ip: string, port: number) -> netSession | null\nReturns a `netSession` object for the provided IP address and port. Note that if the port is set to zero, it will return a `netSession` related to the kernel router. The main purpose of this method is to gain a `netSession` and then use `dump_lib` to receive a `metaLib` object to exploit vulnerabilities. In case of failure, this method will return `null`. If this method is used within an SSH encryption process or with disabled internet, or if an invalid target IP is provided, this method will throw a runtime exception.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = get_router(\"1.1.1.1\").used_ports\nfor port in ports\n   netSession = metax.net_use(\"1.1.1.1\", port.port_number)\n   metaLib = netSession.dump_lib\n   print(\"Library: \" + metaLib.lib_name + \" - \" + metaLib.version + \" on port \" + port.port_number)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain metaxploit.rshell_client."},{"role":"assistant","content":"Signature: metaxploit.rshell_client(ip: string, port: number, processName: string) -> string | number | null\nLaunches a process on the victim's `computer`, silently attempting to continuously connect in the background to the specified address and port. For the reverse shell to run successfully, the `rshell` service must be installed, and the port forward must be configured correctly on the machine where the server is waiting for the victim's connection. If the launch was successful, a `number` with the value one will be returned. In case of failure, a `string` with details will be returned.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetax.rshell_client(\"1.1.1.1\", 1222, \"bgprocess\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain metaxploit.rshell_server."},{"role":"assistant","content":"Signature: metaxploit.rshell_server() -> string | {\"type\":\"list\",\"valueType\":\"shell\"}\nThis method returns a `list` of `shell` objects that have been reverse shell connected to this computer. To manage the connections received, the `rshell` service must be installed on the machine that receives the victims' connections. In case of failure a `string` will be returned with details.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nshells = metax.rshell_server\nfirstShell = shells[0]\nfirstShell.host_computer.File(\"/\").chmod(\"o-wrx\", true)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain metaxploit.scan."},{"role":"assistant","content":"Signature: metaxploit.scan(metaLib: metaLib) -> {\"type\":\"list\",\"valueType\":\"string\"} | null\nReturns a `list` where each item is a `string` representing a memory area which has vulnerabilities related to the provided library. These memory areas can be used to make further scans via `scan_address`. In case of failure, this method returns `null` instead. An example of a memory area would be \"0x7BFC1EAA\". Using this method within a SSH encryption process will throw a runtime exception.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\nscanResult = metax.scan(metaLib)\nfor area in scanResult\n   print(\"Memory area containg vulnerability: \" + area)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain metaxploit.scan_address."},{"role":"assistant","content":"Signature: metaxploit.scan_address(metaLib: metaLib, memoryAddress: string) -> string | null\nReturns a `string` containing information about each vulnerability in the provided library and memory area. In case the scanning fails this method will return `null`. Using this method within a SSH encryption process will throw a runtime exception.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nmetaLib = metax.load(\"/lib/init.so\")\nscanResult = metax.scan(metaLib)\nscanAddress = metax.scan_address(metaLib, scanResult[0])\nsegments = scanAddress.split(\"Unsafe check: \")[1:]\nexploits = []\nfor segment in segments\n   labelStart = segment.indexOf(\"<b>\")\n   labelEnd = segment.indexOf(\"</b>\")\n   exploits.push(segment[labelStart + 3: labelEnd])\nend for\nprint(\"Available vulnerabilities: \" + exploits.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain metaxploit.sniffer."},{"role":"assistant","content":"Signature: metaxploit.sniffer(saveEncSource: number) -> string | null\nThe terminal listens to the network packets of any connection that passes through the computer. When any connection information gets captured, it will print a `string` with the obtained data. In case saving of encryption source is enabled it will download the source code of the script responsible for encryption. In case the operation fails this method will return `null`. Using this method within a SSH encryption process will throw a runtime exception.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nresult = metax.sniffer\nprint(result)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the net-session object."},{"role":"assistant","content":"A `netSession` object can be obtained by using [net_use](#METAXPLOIT_NET_USE). The `classID` used for this object is `\"NetSession\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain net-session.dump_lib."},{"role":"assistant","content":"Signature: net-session.dump_lib() -> metaLib\nReturns the `metaLib` associated with the remote service. For example if the `metaxpoit` method `net_use` was used on a ssh port it will return the `metaLib` related to the ssh service. In case the port was zero is will return a `metaLib` related to the kernel router.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = get_router(\"1.1.1.1\").used_ports\nnetSession = metax.net_use(\"1.1.1.1\", ports[0].port_number)\nmetaLib = netSession.dump_lib\nprint(\"Library: \" + metaLib.lib_name + \" - \" + metaLib.version + \" on port \" + ports[0].port_number)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain net-session.get_num_conn_gateway."},{"role":"assistant","content":"Signature: net-session.get_num_conn_gateway() -> number\nReturns the number of devices using this router as a gateway. If you obtained your `netSession` from a computer, it will fetch and return the value from its gateway router.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = get_router(\"1.1.1.1\").used_ports\nnetSession = metax.net_use(\"1.1.1.1\", ports[0].port_number)\nprint(\"Gateway clients: \" + netSession.get_num_conn_gateway)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain net-session.get_num_portforward."},{"role":"assistant","content":"Signature: net-session.get_num_portforward() -> number\nReturns the number of ports forwarded by this router. If you obtained your `netSession` from a computer, it will fetch and return the value from its gateway router.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = get_router(\"1.1.1.1\").used_ports\nnetSession = metax.net_use(\"1.1.1.1\", ports[0].port_number)\nprint(\"Port forwards: \" + netSession.get_num_portforward)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain net-session.get_num_users."},{"role":"assistant","content":"Signature: net-session.get_num_users() -> number\nReturns the number of user accounts on the system.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = get_router(\"1.1.1.1\").used_ports\nnetSession = metax.net_use(\"1.1.1.1\", ports[0].port_number)\nprint(\"User accounts: \" + netSession.get_num_users)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain net-session.is_any_active_user."},{"role":"assistant","content":"Signature: net-session.is_any_active_user() -> number\nReturns a `number`. If there is an active user on the system it will be one. Otherwise, it will be zero.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = get_router(\"1.1.1.1\").used_ports\nnetSession = metax.net_use(\"1.1.1.1\", ports[0].port_number)\nprint(\"User Active?: \" + netSession.is_any_active_user)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain net-session.is_root_active_user."},{"role":"assistant","content":"Signature: net-session.is_root_active_user() -> number\nReturns a `number`. If there is an active root on the system it will be one. Otherwise, it will be zero.\nExample:\nmetax = include_lib(\"/lib/metaxploit.so\")\nports = get_router(\"1.1.1.1\").used_ports\nnetSession = metax.net_use(\"1.1.1.1\", ports[0].port_number)\nprint(\"Root Active?: \" + netSession.is_root_active_user)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the number object."},{"role":"assistant","content":"All numbers are stored in full-precision format. Numbers also represent `true == 1` and `false == 0`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the port object."},{"role":"assistant","content":"A `port` object can be obtained by using [get_ports](#COMPUTER_GET_PORTS), [ping_port](#ROUTER_PING_PORT), [used_ports](#ROUTER_USED_PORTS) or [device_ports](#ROUTER_DEVICE_PORTS). The `classID` used for this object is `\"port\"`. Generally there are no restrictions in regards to which service runs on which port but there are some default ports for each service. List of the most common ports: `21` (FTP), `22` (SSH), `25` (SMTP), `80` (HTTP), `141` (SQL), `8080` (HTTP), `1222` (RSHELL), `1542` (Repository), `3306` (SQL), `3307` (SQL), `3308` (SQL), `6667` (Chat), `37777` (CCTV)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain port.port_number."},{"role":"assistant","content":"Signature: port.port_number() -> number\nReturns the `number` which is used for the port.\nExample:\nrouter = get_router\nports = router.used_ports\nfor port in ports\n   print(\"Port \" + port.port_number + \" is in use!\")\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain port.is_closed."},{"role":"assistant","content":"Signature: port.is_closed() -> number\nReturns a `number`, where one indicates that the specified `port` is closed and zero indicates that the port is open.\nExample:\nrouter = get_router\nports = router.used_ports\nfor port in ports\n   state = \"open\"\n   if (port.is_closed) then state = \"closed\"\n   print(\"Port \" + port.port_number + \" is \" + state + \"!\")\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain port.get_lan_ip."},{"role":"assistant","content":"Signature: port.get_lan_ip() -> string\nReturns a `string` containing the local IP address of the computer to which the port is pointing.\nExample:\nrouter = get_router\nports = router.used_ports\nfor port in ports\n   print(\"Port \" + port.port_number + \" is pointed to \" + port.get_lan_ip + \"!\")\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the router object."},{"role":"assistant","content":"A `router` object can be obtained by either using [get_router](#GENERAL_GET_ROUTER) or [get_switch](#GENERAL_GET_SWITCH). The `classID` used for this object is `\"router\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.device_ports."},{"role":"assistant","content":"Signature: router.device_ports(ip: string) -> string | {\"type\":\"list\",\"valueType\":\"port\"} | null\nReturns a `list` where each item is an open `port` related to the device of the provided LAN IP address. The device needs to be within the network of the `router`. In case of failure, this method will return `null` or a `string` with details. In case an empty ip is provided this method will throw a runtime exception.\nExample:\nrouter = get_router\ndevices = router.devices_lan_ip\nfor ip in devices\n   ports = router.device_ports(ip)\n   openPorts = []\n   for port in ports\n      if port.is_closed then continue\n      openPorts.push(port)\n   end for\n\n   if (openPorts.len == 0) then\n      print(ip + \" has no open ports\")\n   else\n      print(ip + \" contains following open ports:\")\n      for port in openPorts\n         print(\"|-\" +  port.port_number)\n      end for\n   end if\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.devices_lan_ip."},{"role":"assistant","content":"Signature: router.devices_lan_ip() -> {\"type\":\"list\",\"valueType\":\"string\"}\nReturns a `list` where each item is a `string` representing a LAN IP address. All devices are within the network of the router and can be reached by using the `ping` method. Some of the devices might be behind a firewall.\nExample:\nrouter = get_router\ndevices = router.devices_lan_ip\nfor ip in devices\n   print(ip + \" found!\")\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.bssid_name."},{"role":"assistant","content":"Signature: router.bssid_name() -> string\nReturns a `string` with the BSSID value of the router.\nExample:\nrouter = get_router\nbssid = router.bssid_name\nprint(\"BSSID: \" + bssid)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.essid_name."},{"role":"assistant","content":"Signature: router.essid_name() -> string\nReturns a `string` with the ESSID value of the router.\nExample:\nrouter = get_router\nessid = router.essid_name\nprint(\"ESSID: \" + essid)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.firewall_rules."},{"role":"assistant","content":"Signature: router.firewall_rules() -> {\"type\":\"list\",\"valueType\":\"string\"}\nReturns a `list` where each item is a `string` containing a firewall rule.\nExample:\nrouter = get_router\nrules = router.firewall_rules\nprint(\"Firewall rules: \" + rules.join(\", \"))"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.kernel_version."},{"role":"assistant","content":"Signature: router.kernel_version() -> string\nReturns a `string` with the version of the `kernel_router.so` library.\nExample:\nrouter = get_router\nversion = router.kernel_version\nprint(\"Kernel router version: \" + version)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.local_ip."},{"role":"assistant","content":"Signature: router.local_ip() -> string\nReturns a `string` with the local IP address of the router.\nExample:\nrouter = get_router\nlocalIp = router.local_ip\nprint(\"Local IP: \" + localIp)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.public_ip."},{"role":"assistant","content":"Signature: router.public_ip() -> string\nReturns a `string` with the public IP address of the router.\nExample:\nrouter = get_router\npublicIp = router.public_ip\nprint(\"Public IP: \" + publicIp)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.used_ports."},{"role":"assistant","content":"Signature: router.used_ports() -> {\"type\":\"list\",\"valueType\":\"port\"}\nReturns a `list` where each item is a `port` used inside the router.\nExample:\nrouter = get_router\nports = router.used_ports\nfor port in ports\n   print(\"Port \" + port.port_number + \" is available!\")\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.ping_port."},{"role":"assistant","content":"Signature: router.ping_port(port: number) -> port | null\nReturns a `port` that is behind the port `number` provided. In case the `port` does not exist `null` gets returned.\nExample:\nrouter = get_router\nports = router.used_ports\nfor port in ports\n   pingedPort = router.ping_port(port.port_number)\n   if (pingedPort == null) then continue\n   print(\"Pinged \" + pingedPort.port_number)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain router.port_info."},{"role":"assistant","content":"Signature: router.port_info(port: port) -> string | null\nReturns a `string` with information about the provided port, including details about the running service and its version. For example, the output could be `\"http 1.0.0\"`. If the operation fails, `null` will be returned.\nExample:\nrouter = get_router\nports = router.used_ports\nfor port in ports\n   info = router.port_info(port)\n   print(info)\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the service object."},{"role":"assistant","content":"The service object can be obtained by using [include_lib](#GENERAL_INCLUDE_LIB). The `classID` used for this object is `\"service\"`. List of all installable services: `\"FTP\"`, `\"SSH\"`, `\"HTTP\"`, `\"Repository\"`, `\"Chat\"`"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain service.install_service."},{"role":"assistant","content":"Signature: service.install_service() -> number | string\nInstalls the necessary files for the correct functioning of the service and starts it. If the installation is completed successfully, it returns a `number` with the value one. In case of an error, it returns a `string` with details.\nExample:\nservice = include_lib(\"/lib/libhttp.so\")\nresult = service.install_service\nif result == 1 then\n    print \"Successfully installed service\"\nelse\n    print \"Service installation failed: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain service.start_service."},{"role":"assistant","content":"Signature: service.start_service() -> number | string\nStarts the service and opens its associated `port` on the local machine. The service requires a port forwarded to the router to be accessible from the outside. If the service starts correctly, it returns a `number` with the value one. In case of an error, it returns a `string` with details.\nExample:\nservice = include_lib(\"/lib/libhttp.so\")\nresult = service.start_service\nif result == 1 then\n    print \"Successfully started service\"\nelse\n    print \"Starting service failed: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain service.stop_service."},{"role":"assistant","content":"Signature: service.stop_service() -> number | string\nStops the service and closes its associated `port` on the local machine. If the service is stopped successfully, it returns a `number` with the value one. If an error occurs during the process, it returns a `string` with details. In some cases, the returned `number` might be zero, indicating that the service removal failed.\nExample:\nservice = include_lib(\"/lib/libhttp.so\")\nresult = service.stop_service\nif result == 1 then\n    print \"Successfully stopped service\"\nelse\n    print \"Stopping service failed: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the shell object."},{"role":"assistant","content":"A `shell` object can be acquired by either using [get_shell](#GENERAL_GET_SHELL), [connect_service](#SHELL_CONNECT_SERVICE) or [overflow](#META_LIB_OVERFLOW). The `classID` used for this object is `\"shell\"`. In case you want to use [connect_service](#SHELL_CONNECT_SERVICE) to connect to a SSH port it will be usually at port `22`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain shell.host_computer."},{"role":"assistant","content":"Signature: shell.host_computer() -> computer\nReturns a `computer` related to the `shell`.\nExample:\nshell = get_shell\ncomputer = shell.host_computer\nprint(\"Computer public IP is: \" + computer.public_ip)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain shell.start_terminal."},{"role":"assistant","content":"Signature: shell.start_terminal() -> null\nLaunches an active terminal. The terminal's color will change, displaying the IP of the connected shell. Script execution will be stopped upon starting a new terminal, unless this is called from another script that was executed via `shell.launch`. In that case, you will enter the shell after closing your root-level script within that terminal window. Using this method within an SSH encryption process will cause an error to be thrown, preventing further script execution.\nExample:\nshell = get_shell\nshell.start_terminal"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain shell.build."},{"role":"assistant","content":"Signature: shell.build(pathSource: string, pathBinary: string, allowImport: number) -> string\nCompiles a plain code file provided in the arguments to a binary. On success, the new binary will be available under the provided build folder. The binary name will be the same as the source file just without the file extension. Optionally, an allowImport flag can be set which enables the use of `import_code` on the binary. All provided paths must be absolute. Returns an empty string on success. On failure, it will return a string containing details about the reason for failure. In case any provided values deviate from the defined signature a runtime exception will be thrown.\nExample:\nshell = get_shell\ncomputer = shell.host_computer\ncomputer.touch(home_dir, \"test.src\")\ncomputer.File(home_dir + \"/test.src\").set_content(\"print(\"\"hello world\"\")\")\nbuildResult = shell.build(home_dir + \"/test.src\", home_dir + \"/Desktop\")\nif buildResult != \"\" then\n   print(\"There was an error while compiling: \" + buildResult)\nelse\n   print(\"File has been compiled.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain shell.connect_service."},{"role":"assistant","content":"Signature: shell.connect_service(ip: string, port: number, user: string, password: string, service: string) -> shell | ftpShell | string | null\nReturns a `shell` if the connection attempt to the provided IP was successful. This method can only connect to ports running an SSH or FTP service. SSH services usually run on port 22 and FTP services usually on port 21. Keep in mind to pass the right service value depending on which service is going to be used. By default, it will use SSH as the service. Please note that connecting will leave a log entry. In case of failure, a string is returned containing details. If any provided arguments deviate from the method signature, if this method is run in an SSH encryption process, or if the computer is not connected to the internet, a runtime exception will be thrown.\nExample:\nshell = get_shell\nconnectionResult = shell.connect_service(\"1.1.1.1\", 22, \"test\", \"test\")\nif typeof(connectionResult) != \"shell\" then\n   print(\"There was an error while connecting: \" + connectionResult)\nelse\n   print(\"Connected!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain shell.launch."},{"role":"assistant","content":"Signature: shell.launch(program: string, params: string) -> string | number\nLaunches the binary located at the provided path. Optionally, parameters can be passed. Returns a `number`. If the launch was successful, the value will be one; otherwise, it will be zero. In some cases, a `string` will be returned containing an error message. If you need to share variables between a launched script and the current process, consider using `get_custom_object`. Note that launching a script is not asynchronous, meaning that the current script will pause its execution until the launched script finishes. This method cannot be used to execute binaries with an EXE extension (GUI interface). If any provided values deviate from the method signature, a runtime exception will be thrown.\nExample:\nshell = get_shell(\"root\", \"test\")\nshell.launch(\"/bin/cat\", \"/etc/passwd\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain shell.ping."},{"role":"assistant","content":"Signature: shell.ping(ip: string) -> string | number\nReturns a `number`. If the remote address could be reached the value will be one, zero otherwise. Firewalls do not block ping requests. Passing an invalid ip will cause the method to return a `string` with an error message. If any provided arguments deviate from the method signature a runtime exception will be thrown.\nExample:\nshell = get_shell\nisPingable = shell.ping(\"1.1.1.1\")\nif isPingable then\n   print(\"Ping was successful!\")\nelse\n   print(\"Ping failed!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain shell.scp."},{"role":"assistant","content":"Signature: shell.scp(file: string, folder: string, remoteShell: shell) -> number | string | null\nSend a `file` to the `computer` related to the provided `shell`. You require permission to read the `file` on the `computer` from which you are uploading and write permissions in the folder of the `computer` you are trying to upload to. In case of failure, this method will return a `string` with the cause. Otherwise, a `number` with the value one gets returned. If any of the passed arguments deviates from the types of the method signature, `null` will be returned. In case the `string` for sourceFile or destinationFolder is empty, an error will be thrown, preventing further script execution\nExample:\nshell = get_shell\nremoteShell = shell.connect_service(\"1.1.1.1\", 22, \"test\", \"test\")\nresult = remoteShell.scp(\"/bin/ls\", \"/etc/\", shell)\nif typeof(result) == \"string\" then\n   print(\"There was an error while sending file: \" + result)\nelse\n   print(\"File got sent successfully.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the smart-appliance object."},{"role":"assistant","content":"A `smartAppliance` object can be obtained by using [include_lib](#GENERAL_INCLUDE_LIB). The `classID` used for this object is `\"SmartAppliance\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain smart-appliance.model."},{"role":"assistant","content":"Signature: smart-appliance.model() -> string\nReturns a `string` with the appliance model ID.\nExample:\nlibSmartapp = include_lib(\"/lib/libsmartappliance.so\")\nmodelResult = libSmartapp.model\nif modelResult.matches(\"^[A-Z]+$\") then\n    print(\"Model is: \" + modelResult)\nelse\n    print(\"Model couldn't be determined due to: \" + modelResult)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain smart-appliance.override_settings."},{"role":"assistant","content":"Signature: smart-appliance.override_settings(power: number, temperature: number) -> string | number | null\nOverrides the power and temperature settings of the appliance. If successful, it returns a `number` with the value one; otherwise, it returns a `string` detailing the error. If any arguments deviate from the defined signature, this method will return `null`.\nExample:\nlibSmartapp = include_lib(\"/lib/libsmartappliance.so\")\noverrideResult = libSmartapp.override_settings(1000, 20)\nif overrideResult == 1 then\n    print(\"Override was successful!\")\nelse\n    print(\"Override failed due to: \" + overrideResult)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain smart-appliance.set_alarm."},{"role":"assistant","content":"Signature: smart-appliance.set_alarm(enable: number) -> string | number | null\nActivates or deactivates the sound alarm indicating any appliance malfunction. If the operation is successful, a `number` with the value one is returned; otherwise, a `string` containing error details is returned. If the `enable` argument deviates from the defined signature, the method will return `null`.\nExample:\nlibSmartapp = include_lib(\"/lib/libsmartappliance.so\")\nsetAlarmResult = libSmartapp.set_alarm(false)\nif setAlarmResult == 1 then\n    print(\"Alarm was disabled successfully!\")\nelse\n    print(\"Disabling alarm failed due to: \" + setAlarmResult)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the string object."},{"role":"assistant","content":"Text is stored in strings of Unicode characters. Write strings by surrounding them with quotes. If you need to include a quotation mark in the string, write it twice."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.remove."},{"role":"assistant","content":"Signature: string.remove(value: string) -> string\nReturns a new `string` with the provided value removed. Any value other than `null` can be passed, but note that it will be cast to a string. If `null` is passed, this method will throw an error, preventing further script execution.\nExample:\nmyString = \"42 as an answer is wrong\"\nnewString = myString.remove(\"wrong\")\nprint(newString + \"right\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.hasIndex."},{"role":"assistant","content":"Signature: string.hasIndex(index: number) -> number\nReturns a `number`. If the provided index is available in the `string`, the value will be one. Otherwise, the value will be zero.\nExample:\nmyString = \"42 as an answer is wrong\"\ncontainsIndex = myString.hasIndex(1)\nif containsIndex then\n   print(\"String contains index of 1.\")\nelse\n   print(\"String does not contain index of 1.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.insert."},{"role":"assistant","content":"Signature: string.insert(index: number, value: string) -> string\nReturns a `string` with the newly inserted `string` at the provided index. If the passed index is not a `number`, this method throws an error, preventing further script execution.\nExample:\nmyString = \"42 as an answer is wrong\"\nindex = myString.lastIndexOf(\"w\") - 1\nnewString = myString.insert(index, \"not \")\nprint(newString)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.indexOf."},{"role":"assistant","content":"Signature: string.indexOf(value: string, offset: number?) -> number | null\nReturns a `number` which indicates the first matching index of the provided value inside the `list`. Optionally a start index can be provided. In case the value does not exist inside the `string` a `null` gets returned.\nExample:\nmyString = \"42 as an answer is wrong\"\nindex = myString.indexOf(\"wrong\")\nif index != null then\n   print(\"Invalid information spotted at: \" + index)\nelse\n   print(\"Information seems valid.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.lastIndexOf."},{"role":"assistant","content":"Signature: string.lastIndexOf(searchStr: string) -> number\nReturns a `number` which indicates the last matching index of the provided value inside the `list`. In case the value does not exist inside the `string` a `-1` gets returned. If the provided searchStr is not a `string`, this method will return `null`.\nExample:\nmyString = \"42 as an answer is wrong\"\nindex = myString.lastIndexOf(\"wrong\")\nif index != -1 then\n   print(\"Invalid information spotted at: \" + index)\nelse\n   print(\"Information seems valid.\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.split."},{"role":"assistant","content":"Signature: string.split(pattern: string, regexOptions: string) -> {\"type\":\"list\",\"valueType\":\"string\"} | null\nReturns a `list` where each item is a segment of the `string`, separated by the provided separator `string`. This method uses regular expressions for matching, so remember to escape special characters such as dots. If any of the provided arguments deviate from the method signature types, this method will return `null`. In case the pattern is empty, the provided [regexOptions](https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options) are invalid, or the regular expression times out, an error will be thrown, preventing further script execution.\nExample:\nmyString = \"42 as an answer is wrong\"\nsegments = myString.split(\" \")\nif segments[0] != \"42\" then\n   print(\"Invalid information spotted!\")\nelse\n   print(\"Information seems valid!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.replace."},{"role":"assistant","content":"Signature: string.replace(pattern: string, newValue: string, regexOptions: string) -> string\nReturns a `string` with the replaced content by using regular expressions. If any provided arguments deviate from the method signature types, if the pattern is empty, if the provided [regexOptions](https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options) are invalid or if the regular expression times out, an error will be thrown, preventing further script execution.\nExample:\nmyString = \"42 as an answer is wrong\"\nnewString = myString.replace(\"wrong\", \"right\")\nprint(newString)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.trim."},{"role":"assistant","content":"Signature: string.trim() -> string\nReturns a new `string` stripped of any spacing at the beginning and ending.\nExample:\nmyString = \"    42   \"\nprint(myString.trim)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.indexes."},{"role":"assistant","content":"Signature: string.indexes() -> {\"type\":\"list\",\"valueType\":\"number\"}\nReturns a `list` where each item is a `number` representing all available indexes in the `string`.\nExample:\nmyString = \"42\"\nprint(myString.indexes)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.code."},{"role":"assistant","content":"Signature: string.code() -> number\nReturns a `number` representing the Unicode code of the first character of the `string`.\nExample:\nmyString = \"HELLO WORLD\"\nprint(myString.code)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.len."},{"role":"assistant","content":"Signature: string.len() -> number\nReturns a `number` representing the length of the `string`.\nExample:\nmyString = \"HELLO WORLD\"\nprint(\"Size of string is: \" + myString.len)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.lower."},{"role":"assistant","content":"Signature: string.lower() -> string\nReturns a new `string` in which all characters are transformed into lowercase.\nExample:\nmyString = \"HELLO WORLD\"\nprint(myString.lower)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.upper."},{"role":"assistant","content":"Signature: string.upper() -> string\nReturns a new `string` in which all characters are transformed into uppercase.\nExample:\nmyString = \"hello world\"\nprint(myString.upper)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.val."},{"role":"assistant","content":"Signature: string.val() -> number\nReturns a `number` which is parsed from the `string`. In case the `string` is not numeric it will return a zero.\nExample:\nmyString = \"1.25\"\nprint(myString.val + 40.75)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.values."},{"role":"assistant","content":"Signature: string.values() -> {\"type\":\"list\",\"valueType\":\"string\"}\nReturns a `list` where each item is a `string` representing all available characters in the `string`. Could be compared to using `split` but without any separator.\nExample:\nmyString = \"hello world\"\nprint(myString.values)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.to_int."},{"role":"assistant","content":"Signature: string.to_int() -> string | number\nReturns a `number` which is parsed from the `string` as an integer. In case the `string` is not numeric it will return the original `string`.\nExample:\nmyString = \"1\"\nprint(myString.to_int + 41)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.is_match."},{"role":"assistant","content":"Signature: string.is_match(pattern: string, regexOptions: string) -> number\nUses regular expression to check if a string matches a certain pattern. If it matches, it will return a `number` with the value one. If it does not match, the value of the `number` will be zero. If any provided arguments deviate from the method signature types, if the pattern is empty, if the provided [regexOptions](https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options) are invalid, or if the regular expression times out, an error will be thrown, preventing further script execution.\nExample:\nmyString = \"42 as an answer is wrong\"\nhasWordAtTheEnd = myString.is_match(\"\\w+$\")\nprint(hasWordAtTheEnd)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain string.matches."},{"role":"assistant","content":"Signature: string.matches(pattern: string, regexOptions: string) -> {\"type\":\"map\",\"keyType\":\"number\",\"valueType\":\"string\"}\nReturns a `map` with all search results for the provided regular expression. Each key contains the index and the value contains the matching `string`. If any provided arguments deviate from the method signature types, if the pattern is empty, if the provided [regexOptions](https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options) are invalid, or if the regular expression times out, an error will be thrown, preventing further script execution.\nExample:\nmyString = \"42 as an answer is wrong\"\nresult = myString.matches(\"w\")\nprint(result)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the sub-wallet object."},{"role":"assistant","content":"A `subWallet` object can be obtained by either using [get_subwallet](#COIN_GET_SUBWALLET) or [get_subwallets](#COIN_GET_SUBWALLETS). The `classID` used for this object is `\"subwallet\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain sub-wallet.get_balance."},{"role":"assistant","content":"Signature: sub-wallet.get_balance() -> number | string\nReturns a `number` of coins of a given currency. In case of error, a `string` with the details is returned.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = blockchain.get_coin(\"test\", \"test\", \"test\")\nsubWallet = coin.get_subwallet(\"test\")\nprint \"Balance: \" + subWallet.get_balance"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain sub-wallet.set_info."},{"role":"assistant","content":"Signature: sub-wallet.set_info(info: string) -> number | string\nStores optional information in the Subwallet for any use. Upon success, a `number` with the value one will be returned. In case of failure, a `string` with details will be returned.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nresult = set_info(subWallet, \"test\")\nif result == 1 then\n    print \"Subwallet info got set!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain sub-wallet.get_info."},{"role":"assistant","content":"Signature: sub-wallet.get_info() -> string\nReturns a `string` with the information stored by the coin creator.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nprint \"Subwallet info: \" + get_info(subWallet)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain sub-wallet.delete."},{"role":"assistant","content":"Signature: sub-wallet.delete() -> string | number\nDeletes the account registered in the cryptocurrency. Returns a `number` where one indicates successful deletion and zero indicates failure. In case of certain failures, this method may return a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nresult = delete_subwallet(subWallet)\nif result == 1 then\n    print \"Subwallet got deleted!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain sub-wallet.get_user."},{"role":"assistant","content":"Signature: sub-wallet.get_user() -> string\nReturns a `string` with the username associated with this subwallet. On failure, this method returns a `string` with an error message.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nprint \"Subwallet user: \" + get_user(subWallet)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain sub-wallet.last_transaction."},{"role":"assistant","content":"Signature: sub-wallet.last_transaction() -> list | number | string\nReturns a `list` with the information of the last transaction. Index 0 is a `string` with the other subWallet. Index 1 is an integer with the amount. Index 2 is a `number` indicating the direction of the transaction (0 for Deposit, 1 for Withdrawal). Index 3 is a `string` indicating the date of the transaction. On failure, this method will either return a `number` with the value zero or a `string` with an error message.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\ntransactionItem = last_transaction(subWallet)\ndestinationAccount = transactionItem[0]\namount = transactionItem[1]\ndirection = transactionItem[2]\ncompleteDate = transactionItem[3]\nif direction == 0 then\n    print \"Received \" + amount + \" from \" + destinationAccount + \" got completed at the \" + completeDate\nelse\n    print \"Send \" + amount + \" to \" + destinationAccount + \" got completed at the \" + completeDate\nend if "}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain sub-wallet.mining."},{"role":"assistant","content":"Signature: sub-wallet.mining() -> number | string\nStarts the process of mining the cryptocurrency. The process leaves the terminal busy until a coin is mined. On success, this method will return a `number` with the value one. On failure, this method will return a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nwhile mining(subWallet) == 1\n    print \"Mining...\", true\n    print \"Balance \" + get_balance_subwallet(subWallet)\nend while"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain sub-wallet.check_password."},{"role":"assistant","content":"Signature: sub-wallet.check_password(password: string) -> number | string\nReturns a `number` with the value one if the credentials are correct, otherwise, the value is zero. For some cases, this method will return a `string` with an error message.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\npassword = user_input(\"SubWallet password:\", true)\nif check_password(subWallet, password) == 1 then\n    print \"Password is correct!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain sub-wallet.wallet_username."},{"role":"assistant","content":"Signature: sub-wallet.wallet_username() -> string\nReturns a `string` with the name of the `wallet` to which this subwallet belongs.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\ncoin = get_coin(blockchain, \"test\", \"test\", \"test\")\nsubWallet = get_subwallet(coin, \"test\")\nprint \"SubWallet username: \" + wallet_username(subWallet)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the traffic-net object."},{"role":"assistant","content":"A `trafficNet` object can be obtained by using [include_lib](#GENERAL_INCLUDE_LIB). The `classID` used for this object is `\"TrafficNet\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain traffic-net.camera_link_system."},{"role":"assistant","content":"Signature: traffic-net.camera_link_system() -> number | string\nAccesses the traffic camera system, opening a window with controls to switch between different cameras. If the window opens successfully, this method returns a `number` with the value one. In case of an error, it returns a `string` with details.\nExample:\nlibTraffic = include_lib(\"/lib/libtrafficnet.so\")\nlinkSystemResult = libTraffic.camera_link_system\nif linkSystemResult == 1 then\n    print(\"Initiated camera broadcast!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain traffic-net.locate_vehicle."},{"role":"assistant","content":"Signature: traffic-net.locate_vehicle(licensePlate: string, password: string) -> number | string | null\nPerforms a search for the specified license plate to locate the vehicle. If the vehicle is visible on any camera, the viewer will switch to the camera currently displaying it and return a `number` with the value one. If the vehicle cannot be located or the license plate is incorrect, a `string` indicating the error is returned. If any of the provided values deviates from the defined types in the method signature, this method will return `null`.\nExample:\nlibTraffic = include_lib(\"/lib/libtrafficnet.so\")\nlibTraffic.camera_link_system\nvehicleSearchResult = libTraffic.locate_vehicle(\"1L2M3N\", \"pass\")\nif vehicleSearchResult == 1 then\n    print(\"Found vehicle!\")\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain traffic-net.get_credentials_info."},{"role":"assistant","content":"Signature: traffic-net.get_credentials_info() -> string\nReturns string which contains job and name of a NPC. If an error occurs, a `string` with details is returned.\nExample:\nlibTraffic = include_lib(\"/lib/libtrafficnet.so\")\nprint(libTraffic.get_credentials_info)"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain the wallet object."},{"role":"assistant","content":"A `wallet` object can be obtained by either using [create_wallet](#BLOCKCHAIN_CREATE_WALLET) or [login_wallet](#BLOCKCHAIN_LOGIN_WALLET). The `classID` used for this object is `\"wallet\"`."}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.list_coins."},{"role":"assistant","content":"Signature: wallet.list_coins() -> {\"type\":\"list\",\"valueType\":\"string\"} | string\nReturns a `list` where each item is a `string` with the names of the coins available in the `wallet`. On failure this method returns a `string` with an error message.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = blockchain.login_wallet(\"test\", \"test\")\nprint \"My wallet is connected to: \" + wallet.list_coins.join(\", \")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.get_balance."},{"role":"assistant","content":"Signature: wallet.get_balance(coinName: string) -> number | string | null\nReturns a `number` of coins of a given currency. In case of error, a `string` with the details is returned. If the passed coinName is anything other than a `string` this method will return `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = blockchain.login_wallet(\"test\", \"test\")\nfor coinName in wallet.list_coins\n    print \"You have \" + wallet.get_balance(coinName) + \" coins of the currency \"\"\" + coinName + \"\"\"\"\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.buy_coin."},{"role":"assistant","content":"Signature: wallet.buy_coin(coinName: string, coinAmount: number, unitPrice: number, subwalletUser: string) -> number | string\nPublishes a purchase offer indicating the number of coins you wish to buy and the price ($) per unit you are willing to pay. The purchase will be finalized if there is any sale offer with a price less than or equal to the one proposed in the purchase. If there is no eligible offer to sell at that time, the offer to buy will remain publicly visible until a new offer to sell satisfies the requirements. If the publication has been successful, a `number` with the value one is returned. In case of error, a `string` with the details is returned. Any deviation from the method signature will result in a runtime exception preventing further script execution.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nresult = wallet.buy_coin(\"test\", 100, 20, \"test\")\nif result == 1 then\n    print \"Sucessfully created purchase offer!\"\nelse\n    print \"Failed: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.sell_coin."},{"role":"assistant","content":"Signature: wallet.sell_coin(coinName: string, coinAmount: number, unitPrice: number, subwalletUser: string) -> number | string\nPublishes a sale offer indicating the amount of coins you want to sell and the price ($) per unit you want to assign. The sale will be finalized if there is any purchase offer with a price greater than or equal to that proposed in the sale. If there is no existing offer to buy that matches the requirements at that time, the offer to sell will remain publicly visible until a new offer to buy satisfies the requirements. If the publication has been successful, a `number` with the value one is returned. In case of error, a `string` with the details is returned. Any deviation from the method signature will result in a runtime exception preventing further script execution.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nresult = wallet.sell_coin(\"test\", 100, 20, \"test\")\nif result == 1 then\n    print \"Sucessfully created sell offer!\"\nelse\n    print \"Failed: \" + result\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.get_pending_trade."},{"role":"assistant","content":"Signature: wallet.get_pending_trade(coinName: string) -> string | list | null\nReturns a `list` with the pending sale or purchase offer of this wallet for a certain currency. Index 0 of the `list` represents the type of offer with a `string` (Buy/Sell), index 1 represents the quantity to be sold or bought, and index 2 represents the price per unit. On failure, this method will return a `string` with details. Any deviation from the method signature will result in a `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = blockchain.login_wallet(\"test\", \"test\")\nresult = wallet.get_pending_trade(\"test\")\nisBuying = result[0] == \"Buy\"\nquantity = result[1]\nunitPrice = result[2]\ncurrentBalance = wallet.get_balance(\"test\")\nif isBuying then\n    print \"After buying was successful your balance will be \" + (quantity * unitPrice + currentBalance)\nelse\n    print \"After selling was successful your balance will be \" + (currentBalance - quantity * unitPrice)\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.cancel_pending_trade."},{"role":"assistant","content":"Signature: wallet.cancel_pending_trade(coinName: string) -> string | null\nCancel any pending offer of a certain coin. On success, an empty `string` will be returned. On failure, a `string` with an error message will be returned. Any deviation from the method signature will result in `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = blockchain.login_wallet(\"test\", \"test\")\nif wallet.cancel_pending_trade(\"test\") == \"\" then\n    print \"Trade got canceled!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.get_global_offers."},{"role":"assistant","content":"Signature: wallet.get_global_offers(coinName: string) -> string | {\"type\":\"map\",\"keyType\":\"string\",\"valueType\":\"list\"} | null\nReturns a `map` with all the offers made by any player of a given currency. The key of the `map` represents the WalletID of the player who has made the offer, and the value of the `map` is a `list` where index 0 represents the type of offer with a `string` (Buy/Sell), index 1 represents the amount to sell or buy, and index 2 represents the price per unit. In case of failure, this method returns a `string` with details. Any deviation from the method signature will result in `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = blockchain.login_wallet(\"test\", \"test\")\nfor item in wallet.get_global_offers(\"test\")\n    walletId = item.key\n    trade = item.value\n    isBuying = trade[0] == \"Buy\"\n    quantity = trade[1]\n    unitPrice = trade[2]\n    print \"-\" * 10\n    print \"<b>\" + walletId + \"</b>\"\n    if isBuying then\n        print \"<color=green>Is buying</color>\"\n    else\n        print \"<color=yellow>Is selling</color>\"\n    end if\n    print quantity + \" coins with a unit price of \" + unitPrice\nend for"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.list_global_coins."},{"role":"assistant","content":"Signature: wallet.list_global_coins() -> string | {\"type\":\"list\",\"valueType\":\"string\"}\nReturns a `list` where each item is a `string` containing the names of all the currencies that exist. In case of failure, this method returns a `string` with details.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = blockchain.login_wallet(\"test\", \"test\")\nprint \"All existing coins: \" wallet.list_global_coins.join(\", \")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.show_nodes."},{"role":"assistant","content":"Signature: wallet.show_nodes(coinName: string) -> string | number | null\nReturns a `number` representing the count of devices mining a specific coin for the same `wallet`. In case of an error, a `string` with details is returned. Any deviation from the method signature will result in `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = login_wallet(blockchain, \"test\", \"test\")\nprint \"Active miners: \" show_nodes(wallet, \"test\")"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.reset_password."},{"role":"assistant","content":"Signature: wallet.reset_password(newPassword: string) -> number | string | null\nChange the password of the wallet. Only the account owner can perform this action. If the process is completed successfully, a `number` with the value one will be returned. In case of an error, a `string` with details will be returned. Any deviation from the method signature will result in `null`.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nwallet = blockchain.login_wallet(\"test\", \"test\")\nif wallet.reset_password(\"test\") == 1 then\n    print \"You got a new password!\"\nend if"}]}
{"messages":[{"role":"system","content":"You are a helpful assistant for the GreyScript API."},{"role":"user","content":"Explain wallet.get_pin."},{"role":"assistant","content":"Signature: wallet.get_pin() -> string\nReturns a `string` with a PIN that refreshes every few minutes. This PIN is used to obtain an account in cryptocurrency services.\nExample:\nblockchain = include_lib(\"/lib/blockchain.so\")\nmyShell = get_shell\nmyComputer = myShell.host_computer\nwallet = blockchain.login_wallet(\"test\", \"test\")\nmyComputer.touch(\"/root\", \"pin_launch.src\")\nmyFile = myComputer.File(\"/root/pin_launch.src\")\nmyFile.set_content(\"\n    blockchain = include_lib(\"\"/lib/blockchain.so\"\")\n    myShell = get_shell\n    myComputer = myShell.host_computer\n    wallet = blockchain.login_wallet(\"\"test\"\", \"\"test\"\")\n    if params[0] ==  wallet.get_pin then\n        get_custom_object.secret = \"\"The answer is 42\"\"\n    else\n        get_custom_object.secret = \"\"The answer is 10053\"\"\n    end if\n\")\nmyShell.build(\"/root/pin_launch.src\", \"/root\")\nmyFile.delete\nmyShell.launch(\"/root/pin_launch\", wallet.get_pin)\nprint \"The secret: \" + get_custom_object.secret"}]}
